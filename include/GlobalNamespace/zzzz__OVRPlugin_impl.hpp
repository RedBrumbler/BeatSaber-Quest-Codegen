#pragma once
#include "System/zzzz__Enum_impl.hpp"
#include "System/zzzz__MulticastDelegate_impl.hpp"
#include "System/zzzz__ValueType_impl.hpp"
#include "GlobalNamespace/zzzz__OVRPlugin_def.hpp"
#include "System/zzzz__AsyncCallback_def.hpp"
#include "System/zzzz__IAsyncResult_def.hpp"
#include "UnityEngine/zzzz__Texture2D_def.hpp"
#include "UnityEngine/zzzz__RenderTexture_def.hpp"
#include "System/zzzz__Version_def.hpp"
#include "UnityEngine/zzzz__Vector4_def.hpp"
#include "UnityEngine/zzzz__Matrix4x4_def.hpp"
#include "System/zzzz__Guid_def.hpp"
#include "UnityEngine/zzzz__Vector3_def.hpp"
#include "GlobalNamespace/zzzz__OVRNativeBuffer_def.hpp"
#include "Unity/Collections/zzzz__Allocator_def.hpp"
#include "UnityEngine/zzzz__Vector2_def.hpp"
#include "System/zzzz__Nullable_1_def.hpp"
#include "Unity/Collections/zzzz__NativeArray_1_def.hpp"
#include "System/Runtime/InteropServices/zzzz__GCHandle_def.hpp"
#include "System/zzzz__IDisposable_def.hpp"
#include "System/zzzz__IEquatable_1_def.hpp"
#include "UnityEngine/zzzz__Rect_def.hpp"
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__GUID._ctor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::_ctor)> {
  constexpr static std::size_t size = 0x8;
  constexpr static std::size_t addrs = 0x26209b8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__GUID>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__set_a(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x10>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__get_a() const {
return ::cordl_internals::getInstanceField<int32_t, 0x10>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__set_b(int16_t value)  {
::cordl_internals::setInstanceField<int16_t, 0x14>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<int16_t>(value));
}
constexpr int16_t GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__get_b() const {
return ::cordl_internals::getInstanceField<int16_t, 0x14>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__set_c(int16_t value)  {
::cordl_internals::setInstanceField<int16_t, 0x16>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<int16_t>(value));
}
constexpr int16_t GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__get_c() const {
return ::cordl_internals::getInstanceField<int16_t, 0x16>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__set_d0(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x18>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__get_d0() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x18>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__set_d1(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x19>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__get_d1() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x19>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__set_d2(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x1a>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__get_d2() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x1a>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__set_d3(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x1b>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__get_d3() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x1b>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__set_d4(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x1c>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__get_d4() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x1c>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__set_d5(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x1d>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__get_d5() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x1d>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__set_d6(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x1e>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__get_d6() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x1e>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__set_d7(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x1f>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::__get_d7() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x1f>(this->::bs_hook::Il2CppWrapperType::instance);
}
// Ctor Parameters []
 GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::GlobalNamespace__OVRPlugin__GUID()  : ::bs_hook::Il2CppWrapperType(THROW_UNLESS(::il2cpp_utils::New<GlobalNamespace__OVRPlugin__GUID>())) {}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__GUID::_ctor()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__GUID>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(const_cast<void*>(instance), ___internal_method);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool::GlobalNamespace__OVRPlugin__Bool(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Bool::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Bool::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool  GlobalNamespace::GlobalNamespace__OVRPlugin__Bool::False{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool  GlobalNamespace::GlobalNamespace__OVRPlugin__Bool::True{1};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result::GlobalNamespace__OVRPlugin__Result(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Result::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Result::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Success{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Success_EventUnavailable{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Success_Pending{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure{-1000};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_InvalidParameter{-1001};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_NotInitialized{-1002};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_InvalidOperation{-1003};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_Unsupported{-1004};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_NotYetImplemented{-1005};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_OperationFailed{-1006};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_InsufficientSize{-1007};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_DataIsInvalid{-1008};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_DeprecatedOperation{-1009};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_ErrorLimitReached{-1010};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_ErrorInitializationFailed{-1011};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_SpaceCloudStorageDisabled{-2000};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_SpaceMappingInsufficient{-2001};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_SpaceLocalizationFailed{-2002};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_SpaceNetworkTimeout{-2003};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Result  GlobalNamespace::GlobalNamespace__OVRPlugin__Result::Failure_SpaceNetworkRequestFailed{-2004};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel::GlobalNamespace__OVRPlugin__LogLevel(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel::Debug{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel::Info{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel::Error{2};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType._ctor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType::*)(::bs_hook::Il2CppWrapperType, ::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType::_ctor)> {
  constexpr static std::size_t size = 0xc4;
  constexpr static std::size_t addrs = 0x26209c0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::bs_hook::Il2CppWrapperType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType.Invoke
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType::*)(GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel, ::cordl_internals::intptr_t, int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType::Invoke)> {
  constexpr static std::size_t size = 0x14;
  constexpr static std::size_t addrs = 0x2620a84;

  inline static const ::MethodInfo* methodInfo() {
    
                            static auto* ___internal_method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(
                                classof(GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType),
                                 ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType>::get(),
                                  13
                                ));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType.BeginInvoke
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::IAsyncResult (GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType::*)(GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel, ::cordl_internals::intptr_t, int32_t, System::AsyncCallback, ::bs_hook::Il2CppWrapperType)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType::BeginInvoke)> {
  constexpr static std::size_t size = 0xe4;
  constexpr static std::size_t addrs = 0x2620a98;

  inline static const ::MethodInfo* methodInfo() {
    
                            static auto* ___internal_method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(
                                classof(GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType),
                                 ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType>::get(),
                                  14
                                ));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType.EndInvoke
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType::*)(System::IAsyncResult)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType::EndInvoke)> {
  constexpr static std::size_t size = 0xc;
  constexpr static std::size_t addrs = 0x2620b7c;

  inline static const ::MethodInfo* methodInfo() {
    
                            static auto* ___internal_method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(
                                classof(GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType),
                                 ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType>::get(),
                                  15
                                ));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "object", ty: "::bs_hook::Il2CppWrapperType", modifiers: "", def_value: None }, CppParam { name: "method", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: None }]
 GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType::GlobalNamespace__OVRPlugin__LogCallback2DelegateType(::bs_hook::Il2CppWrapperType object, ::cordl_internals::intptr_t method)  : System::MulticastDelegate(THROW_UNLESS(::il2cpp_utils::New<GlobalNamespace__OVRPlugin__LogCallback2DelegateType>(object, method))) {}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType::_ctor(::bs_hook::Il2CppWrapperType object, ::cordl_internals::intptr_t method)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::bs_hook::Il2CppWrapperType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(const_cast<void*>(instance), ___internal_method, object, method);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType::Invoke(GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel logLevel, ::cordl_internals::intptr_t message, int32_t size)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType>::get(),
                            "Invoke",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(const_cast<void*>(instance), ___internal_method, logLevel, message, size);
}
 System::IAsyncResult GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType::BeginInvoke(GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel logLevel, ::cordl_internals::intptr_t message, int32_t size, System::AsyncCallback callback, ::bs_hook::Il2CppWrapperType object)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType>::get(),
                            "BeginInvoke",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<System::AsyncCallback>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::bs_hook::Il2CppWrapperType>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<System::IAsyncResult, false>(const_cast<void*>(instance), ___internal_method, logLevel, message, size, callback, object);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType::EndInvoke(System::IAsyncResult result)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType>::get(),
                            "EndInvoke",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<System::IAsyncResult>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(const_cast<void*>(instance), ___internal_method, result);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus::GlobalNamespace__OVRPlugin__CameraStatus(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus::CameraStatus_None{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus::CameraStatus_Connected{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus::CameraStatus_Calibrating{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus::CameraStatus_CalibrationFailed{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus::CameraStatus_Calibrated{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus::CameraStatus_ThirdPerson{5};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus::CameraStatus_EnumSize{2147483647};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType::GlobalNamespace__OVRPlugin__CameraAnchorType(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType::CameraAnchorType_PreDefined{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType::CameraAnchorType_Custom{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType::CameraAnchorType_Count{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType::CameraAnchorType_EnumSize{2147483647};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi::GlobalNamespace__OVRPlugin__XrApi(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi  GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi::Unknown{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi  GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi::CAPI{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi  GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi::VRAPI{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi  GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi::OpenXR{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi  GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi::EnumSize{2147483647};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Eye::GlobalNamespace__OVRPlugin__Eye(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Eye::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Eye::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Eye  GlobalNamespace::GlobalNamespace__OVRPlugin__Eye::None{-1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Eye  GlobalNamespace::GlobalNamespace__OVRPlugin__Eye::Left{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Eye  GlobalNamespace::GlobalNamespace__OVRPlugin__Eye::Right{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Eye  GlobalNamespace::GlobalNamespace__OVRPlugin__Eye::Count{2};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker::GlobalNamespace__OVRPlugin__Tracker(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker  GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker::None{-1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker  GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker::Zero{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker  GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker::One{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker  GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker::Two{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker  GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker::Three{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker  GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker::Count{4};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node::GlobalNamespace__OVRPlugin__Node(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Node::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Node::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node  GlobalNamespace::GlobalNamespace__OVRPlugin__Node::None{-1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node  GlobalNamespace::GlobalNamespace__OVRPlugin__Node::EyeLeft{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node  GlobalNamespace::GlobalNamespace__OVRPlugin__Node::EyeRight{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node  GlobalNamespace::GlobalNamespace__OVRPlugin__Node::EyeCenter{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node  GlobalNamespace::GlobalNamespace__OVRPlugin__Node::HandLeft{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node  GlobalNamespace::GlobalNamespace__OVRPlugin__Node::HandRight{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node  GlobalNamespace::GlobalNamespace__OVRPlugin__Node::TrackerZero{5};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node  GlobalNamespace::GlobalNamespace__OVRPlugin__Node::TrackerOne{6};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node  GlobalNamespace::GlobalNamespace__OVRPlugin__Node::TrackerTwo{7};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node  GlobalNamespace::GlobalNamespace__OVRPlugin__Node::TrackerThree{8};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node  GlobalNamespace::GlobalNamespace__OVRPlugin__Node::Head{9};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node  GlobalNamespace::GlobalNamespace__OVRPlugin__Node::DeviceObjectZero{10};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node  GlobalNamespace::GlobalNamespace__OVRPlugin__Node::TrackedKeyboard{11};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node  GlobalNamespace::GlobalNamespace__OVRPlugin__Node::Count{12};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Controller::GlobalNamespace__OVRPlugin__Controller(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Controller::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Controller::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Controller  GlobalNamespace::GlobalNamespace__OVRPlugin__Controller::None{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Controller  GlobalNamespace::GlobalNamespace__OVRPlugin__Controller::LTouch{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Controller  GlobalNamespace::GlobalNamespace__OVRPlugin__Controller::RTouch{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Controller  GlobalNamespace::GlobalNamespace__OVRPlugin__Controller::Touch{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Controller  GlobalNamespace::GlobalNamespace__OVRPlugin__Controller::Remote{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Controller  GlobalNamespace::GlobalNamespace__OVRPlugin__Controller::Gamepad{16};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Controller  GlobalNamespace::GlobalNamespace__OVRPlugin__Controller::LHand{32};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Controller  GlobalNamespace::GlobalNamespace__OVRPlugin__Controller::RHand{64};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Controller  GlobalNamespace::GlobalNamespace__OVRPlugin__Controller::Hands{96};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Controller  GlobalNamespace::GlobalNamespace__OVRPlugin__Controller::Active{-2147483648};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Controller  GlobalNamespace::GlobalNamespace__OVRPlugin__Controller::All{-1};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile::GlobalNamespace__OVRPlugin__InteractionProfile(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile  GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile::None{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile  GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile::Touch{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile  GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile::TouchPro{2};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness::GlobalNamespace__OVRPlugin__Handedness(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness  GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness::Unsupported{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness  GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness::LeftHanded{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness  GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness::RightHanded{2};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin::GlobalNamespace__OVRPlugin__TrackingOrigin(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin::EyeLevel{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin::FloorLevel{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin::Stage{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin::View{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin::Count{5};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags::GlobalNamespace__OVRPlugin__RecenterFlags(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags::Default{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags::IgnoreAll{-2147483648};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags::Count{-2147483647};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus::GlobalNamespace__OVRPlugin__BatteryStatus(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus::Charging{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus::Discharging{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus::Full{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus::NotCharging{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus::Unknown{4};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat::GlobalNamespace__OVRPlugin__EyeTextureFormat(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat  GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat::Default{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat  GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat::R8G8B8A8_sRGB{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat  GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat::R8G8B8A8{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat  GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat::R16G16B16A16_FP{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat  GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat::R11G11B10_FP{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat  GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat::B8G8R8A8_sRGB{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat  GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat::B8G8R8A8{5};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat  GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat::R5G6B5{11};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat  GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat::EnumSize{2147483647};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI::GlobalNamespace__OVRPlugin__PlatformUI(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI  GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI::None{-1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI  GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI::ConfirmQuit{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI  GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI::GlobalMenuTutorial{2};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion::GlobalNamespace__OVRPlugin__SystemRegion(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion::Unspecified{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion::Japan{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion::China{2};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::GlobalNamespace__OVRPlugin__SystemHeadset(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::None{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Oculus_Quest{8};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Oculus_Quest_2{9};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Meta_Quest_Pro{10};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Placeholder_11{11};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Placeholder_12{12};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Placeholder_13{13};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Placeholder_14{14};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Rift_DK1{4096};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Rift_DK2{4097};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Rift_CV1{4098};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Rift_CB{4099};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Rift_S{4100};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Oculus_Link_Quest{4101};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Oculus_Link_Quest_2{4102};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::Meta_Link_Quest_Pro{4103};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::PC_Placeholder_4104{4104};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::PC_Placeholder_4105{4105};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::PC_Placeholder_4106{4106};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset  GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset::PC_Placeholder_4107{4107};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape::GlobalNamespace__OVRPlugin__OverlayShape(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape::Quad{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape::Cylinder{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape::Cubemap{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape::OffcenterCubemap{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape::Equirect{5};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape::ReconstructionPassthrough{7};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape::SurfaceProjectedPassthrough{8};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape::Fisheye{9};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape::KeyboardHandsPassthrough{10};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape::KeyboardMaskedHandsPassthrough{11};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Step::GlobalNamespace__OVRPlugin__Step(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Step::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Step::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Step  GlobalNamespace::GlobalNamespace__OVRPlugin__Step::Render{-1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Step  GlobalNamespace::GlobalNamespace__OVRPlugin__Step::Physics{0};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice::GlobalNamespace__OVRPlugin__CameraDevice(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice::None{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice::WebCamera0{100};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice::WebCamera1{101};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice::ZEDCamera{300};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode::GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode::Standard{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode::Fill{1};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality::Low{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality::Medium{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality  GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality::High{2};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel::Off{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel::Low{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel::Medium{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel::High{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel::HighTop{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel::EnumSize{2147483647};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel::Off{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel::Low{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel::Medium{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel::High{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel::HighTop{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel::EnumSize{2147483647};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel::GlobalNamespace__OVRPlugin__TiledMultiResLevel(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel::Off{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel::LMSLow{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel::LMSMedium{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel::LMSHigh{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel::LMSHighTop{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel::EnumSize{2147483647};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::GlobalNamespace__OVRPlugin__PerfMetrics(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::App_CpuTime_Float{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::App_GpuTime_Float{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Compositor_CpuTime_Float{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Compositor_GpuTime_Float{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Compositor_DroppedFrameCount_Int{5};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::System_GpuUtilPercentage_Float{7};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::System_CpuUtilAveragePercentage_Float{8};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::System_CpuUtilWorstPercentage_Float{9};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Device_CpuClockFrequencyInMHz_Float{10};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Device_GpuClockFrequencyInMHz_Float{11};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Device_CpuClockLevel_Int{12};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Device_GpuClockLevel_Int{13};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Compositor_SpaceWarp_Mode_Int{14};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Device_CpuCore0UtilPercentage_Float{32};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Device_CpuCore1UtilPercentage_Float{33};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Device_CpuCore2UtilPercentage_Float{34};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Device_CpuCore3UtilPercentage_Float{35};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Device_CpuCore4UtilPercentage_Float{36};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Device_CpuCore5UtilPercentage_Float{37};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Device_CpuCore6UtilPercentage_Float{38};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Device_CpuCore7UtilPercentage_Float{39};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::Count{40};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics  GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics::EnumSize{2147483647};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel::PowerSavings{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel::SustainedLow{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel::SustainedHigh{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel::Boost{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel  GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel::EnumSize{2147483647};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType::GlobalNamespace__OVRPlugin__FeatureType(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType  GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType::HandTracking{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType  GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType::KeyboardTracking{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType  GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType::EyeTracking{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType  GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType::FaceTracking{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType  GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType::BodyTracking{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType  GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType::Passthrough{5};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType  GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType::GazeBasedFoveatedRendering{6};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType  GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType::Count{7};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType  GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType::EnumSize{2147483647};
// Ctor Parameters [CppParam { name: "fx", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "fy", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "cx", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "cy", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "disto0", ty: "double_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "disto1", ty: "double_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "disto2", ty: "double_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "disto3", ty: "double_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "disto4", ty: "double_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "v_fov", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "h_fov", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "d_fov", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "w", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "h", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters(float_t fx, float_t fy, float_t cx, float_t cy, double_t disto0, double_t disto1, double_t disto2, double_t disto3, double_t disto4, float_t v_fov, float_t h_fov, float_t d_fov, int32_t w, int32_t h) noexcept : ::bs_hook::ValueTypeWrapper() {this->fx = fx;
this->fy = fy;
this->cx = cx;
this->cy = cy;
this->disto0 = disto0;
this->disto1 = disto1;
this->disto2 = disto2;
this->disto3 = disto3;
this->disto4 = disto4;
this->v_fov = v_fov;
this->h_fov = h_fov;
this->d_fov = d_fov;
this->w = w;
this->h = h;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__set_fx(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__get_fx() const {
return ::cordl_internals::getInstanceField<float_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__set_fy(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__get_fy() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__set_cx(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__get_cx() const {
return ::cordl_internals::getInstanceField<float_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__set_cy(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xc>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__get_cy() const {
return ::cordl_internals::getInstanceField<float_t, 0xc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__set_disto0(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x10>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__get_disto0() const {
return ::cordl_internals::getInstanceField<double_t, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__set_disto1(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x18>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__get_disto1() const {
return ::cordl_internals::getInstanceField<double_t, 0x18>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__set_disto2(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x20>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__get_disto2() const {
return ::cordl_internals::getInstanceField<double_t, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__set_disto3(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x28>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__get_disto3() const {
return ::cordl_internals::getInstanceField<double_t, 0x28>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__set_disto4(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x30>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__get_disto4() const {
return ::cordl_internals::getInstanceField<double_t, 0x30>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__set_v_fov(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x38>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__get_v_fov() const {
return ::cordl_internals::getInstanceField<float_t, 0x38>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__set_h_fov(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x3c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__get_h_fov() const {
return ::cordl_internals::getInstanceField<float_t, 0x3c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__set_d_fov(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x40>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__get_d_fov() const {
return ::cordl_internals::getInstanceField<float_t, 0x40>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__set_w(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x44>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__get_w() const {
return ::cordl_internals::getInstanceField<int32_t, 0x44>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__set_h(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x48>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters::__get_h() const {
return ::cordl_internals::getInstanceField<int32_t, 0x48>(this->__instance);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::GlobalNamespace__OVRPlugin__OverlayFlag(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::None{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::OnTop{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::HeadLocked{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::NoDepth{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::ExpensiveSuperSample{8};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::EfficientSuperSample{16};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::EfficientSharpen{32};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::BicubicFiltering{64};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::ExpensiveSharpen{128};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::SecureContent{256};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::ShapeFlag_Quad{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::ShapeFlag_Cylinder{16};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::ShapeFlag_Cubemap{32};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::ShapeFlag_OffcenterCubemap{64};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::ShapeFlagRangeMask{240};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag  GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag::Hidden{512};
// Ctor Parameters [CppParam { name: "x", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "y", ty: "float_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f::GlobalNamespace__OVRPlugin__Vector2f(float_t x, float_t y) noexcept : ::bs_hook::ValueTypeWrapper() {this->x = x;
this->y = y;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f::__set_x(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f::__get_x() const {
return ::cordl_internals::getInstanceField<float_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f::__set_y(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f::__get_y() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f.ToString
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f::ToString)> {
  constexpr static std::size_t size = 0xfc;
  constexpr static std::size_t addrs = 0x2620b88;

  inline static const ::MethodInfo* methodInfo() {
    
                            static auto* ___internal_method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(
                                classof(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f),
                                 ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>::get(),
                                  3
                                ));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "x", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "y", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "z", ty: "float_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f::GlobalNamespace__OVRPlugin__Vector3f(float_t x, float_t y, float_t z) noexcept : ::bs_hook::ValueTypeWrapper() {this->x = x;
this->y = y;
this->z = z;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f::__set_x(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f::__get_x() const {
return ::cordl_internals::getInstanceField<float_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f::__set_y(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f::__get_y() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f::__set_z(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f::__get_z() const {
return ::cordl_internals::getInstanceField<float_t, 0x8>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f::__set_zero(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, "zero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f::__get_zero()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, "zero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>::get>();
}
 ::StringW GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f::ToString()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>::get(),
                            "ToString",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f.ToString
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f::ToString)> {
  constexpr static std::size_t size = 0x1e4;
  constexpr static std::size_t addrs = 0x2620cd0;

  inline static const ::MethodInfo* methodInfo() {
    
                            static auto* ___internal_method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(
                                classof(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f),
                                 ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f>::get(),
                                  3
                                ));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "x", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "y", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "z", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "w", ty: "float_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f::GlobalNamespace__OVRPlugin__Vector4f(float_t x, float_t y, float_t z, float_t w) noexcept : ::bs_hook::ValueTypeWrapper() {this->x = x;
this->y = y;
this->z = z;
this->w = w;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f::__set_x(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f::__get_x() const {
return ::cordl_internals::getInstanceField<float_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f::__set_y(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f::__get_y() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f::__set_z(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f::__get_z() const {
return ::cordl_internals::getInstanceField<float_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f::__set_w(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xc>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f::__get_w() const {
return ::cordl_internals::getInstanceField<float_t, 0xc>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f::__set_zero(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f, "zero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f::__get_zero()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f, "zero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f>::get>();
}
 ::StringW GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f::ToString()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f>::get(),
                            "ToString",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s.ToString
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s::ToString)> {
  constexpr static std::size_t size = 0x1e4;
  constexpr static std::size_t addrs = 0x2620efc;

  inline static const ::MethodInfo* methodInfo() {
    
                            static auto* ___internal_method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(
                                classof(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s),
                                 ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s>::get(),
                                  3
                                ));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "x", ty: "int16_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "y", ty: "int16_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "z", ty: "int16_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "w", ty: "int16_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s::GlobalNamespace__OVRPlugin__Vector4s(int16_t x, int16_t y, int16_t z, int16_t w) noexcept : ::bs_hook::ValueTypeWrapper() {this->x = x;
this->y = y;
this->z = z;
this->w = w;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s::__set_x(int16_t value)  {
::cordl_internals::setInstanceField<int16_t, 0x0>(this->__instance, std::forward<int16_t>(value));
}
constexpr int16_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s::__get_x() const {
return ::cordl_internals::getInstanceField<int16_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s::__set_y(int16_t value)  {
::cordl_internals::setInstanceField<int16_t, 0x2>(this->__instance, std::forward<int16_t>(value));
}
constexpr int16_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s::__get_y() const {
return ::cordl_internals::getInstanceField<int16_t, 0x2>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s::__set_z(int16_t value)  {
::cordl_internals::setInstanceField<int16_t, 0x4>(this->__instance, std::forward<int16_t>(value));
}
constexpr int16_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s::__get_z() const {
return ::cordl_internals::getInstanceField<int16_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s::__set_w(int16_t value)  {
::cordl_internals::setInstanceField<int16_t, 0x6>(this->__instance, std::forward<int16_t>(value));
}
constexpr int16_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s::__get_w() const {
return ::cordl_internals::getInstanceField<int16_t, 0x6>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s::__set_zero(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s, "zero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s::__get_zero()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s, "zero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s>::get>();
}
 ::StringW GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s::ToString()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s>::get(),
                            "ToString",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf.ToString
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf::ToString)> {
  constexpr static std::size_t size = 0x1e4;
  constexpr static std::size_t addrs = 0x2621128;

  inline static const ::MethodInfo* methodInfo() {
    
                            static auto* ___internal_method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(
                                classof(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf),
                                 ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>::get(),
                                  3
                                ));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "x", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "y", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "z", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "w", ty: "float_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf::GlobalNamespace__OVRPlugin__Quatf(float_t x, float_t y, float_t z, float_t w) noexcept : ::bs_hook::ValueTypeWrapper() {this->x = x;
this->y = y;
this->z = z;
this->w = w;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf::__set_x(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf::__get_x() const {
return ::cordl_internals::getInstanceField<float_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf::__set_y(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf::__get_y() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf::__set_z(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf::__get_z() const {
return ::cordl_internals::getInstanceField<float_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf::__set_w(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xc>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf::__get_w() const {
return ::cordl_internals::getInstanceField<float_t, 0xc>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf::__set_identity(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, "identity", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf::__get_identity()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, "identity", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>::get>();
}
 ::StringW GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf::ToString()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>::get(),
                            "ToString",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Posef.ToString
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GlobalNamespace__OVRPlugin__Posef::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Posef::ToString)> {
  constexpr static std::size_t size = 0xf4;
  constexpr static std::size_t addrs = 0x262135c;

  inline static const ::MethodInfo* methodInfo() {
    
                            static auto* ___internal_method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(
                                classof(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef),
                                 ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(),
                                  3
                                ));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "Orientation", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "Position", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef::GlobalNamespace__OVRPlugin__Posef(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf Orientation, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f Position) noexcept : ::bs_hook::ValueTypeWrapper() {this->Orientation = Orientation;
this->Position = Position;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Posef::__set_Orientation(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__Posef::__get_Orientation() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Posef::__set_Position(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x10>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::GlobalNamespace__OVRPlugin__Posef::__get_Position() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x10>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__Posef::__set_identity(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, "identity", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__Posef::__get_identity()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, "identity", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get>();
}
 ::StringW GlobalNamespace::GlobalNamespace__OVRPlugin__Posef::ToString()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(),
                            "ToString",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf.ToString
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf::ToString)> {
  constexpr static std::size_t size = 0x1f8;
  constexpr static std::size_t addrs = 0x2621528;

  inline static const ::MethodInfo* methodInfo() {
    
                            static auto* ___internal_method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(
                                classof(GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf),
                                 ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf>::get(),
                                  3
                                ));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "leftRect", ty: "UnityEngine::Rect", modifiers: "", def_value: Some("{}") }, CppParam { name: "rightRect", ty: "UnityEngine::Rect", modifiers: "", def_value: Some("{}") }, CppParam { name: "leftScaleBias", ty: "UnityEngine::Vector4", modifiers: "", def_value: Some("{}") }, CppParam { name: "rightScaleBias", ty: "UnityEngine::Vector4", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf::GlobalNamespace__OVRPlugin__TextureRectMatrixf(UnityEngine::Rect leftRect, UnityEngine::Rect rightRect, UnityEngine::Vector4 leftScaleBias, UnityEngine::Vector4 rightScaleBias) noexcept : ::bs_hook::ValueTypeWrapper() {this->leftRect = leftRect;
this->rightRect = rightRect;
this->leftScaleBias = leftScaleBias;
this->rightScaleBias = rightScaleBias;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf::__set_leftRect(UnityEngine::Rect value)  {
::cordl_internals::setInstanceField<UnityEngine::Rect, 0x0>(this->__instance, std::forward<UnityEngine::Rect>(value));
}
constexpr UnityEngine::Rect GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf::__get_leftRect() const {
return ::cordl_internals::getInstanceField<UnityEngine::Rect, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf::__set_rightRect(UnityEngine::Rect value)  {
::cordl_internals::setInstanceField<UnityEngine::Rect, 0x10>(this->__instance, std::forward<UnityEngine::Rect>(value));
}
constexpr UnityEngine::Rect GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf::__get_rightRect() const {
return ::cordl_internals::getInstanceField<UnityEngine::Rect, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf::__set_leftScaleBias(UnityEngine::Vector4 value)  {
::cordl_internals::setInstanceField<UnityEngine::Vector4, 0x20>(this->__instance, std::forward<UnityEngine::Vector4>(value));
}
constexpr UnityEngine::Vector4 GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf::__get_leftScaleBias() const {
return ::cordl_internals::getInstanceField<UnityEngine::Vector4, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf::__set_rightScaleBias(UnityEngine::Vector4 value)  {
::cordl_internals::setInstanceField<UnityEngine::Vector4, 0x30>(this->__instance, std::forward<UnityEngine::Vector4>(value));
}
constexpr UnityEngine::Vector4 GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf::__get_rightScaleBias() const {
return ::cordl_internals::getInstanceField<UnityEngine::Vector4, 0x30>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf::__set_zero(GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf, "zero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf::__get_zero()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf, "zero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf>::get>();
}
 ::StringW GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf::ToString()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf>::get(),
                            "ToString",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
// Ctor Parameters [CppParam { name: "Pose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: Some("{}") }, CppParam { name: "Velocity", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: Some("{}") }, CppParam { name: "Acceleration", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: Some("{}") }, CppParam { name: "AngularVelocity", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: Some("{}") }, CppParam { name: "AngularAcceleration", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: Some("{}") }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::GlobalNamespace__OVRPlugin__PoseStatef(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef Pose, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f Velocity, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f Acceleration, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f AngularVelocity, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f AngularAcceleration, double_t Time) noexcept : ::bs_hook::ValueTypeWrapper() {this->Pose = Pose;
this->Velocity = Velocity;
this->Acceleration = Acceleration;
this->AngularVelocity = AngularVelocity;
this->AngularAcceleration = AngularAcceleration;
this->Time = Time;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::__set_Pose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::__get_Pose() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::__set_Velocity(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x1c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::__get_Velocity() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x1c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::__set_Acceleration(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x28>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::__get_Acceleration() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x28>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::__set_AngularVelocity(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x34>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::__get_AngularVelocity() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x34>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::__set_AngularAcceleration(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x40>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::__get_AngularAcceleration() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x40>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::__set_Time(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x50>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::__get_Time() const {
return ::cordl_internals::getInstanceField<double_t, 0x50>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::__set_identity(GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef, "identity", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef::__get_identity()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef, "identity", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef>::get>();
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation::GlobalNamespace__OVRPlugin__HapticsLocation(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation  GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation::None{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation  GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation::Hand{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation  GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation::Thumb{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation  GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation::Index{4};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5._ctor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::*)(GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::_ctor)> {
  constexpr static std::size_t size = 0x90;
  constexpr static std::size_t addrs = 0x26218f8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4>::get()}
                        )));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "ConnectedControllers", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Buttons", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Touches", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "NearTouches", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LIndexTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RIndexTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LHandTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RHandTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }, CppParam { name: "RThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }, CppParam { name: "LTouchpad", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }, CppParam { name: "RTouchpad", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }, CppParam { name: "LBatteryPercentRemaining", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RBatteryPercentRemaining", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LRecenterCount", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RRecenterCount", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LThumbRestForce", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RThumbRestForce", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LStylusForce", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RStylusForce", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LIndexTriggerCurl", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RIndexTriggerCurl", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LIndexTriggerSlide", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RIndexTriggerSlide", ty: "float_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::GlobalNamespace__OVRPlugin__ControllerState5(uint32_t ConnectedControllers, uint32_t Buttons, uint32_t Touches, uint32_t NearTouches, float_t LIndexTrigger, float_t RIndexTrigger, float_t LHandTrigger, float_t RHandTrigger, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f LThumbstick, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f RThumbstick, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f LTouchpad, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f RTouchpad, uint8_t LBatteryPercentRemaining, uint8_t RBatteryPercentRemaining, uint8_t LRecenterCount, uint8_t RRecenterCount, float_t LThumbRestForce, float_t RThumbRestForce, float_t LStylusForce, float_t RStylusForce, float_t LIndexTriggerCurl, float_t RIndexTriggerCurl, float_t LIndexTriggerSlide, float_t RIndexTriggerSlide) noexcept : ::bs_hook::ValueTypeWrapper() {this->ConnectedControllers = ConnectedControllers;
this->Buttons = Buttons;
this->Touches = Touches;
this->NearTouches = NearTouches;
this->LIndexTrigger = LIndexTrigger;
this->RIndexTrigger = RIndexTrigger;
this->LHandTrigger = LHandTrigger;
this->RHandTrigger = RHandTrigger;
this->LThumbstick = LThumbstick;
this->RThumbstick = RThumbstick;
this->LTouchpad = LTouchpad;
this->RTouchpad = RTouchpad;
this->LBatteryPercentRemaining = LBatteryPercentRemaining;
this->RBatteryPercentRemaining = RBatteryPercentRemaining;
this->LRecenterCount = LRecenterCount;
this->RRecenterCount = RRecenterCount;
this->LThumbRestForce = LThumbRestForce;
this->RThumbRestForce = RThumbRestForce;
this->LStylusForce = LStylusForce;
this->RStylusForce = RStylusForce;
this->LIndexTriggerCurl = LIndexTriggerCurl;
this->RIndexTriggerCurl = RIndexTriggerCurl;
this->LIndexTriggerSlide = LIndexTriggerSlide;
this->RIndexTriggerSlide = RIndexTriggerSlide;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_ConnectedControllers(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x0>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_ConnectedControllers() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_Buttons(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x4>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_Buttons() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_Touches(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x8>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_Touches() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_NearTouches(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0xc>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_NearTouches() const {
return ::cordl_internals::getInstanceField<uint32_t, 0xc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_LIndexTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x10>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_LIndexTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_RIndexTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x14>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_RIndexTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x14>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_LHandTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x18>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_LHandTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x18>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_RHandTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x1c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_RHandTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x1c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_LThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x20>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_LThumbstick() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_RThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x28>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_RThumbstick() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x28>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_LTouchpad(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x30>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_LTouchpad() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x30>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_RTouchpad(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x38>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_RTouchpad() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x38>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_LBatteryPercentRemaining(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x40>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_LBatteryPercentRemaining() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x40>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_RBatteryPercentRemaining(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x41>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_RBatteryPercentRemaining() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x41>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_LRecenterCount(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x42>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_LRecenterCount() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x42>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_RRecenterCount(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x43>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_RRecenterCount() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x43>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_LThumbRestForce(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x44>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_LThumbRestForce() const {
return ::cordl_internals::getInstanceField<float_t, 0x44>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_RThumbRestForce(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x48>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_RThumbRestForce() const {
return ::cordl_internals::getInstanceField<float_t, 0x48>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_LStylusForce(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_LStylusForce() const {
return ::cordl_internals::getInstanceField<float_t, 0x4c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_RStylusForce(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x50>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_RStylusForce() const {
return ::cordl_internals::getInstanceField<float_t, 0x50>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_LIndexTriggerCurl(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x54>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_LIndexTriggerCurl() const {
return ::cordl_internals::getInstanceField<float_t, 0x54>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_RIndexTriggerCurl(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x58>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_RIndexTriggerCurl() const {
return ::cordl_internals::getInstanceField<float_t, 0x58>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_LIndexTriggerSlide(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x5c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_LIndexTriggerSlide() const {
return ::cordl_internals::getInstanceField<float_t, 0x5c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__set_RIndexTriggerSlide(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x60>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::__get_RIndexTriggerSlide() const {
return ::cordl_internals::getInstanceField<float_t, 0x60>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5::_ctor(GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4 cs)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method, cs);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4._ctor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::*)(GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::_ctor)> {
  constexpr static std::size_t size = 0x6c;
  constexpr static std::size_t addrs = 0x2621988;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2>::get()}
                        )));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "ConnectedControllers", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Buttons", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Touches", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "NearTouches", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LIndexTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RIndexTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LHandTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RHandTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }, CppParam { name: "RThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }, CppParam { name: "LTouchpad", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }, CppParam { name: "RTouchpad", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }, CppParam { name: "LBatteryPercentRemaining", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RBatteryPercentRemaining", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LRecenterCount", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RRecenterCount", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_27", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_26", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_25", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_24", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_23", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_22", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_21", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_20", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_19", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_18", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_17", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_16", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_15", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_14", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_13", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_12", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_11", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_10", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_09", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_08", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_07", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_06", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_05", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_04", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_03", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_02", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_01", ty: "uint8_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Reserved_00", ty: "uint8_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::GlobalNamespace__OVRPlugin__ControllerState4(uint32_t ConnectedControllers, uint32_t Buttons, uint32_t Touches, uint32_t NearTouches, float_t LIndexTrigger, float_t RIndexTrigger, float_t LHandTrigger, float_t RHandTrigger, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f LThumbstick, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f RThumbstick, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f LTouchpad, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f RTouchpad, uint8_t LBatteryPercentRemaining, uint8_t RBatteryPercentRemaining, uint8_t LRecenterCount, uint8_t RRecenterCount, uint8_t Reserved_27, uint8_t Reserved_26, uint8_t Reserved_25, uint8_t Reserved_24, uint8_t Reserved_23, uint8_t Reserved_22, uint8_t Reserved_21, uint8_t Reserved_20, uint8_t Reserved_19, uint8_t Reserved_18, uint8_t Reserved_17, uint8_t Reserved_16, uint8_t Reserved_15, uint8_t Reserved_14, uint8_t Reserved_13, uint8_t Reserved_12, uint8_t Reserved_11, uint8_t Reserved_10, uint8_t Reserved_09, uint8_t Reserved_08, uint8_t Reserved_07, uint8_t Reserved_06, uint8_t Reserved_05, uint8_t Reserved_04, uint8_t Reserved_03, uint8_t Reserved_02, uint8_t Reserved_01, uint8_t Reserved_00) noexcept : ::bs_hook::ValueTypeWrapper() {this->ConnectedControllers = ConnectedControllers;
this->Buttons = Buttons;
this->Touches = Touches;
this->NearTouches = NearTouches;
this->LIndexTrigger = LIndexTrigger;
this->RIndexTrigger = RIndexTrigger;
this->LHandTrigger = LHandTrigger;
this->RHandTrigger = RHandTrigger;
this->LThumbstick = LThumbstick;
this->RThumbstick = RThumbstick;
this->LTouchpad = LTouchpad;
this->RTouchpad = RTouchpad;
this->LBatteryPercentRemaining = LBatteryPercentRemaining;
this->RBatteryPercentRemaining = RBatteryPercentRemaining;
this->LRecenterCount = LRecenterCount;
this->RRecenterCount = RRecenterCount;
this->Reserved_27 = Reserved_27;
this->Reserved_26 = Reserved_26;
this->Reserved_25 = Reserved_25;
this->Reserved_24 = Reserved_24;
this->Reserved_23 = Reserved_23;
this->Reserved_22 = Reserved_22;
this->Reserved_21 = Reserved_21;
this->Reserved_20 = Reserved_20;
this->Reserved_19 = Reserved_19;
this->Reserved_18 = Reserved_18;
this->Reserved_17 = Reserved_17;
this->Reserved_16 = Reserved_16;
this->Reserved_15 = Reserved_15;
this->Reserved_14 = Reserved_14;
this->Reserved_13 = Reserved_13;
this->Reserved_12 = Reserved_12;
this->Reserved_11 = Reserved_11;
this->Reserved_10 = Reserved_10;
this->Reserved_09 = Reserved_09;
this->Reserved_08 = Reserved_08;
this->Reserved_07 = Reserved_07;
this->Reserved_06 = Reserved_06;
this->Reserved_05 = Reserved_05;
this->Reserved_04 = Reserved_04;
this->Reserved_03 = Reserved_03;
this->Reserved_02 = Reserved_02;
this->Reserved_01 = Reserved_01;
this->Reserved_00 = Reserved_00;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_ConnectedControllers(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x0>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_ConnectedControllers() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Buttons(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x4>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Buttons() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Touches(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x8>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Touches() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_NearTouches(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0xc>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_NearTouches() const {
return ::cordl_internals::getInstanceField<uint32_t, 0xc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_LIndexTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x10>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_LIndexTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_RIndexTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x14>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_RIndexTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x14>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_LHandTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x18>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_LHandTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x18>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_RHandTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x1c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_RHandTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x1c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_LThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x20>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_LThumbstick() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_RThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x28>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_RThumbstick() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x28>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_LTouchpad(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x30>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_LTouchpad() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x30>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_RTouchpad(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x38>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_RTouchpad() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x38>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_LBatteryPercentRemaining(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x40>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_LBatteryPercentRemaining() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x40>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_RBatteryPercentRemaining(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x41>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_RBatteryPercentRemaining() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x41>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_LRecenterCount(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x42>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_LRecenterCount() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x42>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_RRecenterCount(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x43>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_RRecenterCount() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x43>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_27(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x44>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_27() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x44>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_26(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x45>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_26() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x45>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_25(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x46>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_25() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x46>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_24(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x47>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_24() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x47>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_23(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x48>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_23() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x48>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_22(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x49>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_22() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x49>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_21(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x4a>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_21() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x4a>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_20(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x4b>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_20() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x4b>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_19(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x4c>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_19() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x4c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_18(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x4d>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_18() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x4d>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_17(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x4e>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_17() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x4e>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_16(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x4f>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_16() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x4f>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_15(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x50>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_15() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x50>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_14(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x51>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_14() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x51>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_13(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x52>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_13() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x52>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_12(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x53>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_12() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x53>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_11(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x54>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_11() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x54>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_10(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x55>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_10() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x55>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_09(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x56>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_09() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x56>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_08(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x57>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_08() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x57>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_07(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x58>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_07() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x58>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_06(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x59>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_06() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x59>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_05(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x5a>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_05() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x5a>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_04(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x5b>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_04() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x5b>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_03(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x5c>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_03() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x5c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_02(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x5d>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_02() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x5d>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_01(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x5e>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_01() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x5e>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__set_Reserved_00(uint8_t value)  {
::cordl_internals::setInstanceField<uint8_t, 0x5f>(this->__instance, std::forward<uint8_t>(value));
}
constexpr uint8_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::__get_Reserved_00() const {
return ::cordl_internals::getInstanceField<uint8_t, 0x5f>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4::_ctor(GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2 cs)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method, cs);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2._ctor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::*)(GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::_ctor)> {
  constexpr static std::size_t size = 0x58;
  constexpr static std::size_t addrs = 0x26219f4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState>::get()}
                        )));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "ConnectedControllers", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Buttons", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Touches", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "NearTouches", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LIndexTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RIndexTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LHandTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RHandTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }, CppParam { name: "RThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }, CppParam { name: "LTouchpad", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }, CppParam { name: "RTouchpad", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::GlobalNamespace__OVRPlugin__ControllerState2(uint32_t ConnectedControllers, uint32_t Buttons, uint32_t Touches, uint32_t NearTouches, float_t LIndexTrigger, float_t RIndexTrigger, float_t LHandTrigger, float_t RHandTrigger, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f LThumbstick, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f RThumbstick, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f LTouchpad, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f RTouchpad) noexcept : ::bs_hook::ValueTypeWrapper() {this->ConnectedControllers = ConnectedControllers;
this->Buttons = Buttons;
this->Touches = Touches;
this->NearTouches = NearTouches;
this->LIndexTrigger = LIndexTrigger;
this->RIndexTrigger = RIndexTrigger;
this->LHandTrigger = LHandTrigger;
this->RHandTrigger = RHandTrigger;
this->LThumbstick = LThumbstick;
this->RThumbstick = RThumbstick;
this->LTouchpad = LTouchpad;
this->RTouchpad = RTouchpad;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__set_ConnectedControllers(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x0>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__get_ConnectedControllers() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__set_Buttons(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x4>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__get_Buttons() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__set_Touches(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x8>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__get_Touches() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__set_NearTouches(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0xc>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__get_NearTouches() const {
return ::cordl_internals::getInstanceField<uint32_t, 0xc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__set_LIndexTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x10>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__get_LIndexTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__set_RIndexTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x14>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__get_RIndexTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x14>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__set_LHandTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x18>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__get_LHandTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x18>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__set_RHandTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x1c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__get_RHandTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x1c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__set_LThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x20>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__get_LThumbstick() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__set_RThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x28>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__get_RThumbstick() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x28>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__set_LTouchpad(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x30>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__get_LTouchpad() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x30>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__set_RTouchpad(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x38>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::__get_RTouchpad() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x38>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2::_ctor(GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState cs)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method, cs);
}
// Ctor Parameters [CppParam { name: "ConnectedControllers", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Buttons", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Touches", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "NearTouches", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LIndexTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RIndexTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LHandTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RHandTrigger", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }, CppParam { name: "RThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::GlobalNamespace__OVRPlugin__ControllerState(uint32_t ConnectedControllers, uint32_t Buttons, uint32_t Touches, uint32_t NearTouches, float_t LIndexTrigger, float_t RIndexTrigger, float_t LHandTrigger, float_t RHandTrigger, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f LThumbstick, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f RThumbstick) noexcept : ::bs_hook::ValueTypeWrapper() {this->ConnectedControllers = ConnectedControllers;
this->Buttons = Buttons;
this->Touches = Touches;
this->NearTouches = NearTouches;
this->LIndexTrigger = LIndexTrigger;
this->RIndexTrigger = RIndexTrigger;
this->LHandTrigger = LHandTrigger;
this->RHandTrigger = RHandTrigger;
this->LThumbstick = LThumbstick;
this->RThumbstick = RThumbstick;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__set_ConnectedControllers(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x0>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__get_ConnectedControllers() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__set_Buttons(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x4>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__get_Buttons() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__set_Touches(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x8>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__get_Touches() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__set_NearTouches(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0xc>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__get_NearTouches() const {
return ::cordl_internals::getInstanceField<uint32_t, 0xc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__set_LIndexTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x10>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__get_LIndexTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__set_RIndexTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x14>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__get_RIndexTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x14>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__set_LHandTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x18>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__get_LHandTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x18>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__set_RHandTrigger(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x1c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__get_RHandTrigger() const {
return ::cordl_internals::getInstanceField<float_t, 0x1c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__set_LThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x20>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__get_LThumbstick() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__set_RThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x28>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState::__get_RThumbstick() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x28>(this->__instance);
}
// Ctor Parameters [CppParam { name: "Samples", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "SamplesCount", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer::GlobalNamespace__OVRPlugin__HapticsBuffer(::cordl_internals::intptr_t Samples, int32_t SamplesCount) noexcept : ::bs_hook::ValueTypeWrapper() {this->Samples = Samples;
this->SamplesCount = SamplesCount;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer::__set_Samples(::cordl_internals::intptr_t value)  {
::cordl_internals::setInstanceField<::cordl_internals::intptr_t, 0x0>(this->__instance, std::forward<::cordl_internals::intptr_t>(value));
}
constexpr ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer::__get_Samples() const {
return ::cordl_internals::getInstanceField<::cordl_internals::intptr_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer::__set_SamplesCount(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x8>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer::__get_SamplesCount() const {
return ::cordl_internals::getInstanceField<int32_t, 0x8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "SamplesAvailable", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "SamplesQueued", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState::GlobalNamespace__OVRPlugin__HapticsState(int32_t SamplesAvailable, int32_t SamplesQueued) noexcept : ::bs_hook::ValueTypeWrapper() {this->SamplesAvailable = SamplesAvailable;
this->SamplesQueued = SamplesQueued;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState::__set_SamplesAvailable(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState::__get_SamplesAvailable() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState::__set_SamplesQueued(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x4>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState::__get_SamplesQueued() const {
return ::cordl_internals::getInstanceField<int32_t, 0x4>(this->__instance);
}
// Ctor Parameters [CppParam { name: "SampleRateHz", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "SampleSizeInBytes", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "MinimumSafeSamplesQueued", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "MinimumBufferSamplesCount", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "OptimalBufferSamplesCount", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "MaximumBufferSamplesCount", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc::GlobalNamespace__OVRPlugin__HapticsDesc(int32_t SampleRateHz, int32_t SampleSizeInBytes, int32_t MinimumSafeSamplesQueued, int32_t MinimumBufferSamplesCount, int32_t OptimalBufferSamplesCount, int32_t MaximumBufferSamplesCount) noexcept : ::bs_hook::ValueTypeWrapper() {this->SampleRateHz = SampleRateHz;
this->SampleSizeInBytes = SampleSizeInBytes;
this->MinimumSafeSamplesQueued = MinimumSafeSamplesQueued;
this->MinimumBufferSamplesCount = MinimumBufferSamplesCount;
this->OptimalBufferSamplesCount = OptimalBufferSamplesCount;
this->MaximumBufferSamplesCount = MaximumBufferSamplesCount;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc::__set_SampleRateHz(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc::__get_SampleRateHz() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc::__set_SampleSizeInBytes(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x4>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc::__get_SampleSizeInBytes() const {
return ::cordl_internals::getInstanceField<int32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc::__set_MinimumSafeSamplesQueued(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x8>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc::__get_MinimumSafeSamplesQueued() const {
return ::cordl_internals::getInstanceField<int32_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc::__set_MinimumBufferSamplesCount(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0xc>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc::__get_MinimumBufferSamplesCount() const {
return ::cordl_internals::getInstanceField<int32_t, 0xc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc::__set_OptimalBufferSamplesCount(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x10>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc::__get_OptimalBufferSamplesCount() const {
return ::cordl_internals::getInstanceField<int32_t, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc::__set_MaximumBufferSamplesCount(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x14>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc::__get_MaximumBufferSamplesCount() const {
return ::cordl_internals::getInstanceField<int32_t, 0x14>(this->__instance);
}
// Ctor Parameters [CppParam { name: "Duration", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "AmplitudeCount", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Amplitudes", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration(float_t Duration, uint32_t AmplitudeCount, ::cordl_internals::intptr_t Amplitudes) noexcept : ::bs_hook::ValueTypeWrapper() {this->Duration = Duration;
this->AmplitudeCount = AmplitudeCount;
this->Amplitudes = Amplitudes;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration::__set_Duration(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration::__get_Duration() const {
return ::cordl_internals::getInstanceField<float_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration::__set_AmplitudeCount(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x4>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration::__get_AmplitudeCount() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration::__set_Amplitudes(::cordl_internals::intptr_t value)  {
::cordl_internals::setInstanceField<::cordl_internals::intptr_t, 0x8>(this->__instance, std::forward<::cordl_internals::intptr_t>(value));
}
constexpr ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration::__get_Amplitudes() const {
return ::cordl_internals::getInstanceField<::cordl_internals::intptr_t, 0x8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "BufferSize", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Buffer", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "SampleRateHz", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Append", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: Some("{}") }, CppParam { name: "SamplesConsumed", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration::GlobalNamespace__OVRPlugin__HapticsPcmVibration(uint32_t BufferSize, ::cordl_internals::intptr_t Buffer, float_t SampleRateHz, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool Append, ::cordl_internals::intptr_t SamplesConsumed) noexcept : ::bs_hook::ValueTypeWrapper() {this->BufferSize = BufferSize;
this->Buffer = Buffer;
this->SampleRateHz = SampleRateHz;
this->Append = Append;
this->SamplesConsumed = SamplesConsumed;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration::__set_BufferSize(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x0>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration::__get_BufferSize() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration::__set_Buffer(::cordl_internals::intptr_t value)  {
::cordl_internals::setInstanceField<::cordl_internals::intptr_t, 0x8>(this->__instance, std::forward<::cordl_internals::intptr_t>(value));
}
constexpr ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration::__get_Buffer() const {
return ::cordl_internals::getInstanceField<::cordl_internals::intptr_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration::__set_SampleRateHz(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x10>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration::__get_SampleRateHz() const {
return ::cordl_internals::getInstanceField<float_t, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration::__set_Append(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x14>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration::__get_Append() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x14>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration::__set_SamplesConsumed(::cordl_internals::intptr_t value)  {
::cordl_internals::setInstanceField<::cordl_internals::intptr_t, 0x18>(this->__instance, std::forward<::cordl_internals::intptr_t>(value));
}
constexpr ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration::__get_SamplesConsumed() const {
return ::cordl_internals::getInstanceField<::cordl_internals::intptr_t, 0x18>(this->__instance);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsConstants::GlobalNamespace__OVRPlugin__HapticsConstants(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsConstants::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsConstants::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsConstants  GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsConstants::MaxSamples{4000};
// Ctor Parameters [CppParam { name: "HmdVsyncIndex", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "AppFrameIndex", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "AppDroppedFrameCount", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "AppMotionToPhotonLatency", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "AppQueueAheadTime", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "AppCpuElapsedTime", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "AppGpuElapsedTime", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "CompositorFrameIndex", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "CompositorDroppedFrameCount", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "CompositorLatency", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "CompositorCpuElapsedTime", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "CompositorGpuElapsedTime", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "CompositorCpuStartToGpuEndElapsedTime", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "CompositorGpuEndToVsyncElapsedTime", ty: "float_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::GlobalNamespace__OVRPlugin__AppPerfFrameStats(int32_t HmdVsyncIndex, int32_t AppFrameIndex, int32_t AppDroppedFrameCount, float_t AppMotionToPhotonLatency, float_t AppQueueAheadTime, float_t AppCpuElapsedTime, float_t AppGpuElapsedTime, int32_t CompositorFrameIndex, int32_t CompositorDroppedFrameCount, float_t CompositorLatency, float_t CompositorCpuElapsedTime, float_t CompositorGpuElapsedTime, float_t CompositorCpuStartToGpuEndElapsedTime, float_t CompositorGpuEndToVsyncElapsedTime) noexcept : ::bs_hook::ValueTypeWrapper() {this->HmdVsyncIndex = HmdVsyncIndex;
this->AppFrameIndex = AppFrameIndex;
this->AppDroppedFrameCount = AppDroppedFrameCount;
this->AppMotionToPhotonLatency = AppMotionToPhotonLatency;
this->AppQueueAheadTime = AppQueueAheadTime;
this->AppCpuElapsedTime = AppCpuElapsedTime;
this->AppGpuElapsedTime = AppGpuElapsedTime;
this->CompositorFrameIndex = CompositorFrameIndex;
this->CompositorDroppedFrameCount = CompositorDroppedFrameCount;
this->CompositorLatency = CompositorLatency;
this->CompositorCpuElapsedTime = CompositorCpuElapsedTime;
this->CompositorGpuElapsedTime = CompositorGpuElapsedTime;
this->CompositorCpuStartToGpuEndElapsedTime = CompositorCpuStartToGpuEndElapsedTime;
this->CompositorGpuEndToVsyncElapsedTime = CompositorGpuEndToVsyncElapsedTime;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__set_HmdVsyncIndex(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__get_HmdVsyncIndex() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__set_AppFrameIndex(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x4>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__get_AppFrameIndex() const {
return ::cordl_internals::getInstanceField<int32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__set_AppDroppedFrameCount(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x8>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__get_AppDroppedFrameCount() const {
return ::cordl_internals::getInstanceField<int32_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__set_AppMotionToPhotonLatency(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xc>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__get_AppMotionToPhotonLatency() const {
return ::cordl_internals::getInstanceField<float_t, 0xc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__set_AppQueueAheadTime(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x10>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__get_AppQueueAheadTime() const {
return ::cordl_internals::getInstanceField<float_t, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__set_AppCpuElapsedTime(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x14>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__get_AppCpuElapsedTime() const {
return ::cordl_internals::getInstanceField<float_t, 0x14>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__set_AppGpuElapsedTime(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x18>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__get_AppGpuElapsedTime() const {
return ::cordl_internals::getInstanceField<float_t, 0x18>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__set_CompositorFrameIndex(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x1c>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__get_CompositorFrameIndex() const {
return ::cordl_internals::getInstanceField<int32_t, 0x1c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__set_CompositorDroppedFrameCount(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x20>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__get_CompositorDroppedFrameCount() const {
return ::cordl_internals::getInstanceField<int32_t, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__set_CompositorLatency(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x24>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__get_CompositorLatency() const {
return ::cordl_internals::getInstanceField<float_t, 0x24>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__set_CompositorCpuElapsedTime(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x28>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__get_CompositorCpuElapsedTime() const {
return ::cordl_internals::getInstanceField<float_t, 0x28>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__set_CompositorGpuElapsedTime(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x2c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__get_CompositorGpuElapsedTime() const {
return ::cordl_internals::getInstanceField<float_t, 0x2c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__set_CompositorCpuStartToGpuEndElapsedTime(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x30>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__get_CompositorCpuStartToGpuEndElapsedTime() const {
return ::cordl_internals::getInstanceField<float_t, 0x30>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__set_CompositorGpuEndToVsyncElapsedTime(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x34>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats::__get_CompositorGpuEndToVsyncElapsedTime() const {
return ::cordl_internals::getInstanceField<float_t, 0x34>(this->__instance);
}
// Ctor Parameters [CppParam { name: "FrameStats", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "FrameStatsCount", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "AnyFrameStatsDropped", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: Some("{}") }, CppParam { name: "AdaptiveGpuPerformanceScale", ty: "float_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats::GlobalNamespace__OVRPlugin__AppPerfStats(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats> FrameStats, int32_t FrameStatsCount, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool AnyFrameStatsDropped, float_t AdaptiveGpuPerformanceScale) noexcept : ::bs_hook::ValueTypeWrapper() {this->FrameStats = FrameStats;
this->FrameStatsCount = FrameStatsCount;
this->AnyFrameStatsDropped = AnyFrameStatsDropped;
this->AdaptiveGpuPerformanceScale = AdaptiveGpuPerformanceScale;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats::__set_FrameStats(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats>, 0x0>(this->__instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats> GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats::__get_FrameStats() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats>, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats::__set_FrameStatsCount(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x8>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats::__get_FrameStatsCount() const {
return ::cordl_internals::getInstanceField<int32_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats::__set_AnyFrameStatsDropped(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0xc>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats::__get_AnyFrameStatsDropped() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0xc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats::__set_AdaptiveGpuPerformanceScale(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x10>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats::__get_AdaptiveGpuPerformanceScale() const {
return ::cordl_internals::getInstanceField<float_t, 0x10>(this->__instance);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei.Equals
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::Equals)> {
  constexpr static std::size_t size = 0x28;
  constexpr static std::size_t addrs = 0x2621a4c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>::get(),
                            "Equals",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei.Equals
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::*)(::bs_hook::Il2CppWrapperType)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::Equals)> {
  constexpr static std::size_t size = 0x88;
  constexpr static std::size_t addrs = 0x2621a74;

  inline static const ::MethodInfo* methodInfo() {
    
                            static auto* ___internal_method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(
                                classof(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei),
                                 ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>::get(),
                                  0
                                ));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei.GetHashCode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int32_t (GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::GetHashCode)> {
  constexpr static std::size_t size = 0x14;
  constexpr static std::size_t addrs = 0x2621afc;

  inline static const ::MethodInfo* methodInfo() {
    
                            static auto* ___internal_method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(
                                classof(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei),
                                 ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>::get(),
                                  2
                                ));
    return ___internal_method;
  }
};
/// @brief Convert operator to System::IEquatable_1<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>
constexpr  GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::operator System::IEquatable_1<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>() const {
return System::IEquatable_1<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>(::cordl_internals::Box(this).convert());
}
// Ctor Parameters [CppParam { name: "w", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "h", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::GlobalNamespace__OVRPlugin__Sizei(int32_t w, int32_t h) noexcept : ::bs_hook::ValueTypeWrapper() {this->w = w;
this->h = h;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::__set_w(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::__get_w() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::__set_h(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x4>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::__get_h() const {
return ::cordl_internals::getInstanceField<int32_t, 0x4>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::__set_zero(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, "zero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::__get_zero()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, "zero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>::get>();
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::Equals(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei other)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>::get(),
                            "Equals",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method, other);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::Equals(::bs_hook::Il2CppWrapperType obj)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>::get(),
                            "Equals",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::bs_hook::Il2CppWrapperType>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method, obj);
}
 int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei::GetHashCode()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>::get(),
                            "GetHashCode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<int32_t, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
// Ctor Parameters [CppParam { name: "w", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "h", ty: "float_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef::GlobalNamespace__OVRPlugin__Sizef(float_t w, float_t h) noexcept : ::bs_hook::ValueTypeWrapper() {this->w = w;
this->h = h;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef::__set_w(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef::__get_w() const {
return ::cordl_internals::getInstanceField<float_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef::__set_h(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef::__get_h() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef::__set_zero(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef, "zero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef::__get_zero()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef, "zero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef>::get>();
}
// Ctor Parameters [CppParam { name: "w", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "h", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "d", ty: "float_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f::GlobalNamespace__OVRPlugin__Size3f(float_t w, float_t h, float_t d) noexcept : ::bs_hook::ValueTypeWrapper() {this->w = w;
this->h = h;
this->d = d;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f::__set_w(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f::__get_w() const {
return ::cordl_internals::getInstanceField<float_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f::__set_h(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f::__get_h() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f::__set_d(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f::__get_d() const {
return ::cordl_internals::getInstanceField<float_t, 0x8>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f::__set_zero(GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f, "zero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f::__get_zero()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f, "zero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f>::get>();
}
// Ctor Parameters [CppParam { name: "x", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "y", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i::GlobalNamespace__OVRPlugin__Vector2i(int32_t x, int32_t y) noexcept : ::bs_hook::ValueTypeWrapper() {this->x = x;
this->y = y;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i::__set_x(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i::__get_x() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i::__set_y(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x4>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i::__get_y() const {
return ::cordl_internals::getInstanceField<int32_t, 0x4>(this->__instance);
}
// Ctor Parameters [CppParam { name: "Pos", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i", modifiers: "", def_value: Some("{}") }, CppParam { name: "Size", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Recti::GlobalNamespace__OVRPlugin__Recti(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i Pos, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei Size) noexcept : ::bs_hook::ValueTypeWrapper() {this->Pos = Pos;
this->Size = Size;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Recti::__set_Pos(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i GlobalNamespace::GlobalNamespace__OVRPlugin__Recti::__get_Pos() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Recti::__set_Size(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei GlobalNamespace::GlobalNamespace__OVRPlugin__Recti::__get_Size() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "Pos", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: Some("{}") }, CppParam { name: "Size", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf::GlobalNamespace__OVRPlugin__Rectf(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f Pos, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef Size) noexcept : ::bs_hook::ValueTypeWrapper() {this->Pos = Pos;
this->Size = Size;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf::__set_Pos(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf::__get_Pos() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf::__set_Size(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef, 0x8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf::__get_Size() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef, 0x8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "Pos", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: Some("{}") }, CppParam { name: "Size", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf::GlobalNamespace__OVRPlugin__Boundsf(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f Pos, GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f Size) noexcept : ::bs_hook::ValueTypeWrapper() {this->Pos = Pos;
this->Size = Size;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf::__set_Pos(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf::__get_Pos() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf::__set_Size(GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f, 0xc>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf::__get_Size() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f, 0xc>(this->__instance);
}
// Ctor Parameters [CppParam { name: "zNear", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "zFar", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "fovX", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "fovY", ty: "float_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf::GlobalNamespace__OVRPlugin__Frustumf(float_t zNear, float_t zFar, float_t fovX, float_t fovY) noexcept : ::bs_hook::ValueTypeWrapper() {this->zNear = zNear;
this->zFar = zFar;
this->fovX = fovX;
this->fovY = fovY;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf::__set_zNear(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf::__get_zNear() const {
return ::cordl_internals::getInstanceField<float_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf::__set_zFar(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf::__get_zFar() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf::__set_fovX(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf::__get_fovX() const {
return ::cordl_internals::getInstanceField<float_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf::__set_fovY(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xc>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf::__get_fovY() const {
return ::cordl_internals::getInstanceField<float_t, 0xc>(this->__instance);
}
// Ctor Parameters [CppParam { name: "zNear", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "zFar", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Fov", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2::GlobalNamespace__OVRPlugin__Frustumf2(float_t zNear, float_t zFar, GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf Fov) noexcept : ::bs_hook::ValueTypeWrapper() {this->zNear = zNear;
this->zFar = zFar;
this->Fov = Fov;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2::__set_zNear(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2::__get_zNear() const {
return ::cordl_internals::getInstanceField<float_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2::__set_zFar(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2::__get_zFar() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2::__set_Fov(GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf, 0x8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2::__get_Fov() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf, 0x8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType::GlobalNamespace__OVRPlugin__BoundaryType(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType  GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType::OuterBoundary{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType  GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType::PlayArea{256};
// Ctor Parameters [CppParam { name: "IsTriggering", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: Some("{}") }, CppParam { name: "ClosestDistance", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ClosestPoint", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: Some("{}") }, CppParam { name: "ClosestPointNormal", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult::GlobalNamespace__OVRPlugin__BoundaryTestResult(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool IsTriggering, float_t ClosestDistance, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f ClosestPoint, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f ClosestPointNormal) noexcept : ::bs_hook::ValueTypeWrapper() {this->IsTriggering = IsTriggering;
this->ClosestDistance = ClosestDistance;
this->ClosestPoint = ClosestPoint;
this->ClosestPointNormal = ClosestPointNormal;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult::__set_IsTriggering(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult::__get_IsTriggering() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult::__set_ClosestDistance(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult::__get_ClosestDistance() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult::__set_ClosestPoint(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult::__get_ClosestPoint() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult::__set_ClosestPointNormal(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x14>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult::__get_ClosestPointNormal() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x14>(this->__instance);
}
// Ctor Parameters [CppParam { name: "BoundaryType", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType", modifiers: "", def_value: Some("{}") }, CppParam { name: "Points", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "PointsCount", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry::GlobalNamespace__OVRPlugin__BoundaryGeometry(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType BoundaryType, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> Points, int32_t PointsCount) noexcept : ::bs_hook::ValueTypeWrapper() {this->BoundaryType = BoundaryType;
this->Points = Points;
this->PointsCount = PointsCount;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry::__set_BoundaryType(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry::__get_BoundaryType() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry::__set_Points(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>, 0x8>(this->__instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry::__get_Points() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry::__set_PointsCount(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x10>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry::__get_PointsCount() const {
return ::cordl_internals::getInstanceField<int32_t, 0x10>(this->__instance);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf.ToString
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf::ToString)> {
  constexpr static std::size_t size = 0x1e4;
  constexpr static std::size_t addrs = 0x2621bec;

  inline static const ::MethodInfo* methodInfo() {
    
                            static auto* ___internal_method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(
                                classof(GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf),
                                 ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf>::get(),
                                  3
                                ));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "r", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "g", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "b", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "a", ty: "float_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf::GlobalNamespace__OVRPlugin__Colorf(float_t r, float_t g, float_t b, float_t a) noexcept : ::bs_hook::ValueTypeWrapper() {this->r = r;
this->g = g;
this->b = b;
this->a = a;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf::__set_r(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf::__get_r() const {
return ::cordl_internals::getInstanceField<float_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf::__set_g(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf::__get_g() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf::__set_b(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf::__get_b() const {
return ::cordl_internals::getInstanceField<float_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf::__set_a(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xc>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf::__get_a() const {
return ::cordl_internals::getInstanceField<float_t, 0xc>(this->__instance);
}
 ::StringW GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf::ToString()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf>::get(),
                            "ToString",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
// Ctor Parameters [CppParam { name: "UpTan", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "DownTan", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "LeftTan", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RightTan", ty: "float_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf::GlobalNamespace__OVRPlugin__Fovf(float_t UpTan, float_t DownTan, float_t LeftTan, float_t RightTan) noexcept : ::bs_hook::ValueTypeWrapper() {this->UpTan = UpTan;
this->DownTan = DownTan;
this->LeftTan = LeftTan;
this->RightTan = RightTan;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf::__set_UpTan(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf::__get_UpTan() const {
return ::cordl_internals::getInstanceField<float_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf::__set_DownTan(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf::__get_DownTan() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf::__set_LeftTan(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf::__get_LeftTan() const {
return ::cordl_internals::getInstanceField<float_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf::__set_RightTan(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xc>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf::__get_RightTan() const {
return ::cordl_internals::getInstanceField<float_t, 0xc>(this->__instance);
}
// Ctor Parameters [CppParam { name: "IsValid", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: Some("{}") }, CppParam { name: "LastChangedTimeSeconds", ty: "double_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "FOVPort", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf", modifiers: "", def_value: Some("{}") }, CppParam { name: "VirtualNearPlaneDistanceMeters", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "VirtualFarPlaneDistanceMeters", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ImageSensorPixelResolution", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics::GlobalNamespace__OVRPlugin__CameraIntrinsics(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool IsValid, double_t LastChangedTimeSeconds, GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf FOVPort, float_t VirtualNearPlaneDistanceMeters, float_t VirtualFarPlaneDistanceMeters, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei ImageSensorPixelResolution) noexcept : ::bs_hook::ValueTypeWrapper() {this->IsValid = IsValid;
this->LastChangedTimeSeconds = LastChangedTimeSeconds;
this->FOVPort = FOVPort;
this->VirtualNearPlaneDistanceMeters = VirtualNearPlaneDistanceMeters;
this->VirtualFarPlaneDistanceMeters = VirtualFarPlaneDistanceMeters;
this->ImageSensorPixelResolution = ImageSensorPixelResolution;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics::__set_IsValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics::__get_IsValid() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics::__set_LastChangedTimeSeconds(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x8>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics::__get_LastChangedTimeSeconds() const {
return ::cordl_internals::getInstanceField<double_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics::__set_FOVPort(GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf, 0x10>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics::__get_FOVPort() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics::__set_VirtualNearPlaneDistanceMeters(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x20>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics::__get_VirtualNearPlaneDistanceMeters() const {
return ::cordl_internals::getInstanceField<float_t, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics::__set_VirtualFarPlaneDistanceMeters(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x24>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics::__get_VirtualFarPlaneDistanceMeters() const {
return ::cordl_internals::getInstanceField<float_t, 0x24>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics::__set_ImageSensorPixelResolution(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x28>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics::__get_ImageSensorPixelResolution() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x28>(this->__instance);
}
// Ctor Parameters [CppParam { name: "IsValid", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: Some("{}") }, CppParam { name: "LastChangedTimeSeconds", ty: "double_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "CameraStatusData", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus", modifiers: "", def_value: Some("{}") }, CppParam { name: "AttachedToNode", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Node", modifiers: "", def_value: Some("{}") }, CppParam { name: "RelativePose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics::GlobalNamespace__OVRPlugin__CameraExtrinsics(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool IsValid, double_t LastChangedTimeSeconds, GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus CameraStatusData, GlobalNamespace::GlobalNamespace__OVRPlugin__Node AttachedToNode, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef RelativePose) noexcept : ::bs_hook::ValueTypeWrapper() {this->IsValid = IsValid;
this->LastChangedTimeSeconds = LastChangedTimeSeconds;
this->CameraStatusData = CameraStatusData;
this->AttachedToNode = AttachedToNode;
this->RelativePose = RelativePose;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics::__set_IsValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics::__get_IsValid() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics::__set_LastChangedTimeSeconds(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x8>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics::__get_LastChangedTimeSeconds() const {
return ::cordl_internals::getInstanceField<double_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics::__set_CameraStatusData(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus, 0x10>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics::__get_CameraStatusData() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics::__set_AttachedToNode(GlobalNamespace::GlobalNamespace__OVRPlugin__Node value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Node, 0x14>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics::__get_AttachedToNode() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Node, 0x14>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics::__set_RelativePose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x18>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics::__get_RelativePose() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x18>(this->__instance);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout::GlobalNamespace__OVRPlugin__LayerLayout(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout  GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout::Stereo{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout  GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout::Mono{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout  GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout::DoubleWide{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout  GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout::Array{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout  GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout::EnumSize{15};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags::GlobalNamespace__OVRPlugin__LayerFlags(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags::Static{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags::LoadingScreen{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags::SymmetricFov{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags::TextureOriginAtBottomLeft{8};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags::ChromaticAberrationCorrection{16};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags::NoAllocation{32};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags::ProtectedContent{64};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags::AndroidSurfaceSwapChain{128};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags::BicubicFiltering{16384};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc.ToString
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::ToString)> {
  constexpr static std::size_t size = 0x400;
  constexpr static std::size_t addrs = 0x2621dd0;

  inline static const ::MethodInfo* methodInfo() {
    
                            static auto* ___internal_method = THROW_UNLESS(::il2cpp_utils::ResolveVtableSlot(
                                classof(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc),
                                 ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc>::get(),
                                  3
                                ));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "Shape", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape", modifiers: "", def_value: Some("{}") }, CppParam { name: "Layout", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout", modifiers: "", def_value: Some("{}") }, CppParam { name: "TextureSize", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: Some("{}") }, CppParam { name: "MipLevels", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "SampleCount", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Format", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: Some("{}") }, CppParam { name: "LayerFlags", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Fov", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "VisibleRect", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "MaxViewportSize", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: Some("{}") }, CppParam { name: "DepthFormat", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: Some("{}") }, CppParam { name: "MotionVectorFormat", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: Some("{}") }, CppParam { name: "MotionVectorDepthFormat", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: Some("{}") }, CppParam { name: "MotionVectorTextureSize", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::GlobalNamespace__OVRPlugin__LayerDesc(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape Shape, GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout Layout, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei TextureSize, int32_t MipLevels, int32_t SampleCount, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat Format, int32_t LayerFlags, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf> Fov, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf> VisibleRect, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei MaxViewportSize, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat DepthFormat, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat MotionVectorFormat, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat MotionVectorDepthFormat, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei MotionVectorTextureSize) noexcept : ::bs_hook::ValueTypeWrapper() {this->Shape = Shape;
this->Layout = Layout;
this->TextureSize = TextureSize;
this->MipLevels = MipLevels;
this->SampleCount = SampleCount;
this->Format = Format;
this->LayerFlags = LayerFlags;
this->Fov = Fov;
this->VisibleRect = VisibleRect;
this->MaxViewportSize = MaxViewportSize;
this->DepthFormat = DepthFormat;
this->MotionVectorFormat = MotionVectorFormat;
this->MotionVectorDepthFormat = MotionVectorDepthFormat;
this->MotionVectorTextureSize = MotionVectorTextureSize;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__set_Shape(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__get_Shape() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__set_Layout(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout, 0x4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__get_Layout() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__set_TextureSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__get_TextureSize() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__set_MipLevels(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x10>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__get_MipLevels() const {
return ::cordl_internals::getInstanceField<int32_t, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__set_SampleCount(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x14>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__get_SampleCount() const {
return ::cordl_internals::getInstanceField<int32_t, 0x14>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__set_Format(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x18>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__get_Format() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x18>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__set_LayerFlags(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x1c>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__get_LayerFlags() const {
return ::cordl_internals::getInstanceField<int32_t, 0x1c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__set_Fov(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf>, 0x20>(this->__instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf> GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__get_Fov() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf>, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__set_VisibleRect(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf>, 0x28>(this->__instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf> GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__get_VisibleRect() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf>, 0x28>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__set_MaxViewportSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x30>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__get_MaxViewportSize() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x30>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__set_DepthFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x38>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__get_DepthFormat() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x38>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__set_MotionVectorFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x3c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__get_MotionVectorFormat() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x3c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__set_MotionVectorDepthFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x40>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__get_MotionVectorDepthFormat() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x40>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__set_MotionVectorTextureSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x44>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::__get_MotionVectorTextureSize() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x44>(this->__instance);
}
 ::StringW GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc::ToString()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc>::get(),
                            "ToString",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal._ctor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::*)(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::_ctor)> {
  constexpr static std::size_t size = 0xdc;
  constexpr static std::size_t addrs = 0x26221d0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal.ToLayerDesc
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc (GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::ToLayerDesc)> {
  constexpr static std::size_t size = 0x150;
  constexpr static std::size_t addrs = 0x26222ac;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal>::get(),
                            "ToLayerDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "Shape", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape", modifiers: "", def_value: Some("{}") }, CppParam { name: "Layout", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout", modifiers: "", def_value: Some("{}") }, CppParam { name: "TextureSize", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: Some("{}") }, CppParam { name: "MipLevels", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "SampleCount", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Format", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: Some("{}") }, CppParam { name: "LayerFlags", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Fov0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf", modifiers: "", def_value: Some("{}") }, CppParam { name: "Fov1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf", modifiers: "", def_value: Some("{}") }, CppParam { name: "VisibleRect0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf", modifiers: "", def_value: Some("{}") }, CppParam { name: "VisibleRect1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf", modifiers: "", def_value: Some("{}") }, CppParam { name: "MaxViewportSize", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: Some("{}") }, CppParam { name: "DepthFormat", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: Some("{}") }, CppParam { name: "MotionVectorFormat", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: Some("{}") }, CppParam { name: "MotionVectorDepthFormat", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: Some("{}") }, CppParam { name: "MotionVectorTextureSize", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::GlobalNamespace__OVRPlugin__LayerDescInternal(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape Shape, GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout Layout, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei TextureSize, int32_t MipLevels, int32_t SampleCount, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat Format, int32_t LayerFlags, GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf Fov0, GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf Fov1, GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf VisibleRect0, GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf VisibleRect1, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei MaxViewportSize, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat DepthFormat, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat MotionVectorFormat, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat MotionVectorDepthFormat, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei MotionVectorTextureSize) noexcept : ::bs_hook::ValueTypeWrapper() {this->Shape = Shape;
this->Layout = Layout;
this->TextureSize = TextureSize;
this->MipLevels = MipLevels;
this->SampleCount = SampleCount;
this->Format = Format;
this->LayerFlags = LayerFlags;
this->Fov0 = Fov0;
this->Fov1 = Fov1;
this->VisibleRect0 = VisibleRect0;
this->VisibleRect1 = VisibleRect1;
this->MaxViewportSize = MaxViewportSize;
this->DepthFormat = DepthFormat;
this->MotionVectorFormat = MotionVectorFormat;
this->MotionVectorDepthFormat = MotionVectorDepthFormat;
this->MotionVectorTextureSize = MotionVectorTextureSize;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_Shape(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_Shape() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_Layout(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout, 0x4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_Layout() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_TextureSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_TextureSize() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_MipLevels(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x10>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_MipLevels() const {
return ::cordl_internals::getInstanceField<int32_t, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_SampleCount(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x14>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_SampleCount() const {
return ::cordl_internals::getInstanceField<int32_t, 0x14>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_Format(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x18>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_Format() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x18>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_LayerFlags(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x1c>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_LayerFlags() const {
return ::cordl_internals::getInstanceField<int32_t, 0x1c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_Fov0(GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf, 0x20>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_Fov0() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_Fov1(GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf, 0x30>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_Fov1() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf, 0x30>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_VisibleRect0(GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf, 0x40>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_VisibleRect0() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf, 0x40>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_VisibleRect1(GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf, 0x50>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_VisibleRect1() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf, 0x50>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_MaxViewportSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x60>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_MaxViewportSize() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x60>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_DepthFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x68>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_DepthFormat() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x68>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_MotionVectorFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x6c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_MotionVectorFormat() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x6c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_MotionVectorDepthFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x70>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_MotionVectorDepthFormat() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, 0x70>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__set_MotionVectorTextureSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x74>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::__get_MotionVectorTextureSize() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, 0x74>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::_ctor(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc layerDesc)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method, layerDesc);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal::ToLayerDesc()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal>::get(),
                            "ToLayerDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor::GlobalNamespace__OVRPlugin__BlendFactor(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor  GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor::Zero{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor  GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor::One{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor  GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor::SrcAlpha{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor  GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor::OneMinusSrcAlpha{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor  GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor::DstAlpha{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor  GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor::OneMinusDstAlpha{5};
// Ctor Parameters [CppParam { name: "LayerId", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "TextureStage", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ViewportRect", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Recti>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "Pose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: Some("{}") }, CppParam { name: "LayerSubmitFlags", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerSubmit::GlobalNamespace__OVRPlugin__LayerSubmit(int32_t LayerId, int32_t TextureStage, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Recti> ViewportRect, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef Pose, int32_t LayerSubmitFlags) noexcept : ::bs_hook::ValueTypeWrapper() {this->LayerId = LayerId;
this->TextureStage = TextureStage;
this->ViewportRect = ViewportRect;
this->Pose = Pose;
this->LayerSubmitFlags = LayerSubmitFlags;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerSubmit::__set_LayerId(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__LayerSubmit::__get_LayerId() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerSubmit::__set_TextureStage(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x4>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__LayerSubmit::__get_TextureStage() const {
return ::cordl_internals::getInstanceField<int32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerSubmit::__set_ViewportRect(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Recti> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Recti>, 0x8>(this->__instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Recti>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Recti> GlobalNamespace::GlobalNamespace__OVRPlugin__LayerSubmit::__get_ViewportRect() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Recti>, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerSubmit::__set_Pose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x10>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__LayerSubmit::__get_Pose() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__LayerSubmit::__set_LayerSubmitFlags(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x2c>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__LayerSubmit::__get_LayerSubmitFlags() const {
return ::cordl_internals::getInstanceField<int32_t, 0x2c>(this->__instance);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence::GlobalNamespace__OVRPlugin__TrackingConfidence(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence::Low{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence::High{1065353216};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Hand::GlobalNamespace__OVRPlugin__Hand(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Hand::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Hand::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Hand  GlobalNamespace::GlobalNamespace__OVRPlugin__Hand::None{-1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Hand  GlobalNamespace::GlobalNamespace__OVRPlugin__Hand::HandLeft{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Hand  GlobalNamespace::GlobalNamespace__OVRPlugin__Hand::HandRight{1};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus::GlobalNamespace__OVRPlugin__HandStatus(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus::HandTracked{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus::InputStateValid{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus::SystemGestureInProgress{64};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus::DominantHand{128};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus  GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus::MenuPressed{256};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::GlobalNamespace__OVRPlugin__BoneId(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Invalid{-1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Start{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_WristRoot{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_ForearmStub{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Thumb0{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Thumb1{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Thumb2{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Thumb3{5};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Index1{6};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Index2{7};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Index3{8};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Middle1{9};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Middle2{10};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Middle3{11};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Ring1{12};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Ring2{13};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Ring3{14};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Pinky0{15};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Pinky1{16};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Pinky2{17};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_Pinky3{18};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_MaxSkinnable{19};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_ThumbTip{19};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_IndexTip{20};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_MiddleTip{21};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_RingTip{22};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_PinkyTip{23};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Hand_End{24};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_Start{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_Root{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_Hips{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_SpineLower{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_SpineMiddle{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_SpineUpper{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_Chest{5};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_Neck{6};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_Head{7};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftShoulder{8};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftScapula{9};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftArmUpper{10};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftArmLower{11};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandWristTwist{12};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightShoulder{13};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightScapula{14};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightArmUpper{15};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightArmLower{16};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandWristTwist{17};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandPalm{18};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandWrist{19};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandThumbMetacarpal{20};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandThumbProximal{21};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandThumbDistal{22};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandThumbTip{23};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandIndexMetacarpal{24};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandIndexProximal{25};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandIndexIntermediate{26};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandIndexDistal{27};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandIndexTip{28};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandMiddleMetacarpal{29};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandMiddleProximal{30};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandMiddleIntermediate{31};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandMiddleDistal{32};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandMiddleTip{33};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandRingMetacarpal{34};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandRingProximal{35};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandRingIntermediate{36};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandRingDistal{37};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandRingTip{38};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandLittleMetacarpal{39};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandLittleProximal{40};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandLittleIntermediate{41};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandLittleDistal{42};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_LeftHandLittleTip{43};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandPalm{44};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandWrist{45};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandThumbMetacarpal{46};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandThumbProximal{47};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandThumbDistal{48};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandThumbTip{49};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandIndexMetacarpal{50};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandIndexProximal{51};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandIndexIntermediate{52};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandIndexDistal{53};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandIndexTip{54};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandMiddleMetacarpal{55};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandMiddleProximal{56};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandMiddleIntermediate{57};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandMiddleDistal{58};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandMiddleTip{59};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandRingMetacarpal{60};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandRingProximal{61};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandRingIntermediate{62};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandRingDistal{63};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandRingTip{64};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandLittleMetacarpal{65};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandLittleProximal{66};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandLittleIntermediate{67};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandLittleDistal{68};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_RightHandLittleTip{69};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Body_End{70};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId  GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId::Max{70};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger::GlobalNamespace__OVRPlugin__HandFinger(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger  GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger::Thumb{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger  GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger::Index{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger  GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger::Middle{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger  GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger::Ring{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger  GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger::Pinky{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger  GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger::Max{5};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch::GlobalNamespace__OVRPlugin__HandFingerPinch(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch  GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch::Thumb{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch  GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch::Index{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch  GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch::Middle{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch  GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch::Ring{8};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch  GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch::Pinky{16};
// Ctor Parameters [CppParam { name: "Status", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus", modifiers: "", def_value: Some("{}") }, CppParam { name: "RootPose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "Pinches", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch", modifiers: "", def_value: Some("{}") }, CppParam { name: "PinchStrength", ty: "::ArrayW<float_t>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "PointerPose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: Some("{}") }, CppParam { name: "HandScale", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "HandConfidence", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence", modifiers: "", def_value: Some("{}") }, CppParam { name: "FingerConfidences", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "RequestedTimeStamp", ty: "double_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "SampleTimeStamp", ty: "double_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::GlobalNamespace__OVRPlugin__HandState(GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus Status, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef RootPose, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> BoneRotations, GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch Pinches, ::ArrayW<float_t> PinchStrength, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef PointerPose, float_t HandScale, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence HandConfidence, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence> FingerConfidences, double_t RequestedTimeStamp, double_t SampleTimeStamp) noexcept : ::bs_hook::ValueTypeWrapper() {this->Status = Status;
this->RootPose = RootPose;
this->BoneRotations = BoneRotations;
this->Pinches = Pinches;
this->PinchStrength = PinchStrength;
this->PointerPose = PointerPose;
this->HandScale = HandScale;
this->HandConfidence = HandConfidence;
this->FingerConfidences = FingerConfidences;
this->RequestedTimeStamp = RequestedTimeStamp;
this->SampleTimeStamp = SampleTimeStamp;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__set_Status(GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__get_Status() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__set_RootPose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__get_RootPose() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__set_BoneRotations(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>, 0x20>(this->__instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__get_BoneRotations() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__set_Pinches(GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch, 0x28>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__get_Pinches() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch, 0x28>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__set_PinchStrength(::ArrayW<float_t> value)  {
::cordl_internals::setInstanceField<::ArrayW<float_t>, 0x30>(this->__instance, std::forward<::ArrayW<float_t>>(value));
}
constexpr ::ArrayW<float_t> GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__get_PinchStrength() const {
return ::cordl_internals::getInstanceField<::ArrayW<float_t>, 0x30>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__set_PointerPose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x38>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__get_PointerPose() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x38>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__set_HandScale(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x54>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__get_HandScale() const {
return ::cordl_internals::getInstanceField<float_t, 0x54>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__set_HandConfidence(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, 0x58>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__get_HandConfidence() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, 0x58>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__set_FingerConfidences(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence>, 0x60>(this->__instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence> GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__get_FingerConfidences() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence>, 0x60>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__set_RequestedTimeStamp(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x68>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__get_RequestedTimeStamp() const {
return ::cordl_internals::getInstanceField<double_t, 0x68>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__set_SampleTimeStamp(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x70>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__HandState::__get_SampleTimeStamp() const {
return ::cordl_internals::getInstanceField<double_t, 0x70>(this->__instance);
}
// Ctor Parameters [CppParam { name: "Status", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus", modifiers: "", def_value: Some("{}") }, CppParam { name: "RootPose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_2", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_3", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_4", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_5", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_6", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_7", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_8", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_9", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_10", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_11", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_12", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_13", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_14", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_15", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_16", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_17", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_18", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_19", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_20", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_21", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_22", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneRotations_23", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: Some("{}") }, CppParam { name: "Pinches", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch", modifiers: "", def_value: Some("{}") }, CppParam { name: "PinchStrength_0", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "PinchStrength_1", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "PinchStrength_2", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "PinchStrength_3", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "PinchStrength_4", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "PointerPose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: Some("{}") }, CppParam { name: "HandScale", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "HandConfidence", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence", modifiers: "", def_value: Some("{}") }, CppParam { name: "FingerConfidences_0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence", modifiers: "", def_value: Some("{}") }, CppParam { name: "FingerConfidences_1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence", modifiers: "", def_value: Some("{}") }, CppParam { name: "FingerConfidences_2", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence", modifiers: "", def_value: Some("{}") }, CppParam { name: "FingerConfidences_3", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence", modifiers: "", def_value: Some("{}") }, CppParam { name: "FingerConfidences_4", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence", modifiers: "", def_value: Some("{}") }, CppParam { name: "RequestedTimeStamp", ty: "double_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "SampleTimeStamp", ty: "double_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::GlobalNamespace__OVRPlugin__HandStateInternal(GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus Status, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef RootPose, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_0, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_1, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_2, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_3, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_4, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_5, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_6, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_7, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_8, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_9, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_10, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_11, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_12, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_13, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_14, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_15, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_16, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_17, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_18, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_19, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_20, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_21, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_22, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_23, GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch Pinches, float_t PinchStrength_0, float_t PinchStrength_1, float_t PinchStrength_2, float_t PinchStrength_3, float_t PinchStrength_4, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef PointerPose, float_t HandScale, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence HandConfidence, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence FingerConfidences_0, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence FingerConfidences_1, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence FingerConfidences_2, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence FingerConfidences_3, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence FingerConfidences_4, double_t RequestedTimeStamp, double_t SampleTimeStamp) noexcept : ::bs_hook::ValueTypeWrapper() {this->Status = Status;
this->RootPose = RootPose;
this->BoneRotations_0 = BoneRotations_0;
this->BoneRotations_1 = BoneRotations_1;
this->BoneRotations_2 = BoneRotations_2;
this->BoneRotations_3 = BoneRotations_3;
this->BoneRotations_4 = BoneRotations_4;
this->BoneRotations_5 = BoneRotations_5;
this->BoneRotations_6 = BoneRotations_6;
this->BoneRotations_7 = BoneRotations_7;
this->BoneRotations_8 = BoneRotations_8;
this->BoneRotations_9 = BoneRotations_9;
this->BoneRotations_10 = BoneRotations_10;
this->BoneRotations_11 = BoneRotations_11;
this->BoneRotations_12 = BoneRotations_12;
this->BoneRotations_13 = BoneRotations_13;
this->BoneRotations_14 = BoneRotations_14;
this->BoneRotations_15 = BoneRotations_15;
this->BoneRotations_16 = BoneRotations_16;
this->BoneRotations_17 = BoneRotations_17;
this->BoneRotations_18 = BoneRotations_18;
this->BoneRotations_19 = BoneRotations_19;
this->BoneRotations_20 = BoneRotations_20;
this->BoneRotations_21 = BoneRotations_21;
this->BoneRotations_22 = BoneRotations_22;
this->BoneRotations_23 = BoneRotations_23;
this->Pinches = Pinches;
this->PinchStrength_0 = PinchStrength_0;
this->PinchStrength_1 = PinchStrength_1;
this->PinchStrength_2 = PinchStrength_2;
this->PinchStrength_3 = PinchStrength_3;
this->PinchStrength_4 = PinchStrength_4;
this->PointerPose = PointerPose;
this->HandScale = HandScale;
this->HandConfidence = HandConfidence;
this->FingerConfidences_0 = FingerConfidences_0;
this->FingerConfidences_1 = FingerConfidences_1;
this->FingerConfidences_2 = FingerConfidences_2;
this->FingerConfidences_3 = FingerConfidences_3;
this->FingerConfidences_4 = FingerConfidences_4;
this->RequestedTimeStamp = RequestedTimeStamp;
this->SampleTimeStamp = SampleTimeStamp;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_Status(GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_Status() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_RootPose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_RootPose() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_0(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x20>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_0() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_1(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x30>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_1() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x30>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_2(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x40>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_2() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x40>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_3(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x50>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_3() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x50>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_4(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x60>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_4() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x60>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_5(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x70>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_5() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x70>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_6(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x80>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_6() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x80>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_7(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x90>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_7() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x90>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_8(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0xa0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_8() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0xa0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_9(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0xb0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_9() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0xb0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_10(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0xc0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_10() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0xc0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_11(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0xd0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_11() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0xd0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_12(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0xe0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_12() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0xe0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_13(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0xf0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_13() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0xf0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_14(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x100>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_14() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x100>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_15(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x110>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_15() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x110>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_16(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x120>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_16() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x120>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_17(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x130>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_17() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x130>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_18(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x140>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_18() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x140>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_19(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x150>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_19() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x150>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_20(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x160>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_20() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x160>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_21(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x170>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_21() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x170>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_22(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x180>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_22() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x180>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_BoneRotations_23(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x190>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_BoneRotations_23() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, 0x190>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_Pinches(GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch, 0x1a0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_Pinches() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch, 0x1a0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_PinchStrength_0(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x1a4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_PinchStrength_0() const {
return ::cordl_internals::getInstanceField<float_t, 0x1a4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_PinchStrength_1(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x1a8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_PinchStrength_1() const {
return ::cordl_internals::getInstanceField<float_t, 0x1a8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_PinchStrength_2(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x1ac>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_PinchStrength_2() const {
return ::cordl_internals::getInstanceField<float_t, 0x1ac>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_PinchStrength_3(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x1b0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_PinchStrength_3() const {
return ::cordl_internals::getInstanceField<float_t, 0x1b0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_PinchStrength_4(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x1b4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_PinchStrength_4() const {
return ::cordl_internals::getInstanceField<float_t, 0x1b4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_PointerPose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x1b8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_PointerPose() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x1b8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_HandScale(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x1d4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_HandScale() const {
return ::cordl_internals::getInstanceField<float_t, 0x1d4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_HandConfidence(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, 0x1d8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_HandConfidence() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, 0x1d8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_FingerConfidences_0(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, 0x1dc>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_FingerConfidences_0() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, 0x1dc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_FingerConfidences_1(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, 0x1e0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_FingerConfidences_1() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, 0x1e0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_FingerConfidences_2(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, 0x1e4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_FingerConfidences_2() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, 0x1e4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_FingerConfidences_3(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, 0x1e8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_FingerConfidences_3() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, 0x1e8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_FingerConfidences_4(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, 0x1ec>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_FingerConfidences_4() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, 0x1ec>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_RequestedTimeStamp(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x1f0>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_RequestedTimeStamp() const {
return ::cordl_internals::getInstanceField<double_t, 0x1f0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__set_SampleTimeStamp(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x1f8>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal::__get_SampleTimeStamp() const {
return ::cordl_internals::getInstanceField<double_t, 0x1f8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "BoneIndex", ty: "int16_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "StartPoint", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: Some("{}") }, CppParam { name: "EndPoint", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: Some("{}") }, CppParam { name: "Radius", ty: "float_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule::GlobalNamespace__OVRPlugin__BoneCapsule(int16_t BoneIndex, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f StartPoint, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f EndPoint, float_t Radius) noexcept : ::bs_hook::ValueTypeWrapper() {this->BoneIndex = BoneIndex;
this->StartPoint = StartPoint;
this->EndPoint = EndPoint;
this->Radius = Radius;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule::__set_BoneIndex(int16_t value)  {
::cordl_internals::setInstanceField<int16_t, 0x0>(this->__instance, std::forward<int16_t>(value));
}
constexpr int16_t GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule::__get_BoneIndex() const {
return ::cordl_internals::getInstanceField<int16_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule::__set_StartPoint(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule::__get_StartPoint() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule::__set_EndPoint(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x10>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule::__get_EndPoint() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule::__set_Radius(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x1c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule::__get_Radius() const {
return ::cordl_internals::getInstanceField<float_t, 0x1c>(this->__instance);
}
// Ctor Parameters [CppParam { name: "Id", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId", modifiers: "", def_value: Some("{}") }, CppParam { name: "ParentBoneIndex", ty: "int16_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Pose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone::GlobalNamespace__OVRPlugin__Bone(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId Id, int16_t ParentBoneIndex, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef Pose) noexcept : ::bs_hook::ValueTypeWrapper() {this->Id = Id;
this->ParentBoneIndex = ParentBoneIndex;
this->Pose = Pose;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Bone::__set_Id(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId GlobalNamespace::GlobalNamespace__OVRPlugin__Bone::__get_Id() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Bone::__set_ParentBoneIndex(int16_t value)  {
::cordl_internals::setInstanceField<int16_t, 0x4>(this->__instance, std::forward<int16_t>(value));
}
constexpr int16_t GlobalNamespace::GlobalNamespace__OVRPlugin__Bone::__get_ParentBoneIndex() const {
return ::cordl_internals::getInstanceField<int16_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Bone::__set_Pose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__Bone::__get_Pose() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants::GlobalNamespace__OVRPlugin__SkeletonConstants(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants  GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants::MaxHandBones{24};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants  GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants::MaxBodyBones{70};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants  GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants::MaxBones{70};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants  GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants::MaxBoneCapsules{19};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType::GlobalNamespace__OVRPlugin__SkeletonType(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType  GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType::None{-1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType  GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType::HandLeft{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType  GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType::HandRight{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType  GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType::Body{2};
// Ctor Parameters [CppParam { name: "Type", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType", modifiers: "", def_value: Some("{}") }, CppParam { name: "NumBones", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "NumBoneCapsules", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "BoneCapsules", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>", modifiers: "", def_value: Some("csnull") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton::GlobalNamespace__OVRPlugin__Skeleton(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType Type, uint32_t NumBones, uint32_t NumBoneCapsules, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone> Bones, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule> BoneCapsules) noexcept : ::bs_hook::ValueTypeWrapper() {this->Type = Type;
this->NumBones = NumBones;
this->NumBoneCapsules = NumBoneCapsules;
this->Bones = Bones;
this->BoneCapsules = BoneCapsules;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton::__set_Type(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton::__get_Type() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton::__set_NumBones(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x4>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton::__get_NumBones() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton::__set_NumBoneCapsules(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x8>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton::__get_NumBoneCapsules() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton::__set_Bones(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>, 0x10>(this->__instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone> GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton::__get_Bones() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton::__set_BoneCapsules(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>, 0x18>(this->__instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule> GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton::__get_BoneCapsules() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>, 0x18>(this->__instance);
}
// Ctor Parameters [CppParam { name: "Type", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType", modifiers: "", def_value: Some("{}") }, CppParam { name: "NumBones", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "NumBoneCapsules", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "BoneCapsules", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>", modifiers: "", def_value: Some("csnull") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2::GlobalNamespace__OVRPlugin__Skeleton2(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType Type, uint32_t NumBones, uint32_t NumBoneCapsules, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone> Bones, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule> BoneCapsules) noexcept : ::bs_hook::ValueTypeWrapper() {this->Type = Type;
this->NumBones = NumBones;
this->NumBoneCapsules = NumBoneCapsules;
this->Bones = Bones;
this->BoneCapsules = BoneCapsules;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2::__set_Type(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2::__get_Type() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2::__set_NumBones(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x4>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2::__get_NumBones() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2::__set_NumBoneCapsules(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x8>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2::__get_NumBoneCapsules() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2::__set_Bones(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>, 0x10>(this->__instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone> GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2::__get_Bones() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2::__set_BoneCapsules(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>, 0x18>(this->__instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule> GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2::__get_BoneCapsules() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>, 0x18>(this->__instance);
}
// Ctor Parameters [CppParam { name: "Type", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType", modifiers: "", def_value: Some("{}") }, CppParam { name: "NumBones", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "NumBoneCapsules", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_2", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_3", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_4", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_5", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_6", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_7", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_8", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_9", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_10", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_11", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_12", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_13", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_14", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_15", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_16", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_17", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_18", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_19", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_20", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_21", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_22", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_23", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_24", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_25", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_26", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_27", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_28", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_29", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_30", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_31", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_32", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_33", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_34", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_35", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_36", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_37", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_38", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_39", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_40", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_41", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_42", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_43", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_44", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_45", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_46", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_47", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_48", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_49", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_50", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_51", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_52", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_53", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_54", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_55", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_56", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_57", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_58", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_59", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_60", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_61", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_62", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_63", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_64", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_65", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_66", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_67", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_68", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "Bones_69", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_2", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_3", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_4", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_5", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_6", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_7", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_8", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_9", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_10", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_11", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_12", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_13", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_14", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_15", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_16", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_17", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }, CppParam { name: "BoneCapsules_18", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::GlobalNamespace__OVRPlugin__Skeleton2Internal(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType Type, uint32_t NumBones, uint32_t NumBoneCapsules, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_0, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_1, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_2, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_3, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_4, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_5, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_6, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_7, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_8, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_9, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_10, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_11, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_12, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_13, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_14, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_15, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_16, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_17, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_18, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_19, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_20, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_21, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_22, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_23, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_24, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_25, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_26, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_27, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_28, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_29, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_30, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_31, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_32, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_33, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_34, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_35, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_36, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_37, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_38, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_39, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_40, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_41, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_42, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_43, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_44, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_45, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_46, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_47, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_48, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_49, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_50, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_51, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_52, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_53, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_54, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_55, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_56, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_57, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_58, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_59, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_60, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_61, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_62, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_63, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_64, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_65, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_66, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_67, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_68, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_69, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_0, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_1, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_2, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_3, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_4, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_5, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_6, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_7, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_8, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_9, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_10, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_11, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_12, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_13, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_14, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_15, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_16, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_17, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_18) noexcept : ::bs_hook::ValueTypeWrapper() {this->Type = Type;
this->NumBones = NumBones;
this->NumBoneCapsules = NumBoneCapsules;
this->Bones_0 = Bones_0;
this->Bones_1 = Bones_1;
this->Bones_2 = Bones_2;
this->Bones_3 = Bones_3;
this->Bones_4 = Bones_4;
this->Bones_5 = Bones_5;
this->Bones_6 = Bones_6;
this->Bones_7 = Bones_7;
this->Bones_8 = Bones_8;
this->Bones_9 = Bones_9;
this->Bones_10 = Bones_10;
this->Bones_11 = Bones_11;
this->Bones_12 = Bones_12;
this->Bones_13 = Bones_13;
this->Bones_14 = Bones_14;
this->Bones_15 = Bones_15;
this->Bones_16 = Bones_16;
this->Bones_17 = Bones_17;
this->Bones_18 = Bones_18;
this->Bones_19 = Bones_19;
this->Bones_20 = Bones_20;
this->Bones_21 = Bones_21;
this->Bones_22 = Bones_22;
this->Bones_23 = Bones_23;
this->Bones_24 = Bones_24;
this->Bones_25 = Bones_25;
this->Bones_26 = Bones_26;
this->Bones_27 = Bones_27;
this->Bones_28 = Bones_28;
this->Bones_29 = Bones_29;
this->Bones_30 = Bones_30;
this->Bones_31 = Bones_31;
this->Bones_32 = Bones_32;
this->Bones_33 = Bones_33;
this->Bones_34 = Bones_34;
this->Bones_35 = Bones_35;
this->Bones_36 = Bones_36;
this->Bones_37 = Bones_37;
this->Bones_38 = Bones_38;
this->Bones_39 = Bones_39;
this->Bones_40 = Bones_40;
this->Bones_41 = Bones_41;
this->Bones_42 = Bones_42;
this->Bones_43 = Bones_43;
this->Bones_44 = Bones_44;
this->Bones_45 = Bones_45;
this->Bones_46 = Bones_46;
this->Bones_47 = Bones_47;
this->Bones_48 = Bones_48;
this->Bones_49 = Bones_49;
this->Bones_50 = Bones_50;
this->Bones_51 = Bones_51;
this->Bones_52 = Bones_52;
this->Bones_53 = Bones_53;
this->Bones_54 = Bones_54;
this->Bones_55 = Bones_55;
this->Bones_56 = Bones_56;
this->Bones_57 = Bones_57;
this->Bones_58 = Bones_58;
this->Bones_59 = Bones_59;
this->Bones_60 = Bones_60;
this->Bones_61 = Bones_61;
this->Bones_62 = Bones_62;
this->Bones_63 = Bones_63;
this->Bones_64 = Bones_64;
this->Bones_65 = Bones_65;
this->Bones_66 = Bones_66;
this->Bones_67 = Bones_67;
this->Bones_68 = Bones_68;
this->Bones_69 = Bones_69;
this->BoneCapsules_0 = BoneCapsules_0;
this->BoneCapsules_1 = BoneCapsules_1;
this->BoneCapsules_2 = BoneCapsules_2;
this->BoneCapsules_3 = BoneCapsules_3;
this->BoneCapsules_4 = BoneCapsules_4;
this->BoneCapsules_5 = BoneCapsules_5;
this->BoneCapsules_6 = BoneCapsules_6;
this->BoneCapsules_7 = BoneCapsules_7;
this->BoneCapsules_8 = BoneCapsules_8;
this->BoneCapsules_9 = BoneCapsules_9;
this->BoneCapsules_10 = BoneCapsules_10;
this->BoneCapsules_11 = BoneCapsules_11;
this->BoneCapsules_12 = BoneCapsules_12;
this->BoneCapsules_13 = BoneCapsules_13;
this->BoneCapsules_14 = BoneCapsules_14;
this->BoneCapsules_15 = BoneCapsules_15;
this->BoneCapsules_16 = BoneCapsules_16;
this->BoneCapsules_17 = BoneCapsules_17;
this->BoneCapsules_18 = BoneCapsules_18;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Type(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Type() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_NumBones(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x4>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_NumBones() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_NumBoneCapsules(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x8>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_NumBoneCapsules() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_0(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0xc>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_0() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0xc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_1(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x30>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_1() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x30>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_2(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x54>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_2() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x54>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_3(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x78>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_3() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x78>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_4(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x9c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_4() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x9c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_5(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0xc0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_5() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0xc0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_6(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0xe4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_6() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0xe4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_7(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x108>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_7() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x108>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_8(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x12c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_8() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x12c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_9(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x150>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_9() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x150>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_10(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x174>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_10() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x174>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_11(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x198>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_11() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x198>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_12(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x1bc>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_12() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x1bc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_13(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x1e0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_13() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x1e0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_14(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x204>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_14() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x204>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_15(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x228>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_15() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x228>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_16(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x24c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_16() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x24c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_17(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x270>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_17() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x270>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_18(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x294>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_18() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x294>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_19(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x2b8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_19() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x2b8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_20(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x2dc>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_20() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x2dc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_21(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x300>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_21() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x300>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_22(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x324>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_22() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x324>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_23(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x348>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_23() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x348>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_24(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x36c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_24() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x36c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_25(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x390>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_25() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x390>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_26(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x3b4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_26() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x3b4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_27(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x3d8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_27() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x3d8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_28(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x3fc>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_28() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x3fc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_29(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x420>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_29() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x420>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_30(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x444>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_30() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x444>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_31(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x468>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_31() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x468>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_32(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x48c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_32() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x48c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_33(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x4b0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_33() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x4b0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_34(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x4d4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_34() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x4d4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_35(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x4f8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_35() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x4f8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_36(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x51c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_36() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x51c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_37(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x540>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_37() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x540>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_38(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x564>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_38() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x564>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_39(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x588>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_39() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x588>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_40(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x5ac>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_40() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x5ac>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_41(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x5d0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_41() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x5d0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_42(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x5f4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_42() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x5f4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_43(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x618>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_43() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x618>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_44(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x63c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_44() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x63c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_45(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x660>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_45() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x660>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_46(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x684>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_46() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x684>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_47(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x6a8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_47() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x6a8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_48(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x6cc>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_48() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x6cc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_49(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x6f0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_49() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x6f0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_50(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x714>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_50() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x714>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_51(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x738>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_51() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x738>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_52(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x75c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_52() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x75c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_53(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x780>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_53() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x780>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_54(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x7a4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_54() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x7a4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_55(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x7c8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_55() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x7c8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_56(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x7ec>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_56() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x7ec>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_57(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x810>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_57() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x810>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_58(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x834>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_58() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x834>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_59(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x858>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_59() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x858>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_60(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x87c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_60() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x87c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_61(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x8a0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_61() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x8a0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_62(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x8c4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_62() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x8c4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_63(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x8e8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_63() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x8e8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_64(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x90c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_64() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x90c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_65(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x930>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_65() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x930>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_66(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x954>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_66() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x954>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_67(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x978>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_67() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x978>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_68(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x99c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_68() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x99c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_Bones_69(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x9c0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_Bones_69() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, 0x9c0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_0(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0x9e4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_0() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0x9e4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_1(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xa04>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_1() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xa04>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_2(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xa24>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_2() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xa24>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_3(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xa44>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_3() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xa44>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_4(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xa64>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_4() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xa64>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_5(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xa84>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_5() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xa84>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_6(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xaa4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_6() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xaa4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_7(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xac4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_7() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xac4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_8(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xae4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_8() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xae4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_9(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xb04>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_9() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xb04>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_10(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xb24>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_10() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xb24>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_11(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xb44>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_11() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xb44>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_12(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xb64>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_12() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xb64>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_13(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xb84>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_13() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xb84>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_14(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xba4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_14() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xba4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_15(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xbc4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_15() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xbc4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_16(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xbe4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_16() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xbe4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_17(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xc04>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_17() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xc04>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__set_BoneCapsules_18(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xc24>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal::__get_BoneCapsules_18() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, 0xc24>(this->__instance);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__MeshConstants::GlobalNamespace__OVRPlugin__MeshConstants(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__MeshConstants::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__MeshConstants::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__MeshConstants  GlobalNamespace::GlobalNamespace__OVRPlugin__MeshConstants::MaxVertices{3000};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__MeshConstants  GlobalNamespace::GlobalNamespace__OVRPlugin__MeshConstants::MaxIndices{18000};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType::GlobalNamespace__OVRPlugin__MeshType(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType  GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType::None{-1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType  GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType::HandLeft{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType  GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType::HandRight{1};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh._ctor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::_ctor)> {
  constexpr static std::size_t size = 0x8;
  constexpr static std::size_t addrs = 0x26223fc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__set_Type(GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType, 0x10>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__get_Type() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType, 0x10>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__set_NumVertices(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x14>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__get_NumVertices() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x14>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__set_NumIndices(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x18>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__get_NumIndices() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x18>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__set_VertexPositions(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>, 0x20>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__get_VertexPositions() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>, 0x20>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__set_Indices(::ArrayW<int16_t> value)  {
::cordl_internals::setInstanceField<::ArrayW<int16_t>, 0x28>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<::ArrayW<int16_t>>(value));
}
constexpr ::ArrayW<int16_t> GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__get_Indices() const {
return ::cordl_internals::getInstanceField<::ArrayW<int16_t>, 0x28>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__set_VertexNormals(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>, 0x30>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__get_VertexNormals() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>, 0x30>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__set_VertexUV0(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>, 0x38>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f> GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__get_VertexUV0() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>, 0x38>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__set_BlendIndices(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s>, 0x40>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s> GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__get_BlendIndices() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s>, 0x40>(this->::bs_hook::Il2CppWrapperType::instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__set_BlendWeights(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f>, 0x48>(this->::bs_hook::Il2CppWrapperType::instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f> GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::__get_BlendWeights() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f>, 0x48>(this->::bs_hook::Il2CppWrapperType::instance);
}
// Ctor Parameters []
 GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::GlobalNamespace__OVRPlugin__Mesh()  : ::bs_hook::Il2CppWrapperType(THROW_UNLESS(::il2cpp_utils::New<GlobalNamespace__OVRPlugin__Mesh>())) {}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh::_ctor()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(const_cast<void*>(instance), ___internal_method);
}
// Ctor Parameters [CppParam { name: "value__", ty: "uint64_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags::GlobalNamespace__OVRPlugin__SpaceLocationFlags(uint64_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags::__set_value__(uint64_t value)  {
::cordl_internals::setInstanceField<uint64_t, 0x0>(this->__instance, std::forward<uint64_t>(value));
}
constexpr uint64_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags::__get_value__() const {
return ::cordl_internals::getInstanceField<uint64_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags::OrientationValid{1u};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags::PositionValid{2u};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags::OrientationTracked{4u};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags::PositionTracked{8u};
// Ctor Parameters [CppParam { name: "locationFlags", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags", modifiers: "", def_value: Some("{}") }, CppParam { name: "pose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationf::GlobalNamespace__OVRPlugin__SpaceLocationf(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags locationFlags, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef pose) noexcept : ::bs_hook::ValueTypeWrapper() {this->locationFlags = locationFlags;
this->pose = pose;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationf::__set_locationFlags(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationf::__get_locationFlags() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationf::__set_pose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationf::__get_pose() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x8>(this->__instance);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation.get_OrientationValid
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::get_OrientationValid)> {
  constexpr static std::size_t size = 0xc;
  constexpr static std::size_t addrs = 0x2622404;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>::get(),
                            "get_OrientationValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation.get_PositionValid
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::get_PositionValid)> {
  constexpr static std::size_t size = 0xc;
  constexpr static std::size_t addrs = 0x2622410;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>::get(),
                            "get_PositionValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation.get_OrientationTracked
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::get_OrientationTracked)> {
  constexpr static std::size_t size = 0xc;
  constexpr static std::size_t addrs = 0x262241c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>::get(),
                            "get_OrientationTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation.get_PositionTracked
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::get_PositionTracked)> {
  constexpr static std::size_t size = 0xc;
  constexpr static std::size_t addrs = 0x2622428;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>::get(),
                            "get_PositionTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "LocationFlags", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags", modifiers: "", def_value: Some("{}") }, CppParam { name: "Pose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::GlobalNamespace__OVRPlugin__BodyJointLocation(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags LocationFlags, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef Pose) noexcept : ::bs_hook::ValueTypeWrapper() {this->LocationFlags = LocationFlags;
this->Pose = Pose;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::__set_LocationFlags(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::__get_LocationFlags() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::__set_Pose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::__get_Pose() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x8>(this->__instance);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::get_OrientationValid()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>::get(),
                            "get_OrientationValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::get_PositionValid()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>::get(),
                            "get_PositionValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::get_OrientationTracked()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>::get(),
                            "get_OrientationTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation::get_PositionTracked()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>::get(),
                            "get_PositionTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
// Ctor Parameters [CppParam { name: "JointLocations", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "Confidence", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "SkeletonChangedCount", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState::GlobalNamespace__OVRPlugin__BodyState(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation> JointLocations, float_t Confidence, uint32_t SkeletonChangedCount, double_t Time) noexcept : ::bs_hook::ValueTypeWrapper() {this->JointLocations = JointLocations;
this->Confidence = Confidence;
this->SkeletonChangedCount = SkeletonChangedCount;
this->Time = Time;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState::__set_JointLocations(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>, 0x0>(this->__instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation> GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState::__get_JointLocations() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState::__set_Confidence(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState::__get_Confidence() const {
return ::cordl_internals::getInstanceField<float_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState::__set_SkeletonChangedCount(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0xc>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState::__get_SkeletonChangedCount() const {
return ::cordl_internals::getInstanceField<uint32_t, 0xc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState::__set_Time(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x10>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState::__get_Time() const {
return ::cordl_internals::getInstanceField<double_t, 0x10>(this->__instance);
}
// Ctor Parameters [CppParam { name: "IsActive", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: Some("{}") }, CppParam { name: "Confidence", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "SkeletonChangedCount", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_2", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_3", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_4", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_5", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_6", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_7", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_8", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_9", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_10", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_11", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_12", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_13", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_14", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_15", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_16", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_17", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_18", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_19", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_20", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_21", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_22", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_23", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_24", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_25", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_26", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_27", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_28", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_29", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_30", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_31", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_32", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_33", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_34", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_35", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_36", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_37", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_38", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_39", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_40", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_41", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_42", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_43", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_44", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_45", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_46", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_47", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_48", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_49", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_50", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_51", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_52", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_53", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_54", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_55", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_56", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_57", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_58", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_59", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_60", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_61", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_62", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_63", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_64", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_65", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_66", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_67", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_68", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "JointLocation_69", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::GlobalNamespace__OVRPlugin__BodyStateInternal(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool IsActive, float_t Confidence, uint32_t SkeletonChangedCount, double_t Time, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_0, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_1, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_2, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_3, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_4, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_5, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_6, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_7, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_8, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_9, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_10, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_11, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_12, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_13, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_14, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_15, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_16, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_17, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_18, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_19, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_20, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_21, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_22, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_23, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_24, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_25, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_26, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_27, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_28, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_29, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_30, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_31, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_32, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_33, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_34, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_35, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_36, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_37, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_38, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_39, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_40, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_41, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_42, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_43, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_44, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_45, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_46, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_47, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_48, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_49, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_50, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_51, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_52, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_53, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_54, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_55, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_56, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_57, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_58, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_59, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_60, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_61, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_62, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_63, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_64, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_65, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_66, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_67, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_68, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_69) noexcept : ::bs_hook::ValueTypeWrapper() {this->IsActive = IsActive;
this->Confidence = Confidence;
this->SkeletonChangedCount = SkeletonChangedCount;
this->Time = Time;
this->JointLocation_0 = JointLocation_0;
this->JointLocation_1 = JointLocation_1;
this->JointLocation_2 = JointLocation_2;
this->JointLocation_3 = JointLocation_3;
this->JointLocation_4 = JointLocation_4;
this->JointLocation_5 = JointLocation_5;
this->JointLocation_6 = JointLocation_6;
this->JointLocation_7 = JointLocation_7;
this->JointLocation_8 = JointLocation_8;
this->JointLocation_9 = JointLocation_9;
this->JointLocation_10 = JointLocation_10;
this->JointLocation_11 = JointLocation_11;
this->JointLocation_12 = JointLocation_12;
this->JointLocation_13 = JointLocation_13;
this->JointLocation_14 = JointLocation_14;
this->JointLocation_15 = JointLocation_15;
this->JointLocation_16 = JointLocation_16;
this->JointLocation_17 = JointLocation_17;
this->JointLocation_18 = JointLocation_18;
this->JointLocation_19 = JointLocation_19;
this->JointLocation_20 = JointLocation_20;
this->JointLocation_21 = JointLocation_21;
this->JointLocation_22 = JointLocation_22;
this->JointLocation_23 = JointLocation_23;
this->JointLocation_24 = JointLocation_24;
this->JointLocation_25 = JointLocation_25;
this->JointLocation_26 = JointLocation_26;
this->JointLocation_27 = JointLocation_27;
this->JointLocation_28 = JointLocation_28;
this->JointLocation_29 = JointLocation_29;
this->JointLocation_30 = JointLocation_30;
this->JointLocation_31 = JointLocation_31;
this->JointLocation_32 = JointLocation_32;
this->JointLocation_33 = JointLocation_33;
this->JointLocation_34 = JointLocation_34;
this->JointLocation_35 = JointLocation_35;
this->JointLocation_36 = JointLocation_36;
this->JointLocation_37 = JointLocation_37;
this->JointLocation_38 = JointLocation_38;
this->JointLocation_39 = JointLocation_39;
this->JointLocation_40 = JointLocation_40;
this->JointLocation_41 = JointLocation_41;
this->JointLocation_42 = JointLocation_42;
this->JointLocation_43 = JointLocation_43;
this->JointLocation_44 = JointLocation_44;
this->JointLocation_45 = JointLocation_45;
this->JointLocation_46 = JointLocation_46;
this->JointLocation_47 = JointLocation_47;
this->JointLocation_48 = JointLocation_48;
this->JointLocation_49 = JointLocation_49;
this->JointLocation_50 = JointLocation_50;
this->JointLocation_51 = JointLocation_51;
this->JointLocation_52 = JointLocation_52;
this->JointLocation_53 = JointLocation_53;
this->JointLocation_54 = JointLocation_54;
this->JointLocation_55 = JointLocation_55;
this->JointLocation_56 = JointLocation_56;
this->JointLocation_57 = JointLocation_57;
this->JointLocation_58 = JointLocation_58;
this->JointLocation_59 = JointLocation_59;
this->JointLocation_60 = JointLocation_60;
this->JointLocation_61 = JointLocation_61;
this->JointLocation_62 = JointLocation_62;
this->JointLocation_63 = JointLocation_63;
this->JointLocation_64 = JointLocation_64;
this->JointLocation_65 = JointLocation_65;
this->JointLocation_66 = JointLocation_66;
this->JointLocation_67 = JointLocation_67;
this->JointLocation_68 = JointLocation_68;
this->JointLocation_69 = JointLocation_69;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_IsActive(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_IsActive() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_Confidence(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_Confidence() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_SkeletonChangedCount(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x8>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_SkeletonChangedCount() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_Time(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x10>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_Time() const {
return ::cordl_internals::getInstanceField<double_t, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_0(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x18>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_0() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x18>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_1(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x40>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_1() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x40>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_2(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x68>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_2() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x68>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_3(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x90>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_3() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x90>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_4(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xb8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_4() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xb8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_5(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xe0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_5() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xe0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_6(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x108>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_6() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x108>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_7(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x130>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_7() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x130>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_8(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x158>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_8() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x158>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_9(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x180>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_9() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x180>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_10(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x1a8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_10() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x1a8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_11(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x1d0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_11() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x1d0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_12(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x1f8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_12() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x1f8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_13(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x220>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_13() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x220>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_14(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x248>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_14() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x248>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_15(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x270>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_15() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x270>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_16(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x298>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_16() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x298>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_17(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x2c0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_17() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x2c0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_18(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x2e8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_18() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x2e8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_19(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x310>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_19() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x310>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_20(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x338>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_20() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x338>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_21(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x360>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_21() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x360>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_22(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x388>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_22() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x388>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_23(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x3b0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_23() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x3b0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_24(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x3d8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_24() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x3d8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_25(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x400>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_25() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x400>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_26(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x428>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_26() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x428>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_27(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x450>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_27() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x450>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_28(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x478>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_28() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x478>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_29(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x4a0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_29() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x4a0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_30(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x4c8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_30() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x4c8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_31(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x4f0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_31() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x4f0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_32(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x518>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_32() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x518>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_33(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x540>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_33() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x540>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_34(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x568>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_34() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x568>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_35(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x590>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_35() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x590>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_36(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x5b8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_36() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x5b8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_37(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x5e0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_37() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x5e0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_38(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x608>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_38() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x608>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_39(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x630>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_39() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x630>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_40(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x658>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_40() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x658>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_41(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x680>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_41() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x680>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_42(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x6a8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_42() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x6a8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_43(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x6d0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_43() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x6d0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_44(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x6f8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_44() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x6f8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_45(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x720>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_45() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x720>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_46(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x748>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_46() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x748>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_47(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x770>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_47() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x770>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_48(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x798>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_48() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x798>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_49(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x7c0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_49() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x7c0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_50(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x7e8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_50() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x7e8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_51(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x810>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_51() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x810>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_52(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x838>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_52() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x838>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_53(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x860>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_53() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x860>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_54(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x888>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_54() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x888>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_55(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x8b0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_55() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x8b0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_56(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x8d8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_56() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x8d8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_57(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x900>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_57() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x900>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_58(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x928>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_58() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x928>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_59(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x950>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_59() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x950>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_60(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x978>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_60() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x978>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_61(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x9a0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_61() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x9a0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_62(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x9c8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_62() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x9c8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_63(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x9f0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_63() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0x9f0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_64(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xa18>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_64() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xa18>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_65(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xa40>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_65() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xa40>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_66(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xa68>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_66() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xa68>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_67(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xa90>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_67() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xa90>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_68(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xab8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_68() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xab8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__set_JointLocation_69(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xae0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal::__get_JointLocation_69() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, 0xae0>(this->__instance);
}
// Ctor Parameters [CppParam { name: "IsActive", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: Some("{}") }, CppParam { name: "OrientationValid", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: Some("{}") }, CppParam { name: "PositionValid", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: Some("{}") }, CppParam { name: "OrientationTracked", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: Some("{}") }, CppParam { name: "PositionTracked", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: Some("{}") }, CppParam { name: "PoseState", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef", modifiers: "", def_value: Some("{}") }, CppParam { name: "ContrastParameters", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::GlobalNamespace__OVRPlugin__KeyboardState(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool IsActive, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool OrientationValid, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool PositionValid, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool OrientationTracked, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool PositionTracked, GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef PoseState, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f ContrastParameters) noexcept : ::bs_hook::ValueTypeWrapper() {this->IsActive = IsActive;
this->OrientationValid = OrientationValid;
this->PositionValid = PositionValid;
this->OrientationTracked = OrientationTracked;
this->PositionTracked = PositionTracked;
this->PoseState = PoseState;
this->ContrastParameters = ContrastParameters;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::__set_IsActive(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::__get_IsActive() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::__set_OrientationValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::__get_OrientationValid() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::__set_PositionValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::__get_PositionValid() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::__set_OrientationTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0xc>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::__get_OrientationTracked() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0xc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::__set_PositionTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x10>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::__get_PositionTracked() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::__set_PoseState(GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef, 0x18>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::__get_PoseState() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef, 0x18>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::__set_ContrastParameters(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f, 0x70>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState::__get_ContrastParameters() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f, 0x70>(this->__instance);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants::GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants  GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants::NameMaxLength{128};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles::Unknown{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles::Opaque{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles::KeyLabel{2};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags::Exists{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags::Local{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags::Remote{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags::Connected{8};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags::Local{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags::Remote{4};
// Ctor Parameters [CppParam { name: "Name", ty: "::ArrayW<uint8_t>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "TrackedKeyboardId", ty: "uint64_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Dimensions", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: Some("{}") }, CppParam { name: "KeyboardFlags", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags", modifiers: "", def_value: Some("{}") }, CppParam { name: "SupportedPresentationStyles", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription::GlobalNamespace__OVRPlugin__KeyboardDescription(::ArrayW<uint8_t> Name, uint64_t TrackedKeyboardId, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f Dimensions, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags KeyboardFlags, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles SupportedPresentationStyles) noexcept : ::bs_hook::ValueTypeWrapper() {this->Name = Name;
this->TrackedKeyboardId = TrackedKeyboardId;
this->Dimensions = Dimensions;
this->KeyboardFlags = KeyboardFlags;
this->SupportedPresentationStyles = SupportedPresentationStyles;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription::__set_Name(::ArrayW<uint8_t> value)  {
::cordl_internals::setInstanceField<::ArrayW<uint8_t>, 0x0>(this->__instance, std::forward<::ArrayW<uint8_t>>(value));
}
constexpr ::ArrayW<uint8_t> GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription::__get_Name() const {
return ::cordl_internals::getInstanceField<::ArrayW<uint8_t>, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription::__set_TrackedKeyboardId(uint64_t value)  {
::cordl_internals::setInstanceField<uint64_t, 0x8>(this->__instance, std::forward<uint64_t>(value));
}
constexpr uint64_t GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription::__get_TrackedKeyboardId() const {
return ::cordl_internals::getInstanceField<uint64_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription::__set_Dimensions(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x10>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription::__get_Dimensions() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription::__set_KeyboardFlags(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags, 0x1c>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription::__get_KeyboardFlags() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags, 0x1c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription::__set_SupportedPresentationStyles(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles, 0x20>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription::__get_SupportedPresentationStyles() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles, 0x20>(this->__instance);
}
// Ctor Parameters [CppParam { name: "IsValid", ty: "bool", modifiers: "", def_value: Some("{}") }, CppParam { name: "IsEyeFollowingBlendshapesValid", ty: "bool", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus::GlobalNamespace__OVRPlugin__FaceExpressionStatus(bool IsValid, bool IsEyeFollowingBlendshapesValid) noexcept : ::bs_hook::ValueTypeWrapper() {this->IsValid = IsValid;
this->IsEyeFollowingBlendshapesValid = IsEyeFollowingBlendshapesValid;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus::__set_IsValid(bool value)  {
::cordl_internals::setInstanceField<bool, 0x0>(this->__instance, std::forward<bool>(value));
}
constexpr bool GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus::__get_IsValid() const {
return ::cordl_internals::getInstanceField<bool, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus::__set_IsEyeFollowingBlendshapesValid(bool value)  {
::cordl_internals::setInstanceField<bool, 0x1>(this->__instance, std::forward<bool>(value));
}
constexpr bool GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus::__get_IsEyeFollowingBlendshapesValid() const {
return ::cordl_internals::getInstanceField<bool, 0x1>(this->__instance);
}
// Ctor Parameters [CppParam { name: "ExpressionWeights", ty: "::ArrayW<float_t>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "ExpressionWeightConfidences", ty: "::ArrayW<float_t>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "Status", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus", modifiers: "", def_value: Some("{}") }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState::GlobalNamespace__OVRPlugin__FaceState(::ArrayW<float_t> ExpressionWeights, ::ArrayW<float_t> ExpressionWeightConfidences, GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus Status, double_t Time) noexcept : ::bs_hook::ValueTypeWrapper() {this->ExpressionWeights = ExpressionWeights;
this->ExpressionWeightConfidences = ExpressionWeightConfidences;
this->Status = Status;
this->Time = Time;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState::__set_ExpressionWeights(::ArrayW<float_t> value)  {
::cordl_internals::setInstanceField<::ArrayW<float_t>, 0x0>(this->__instance, std::forward<::ArrayW<float_t>>(value));
}
constexpr ::ArrayW<float_t> GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState::__get_ExpressionWeights() const {
return ::cordl_internals::getInstanceField<::ArrayW<float_t>, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState::__set_ExpressionWeightConfidences(::ArrayW<float_t> value)  {
::cordl_internals::setInstanceField<::ArrayW<float_t>, 0x8>(this->__instance, std::forward<::ArrayW<float_t>>(value));
}
constexpr ::ArrayW<float_t> GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState::__get_ExpressionWeightConfidences() const {
return ::cordl_internals::getInstanceField<::ArrayW<float_t>, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState::__set_Status(GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus, 0x10>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState::__get_Status() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState::__set_Time(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x18>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState::__get_Time() const {
return ::cordl_internals::getInstanceField<double_t, 0x18>(this->__instance);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal.ToFaceExpressionStatus
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus (GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal::ToFaceExpressionStatus)> {
  constexpr static std::size_t size = 0x1c;
  constexpr static std::size_t addrs = 0x2622434;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal>::get(),
                            "ToFaceExpressionStatus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "IsValid", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: Some("{}") }, CppParam { name: "IsEyeFollowingBlendshapesValid", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool IsValid, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool IsEyeFollowingBlendshapesValid) noexcept : ::bs_hook::ValueTypeWrapper() {this->IsValid = IsValid;
this->IsEyeFollowingBlendshapesValid = IsEyeFollowingBlendshapesValid;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal::__set_IsValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal::__get_IsValid() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal::__set_IsEyeFollowingBlendshapesValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal::__get_IsEyeFollowingBlendshapesValid() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x4>(this->__instance);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal::ToFaceExpressionStatus()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal>::get(),
                            "ToFaceExpressionStatus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
// Ctor Parameters [CppParam { name: "ExpressionWeights_0", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_1", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_2", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_3", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_4", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_5", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_6", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_7", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_8", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_9", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_10", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_11", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_12", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_13", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_14", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_15", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_16", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_17", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_18", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_19", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_20", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_21", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_22", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_23", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_24", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_25", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_26", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_27", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_28", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_29", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_30", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_31", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_32", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_33", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_34", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_35", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_36", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_37", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_38", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_39", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_40", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_41", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_42", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_43", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_44", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_45", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_46", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_47", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_48", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_49", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_50", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_51", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_52", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_53", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_54", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_55", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_56", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_57", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_58", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_59", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_60", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_61", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeights_62", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeightConfidences_0", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ExpressionWeightConfidences_1", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Status", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal", modifiers: "", def_value: Some("{}") }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::GlobalNamespace__OVRPlugin__FaceStateInternal(float_t ExpressionWeights_0, float_t ExpressionWeights_1, float_t ExpressionWeights_2, float_t ExpressionWeights_3, float_t ExpressionWeights_4, float_t ExpressionWeights_5, float_t ExpressionWeights_6, float_t ExpressionWeights_7, float_t ExpressionWeights_8, float_t ExpressionWeights_9, float_t ExpressionWeights_10, float_t ExpressionWeights_11, float_t ExpressionWeights_12, float_t ExpressionWeights_13, float_t ExpressionWeights_14, float_t ExpressionWeights_15, float_t ExpressionWeights_16, float_t ExpressionWeights_17, float_t ExpressionWeights_18, float_t ExpressionWeights_19, float_t ExpressionWeights_20, float_t ExpressionWeights_21, float_t ExpressionWeights_22, float_t ExpressionWeights_23, float_t ExpressionWeights_24, float_t ExpressionWeights_25, float_t ExpressionWeights_26, float_t ExpressionWeights_27, float_t ExpressionWeights_28, float_t ExpressionWeights_29, float_t ExpressionWeights_30, float_t ExpressionWeights_31, float_t ExpressionWeights_32, float_t ExpressionWeights_33, float_t ExpressionWeights_34, float_t ExpressionWeights_35, float_t ExpressionWeights_36, float_t ExpressionWeights_37, float_t ExpressionWeights_38, float_t ExpressionWeights_39, float_t ExpressionWeights_40, float_t ExpressionWeights_41, float_t ExpressionWeights_42, float_t ExpressionWeights_43, float_t ExpressionWeights_44, float_t ExpressionWeights_45, float_t ExpressionWeights_46, float_t ExpressionWeights_47, float_t ExpressionWeights_48, float_t ExpressionWeights_49, float_t ExpressionWeights_50, float_t ExpressionWeights_51, float_t ExpressionWeights_52, float_t ExpressionWeights_53, float_t ExpressionWeights_54, float_t ExpressionWeights_55, float_t ExpressionWeights_56, float_t ExpressionWeights_57, float_t ExpressionWeights_58, float_t ExpressionWeights_59, float_t ExpressionWeights_60, float_t ExpressionWeights_61, float_t ExpressionWeights_62, float_t ExpressionWeightConfidences_0, float_t ExpressionWeightConfidences_1, GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal Status, double_t Time) noexcept : ::bs_hook::ValueTypeWrapper() {this->ExpressionWeights_0 = ExpressionWeights_0;
this->ExpressionWeights_1 = ExpressionWeights_1;
this->ExpressionWeights_2 = ExpressionWeights_2;
this->ExpressionWeights_3 = ExpressionWeights_3;
this->ExpressionWeights_4 = ExpressionWeights_4;
this->ExpressionWeights_5 = ExpressionWeights_5;
this->ExpressionWeights_6 = ExpressionWeights_6;
this->ExpressionWeights_7 = ExpressionWeights_7;
this->ExpressionWeights_8 = ExpressionWeights_8;
this->ExpressionWeights_9 = ExpressionWeights_9;
this->ExpressionWeights_10 = ExpressionWeights_10;
this->ExpressionWeights_11 = ExpressionWeights_11;
this->ExpressionWeights_12 = ExpressionWeights_12;
this->ExpressionWeights_13 = ExpressionWeights_13;
this->ExpressionWeights_14 = ExpressionWeights_14;
this->ExpressionWeights_15 = ExpressionWeights_15;
this->ExpressionWeights_16 = ExpressionWeights_16;
this->ExpressionWeights_17 = ExpressionWeights_17;
this->ExpressionWeights_18 = ExpressionWeights_18;
this->ExpressionWeights_19 = ExpressionWeights_19;
this->ExpressionWeights_20 = ExpressionWeights_20;
this->ExpressionWeights_21 = ExpressionWeights_21;
this->ExpressionWeights_22 = ExpressionWeights_22;
this->ExpressionWeights_23 = ExpressionWeights_23;
this->ExpressionWeights_24 = ExpressionWeights_24;
this->ExpressionWeights_25 = ExpressionWeights_25;
this->ExpressionWeights_26 = ExpressionWeights_26;
this->ExpressionWeights_27 = ExpressionWeights_27;
this->ExpressionWeights_28 = ExpressionWeights_28;
this->ExpressionWeights_29 = ExpressionWeights_29;
this->ExpressionWeights_30 = ExpressionWeights_30;
this->ExpressionWeights_31 = ExpressionWeights_31;
this->ExpressionWeights_32 = ExpressionWeights_32;
this->ExpressionWeights_33 = ExpressionWeights_33;
this->ExpressionWeights_34 = ExpressionWeights_34;
this->ExpressionWeights_35 = ExpressionWeights_35;
this->ExpressionWeights_36 = ExpressionWeights_36;
this->ExpressionWeights_37 = ExpressionWeights_37;
this->ExpressionWeights_38 = ExpressionWeights_38;
this->ExpressionWeights_39 = ExpressionWeights_39;
this->ExpressionWeights_40 = ExpressionWeights_40;
this->ExpressionWeights_41 = ExpressionWeights_41;
this->ExpressionWeights_42 = ExpressionWeights_42;
this->ExpressionWeights_43 = ExpressionWeights_43;
this->ExpressionWeights_44 = ExpressionWeights_44;
this->ExpressionWeights_45 = ExpressionWeights_45;
this->ExpressionWeights_46 = ExpressionWeights_46;
this->ExpressionWeights_47 = ExpressionWeights_47;
this->ExpressionWeights_48 = ExpressionWeights_48;
this->ExpressionWeights_49 = ExpressionWeights_49;
this->ExpressionWeights_50 = ExpressionWeights_50;
this->ExpressionWeights_51 = ExpressionWeights_51;
this->ExpressionWeights_52 = ExpressionWeights_52;
this->ExpressionWeights_53 = ExpressionWeights_53;
this->ExpressionWeights_54 = ExpressionWeights_54;
this->ExpressionWeights_55 = ExpressionWeights_55;
this->ExpressionWeights_56 = ExpressionWeights_56;
this->ExpressionWeights_57 = ExpressionWeights_57;
this->ExpressionWeights_58 = ExpressionWeights_58;
this->ExpressionWeights_59 = ExpressionWeights_59;
this->ExpressionWeights_60 = ExpressionWeights_60;
this->ExpressionWeights_61 = ExpressionWeights_61;
this->ExpressionWeights_62 = ExpressionWeights_62;
this->ExpressionWeightConfidences_0 = ExpressionWeightConfidences_0;
this->ExpressionWeightConfidences_1 = ExpressionWeightConfidences_1;
this->Status = Status;
this->Time = Time;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_0(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_0() const {
return ::cordl_internals::getInstanceField<float_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_1(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_1() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_2(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_2() const {
return ::cordl_internals::getInstanceField<float_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_3(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xc>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_3() const {
return ::cordl_internals::getInstanceField<float_t, 0xc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_4(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x10>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_4() const {
return ::cordl_internals::getInstanceField<float_t, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_5(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x14>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_5() const {
return ::cordl_internals::getInstanceField<float_t, 0x14>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_6(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x18>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_6() const {
return ::cordl_internals::getInstanceField<float_t, 0x18>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_7(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x1c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_7() const {
return ::cordl_internals::getInstanceField<float_t, 0x1c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_8(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x20>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_8() const {
return ::cordl_internals::getInstanceField<float_t, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_9(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x24>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_9() const {
return ::cordl_internals::getInstanceField<float_t, 0x24>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_10(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x28>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_10() const {
return ::cordl_internals::getInstanceField<float_t, 0x28>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_11(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x2c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_11() const {
return ::cordl_internals::getInstanceField<float_t, 0x2c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_12(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x30>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_12() const {
return ::cordl_internals::getInstanceField<float_t, 0x30>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_13(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x34>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_13() const {
return ::cordl_internals::getInstanceField<float_t, 0x34>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_14(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x38>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_14() const {
return ::cordl_internals::getInstanceField<float_t, 0x38>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_15(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x3c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_15() const {
return ::cordl_internals::getInstanceField<float_t, 0x3c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_16(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x40>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_16() const {
return ::cordl_internals::getInstanceField<float_t, 0x40>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_17(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x44>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_17() const {
return ::cordl_internals::getInstanceField<float_t, 0x44>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_18(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x48>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_18() const {
return ::cordl_internals::getInstanceField<float_t, 0x48>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_19(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_19() const {
return ::cordl_internals::getInstanceField<float_t, 0x4c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_20(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x50>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_20() const {
return ::cordl_internals::getInstanceField<float_t, 0x50>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_21(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x54>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_21() const {
return ::cordl_internals::getInstanceField<float_t, 0x54>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_22(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x58>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_22() const {
return ::cordl_internals::getInstanceField<float_t, 0x58>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_23(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x5c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_23() const {
return ::cordl_internals::getInstanceField<float_t, 0x5c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_24(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x60>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_24() const {
return ::cordl_internals::getInstanceField<float_t, 0x60>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_25(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x64>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_25() const {
return ::cordl_internals::getInstanceField<float_t, 0x64>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_26(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x68>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_26() const {
return ::cordl_internals::getInstanceField<float_t, 0x68>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_27(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x6c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_27() const {
return ::cordl_internals::getInstanceField<float_t, 0x6c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_28(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x70>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_28() const {
return ::cordl_internals::getInstanceField<float_t, 0x70>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_29(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x74>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_29() const {
return ::cordl_internals::getInstanceField<float_t, 0x74>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_30(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x78>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_30() const {
return ::cordl_internals::getInstanceField<float_t, 0x78>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_31(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x7c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_31() const {
return ::cordl_internals::getInstanceField<float_t, 0x7c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_32(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x80>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_32() const {
return ::cordl_internals::getInstanceField<float_t, 0x80>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_33(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x84>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_33() const {
return ::cordl_internals::getInstanceField<float_t, 0x84>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_34(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x88>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_34() const {
return ::cordl_internals::getInstanceField<float_t, 0x88>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_35(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x8c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_35() const {
return ::cordl_internals::getInstanceField<float_t, 0x8c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_36(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x90>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_36() const {
return ::cordl_internals::getInstanceField<float_t, 0x90>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_37(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x94>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_37() const {
return ::cordl_internals::getInstanceField<float_t, 0x94>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_38(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x98>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_38() const {
return ::cordl_internals::getInstanceField<float_t, 0x98>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_39(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x9c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_39() const {
return ::cordl_internals::getInstanceField<float_t, 0x9c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_40(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xa0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_40() const {
return ::cordl_internals::getInstanceField<float_t, 0xa0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_41(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xa4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_41() const {
return ::cordl_internals::getInstanceField<float_t, 0xa4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_42(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xa8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_42() const {
return ::cordl_internals::getInstanceField<float_t, 0xa8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_43(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xac>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_43() const {
return ::cordl_internals::getInstanceField<float_t, 0xac>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_44(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xb0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_44() const {
return ::cordl_internals::getInstanceField<float_t, 0xb0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_45(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xb4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_45() const {
return ::cordl_internals::getInstanceField<float_t, 0xb4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_46(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xb8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_46() const {
return ::cordl_internals::getInstanceField<float_t, 0xb8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_47(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xbc>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_47() const {
return ::cordl_internals::getInstanceField<float_t, 0xbc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_48(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xc0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_48() const {
return ::cordl_internals::getInstanceField<float_t, 0xc0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_49(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xc4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_49() const {
return ::cordl_internals::getInstanceField<float_t, 0xc4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_50(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xc8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_50() const {
return ::cordl_internals::getInstanceField<float_t, 0xc8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_51(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xcc>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_51() const {
return ::cordl_internals::getInstanceField<float_t, 0xcc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_52(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xd0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_52() const {
return ::cordl_internals::getInstanceField<float_t, 0xd0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_53(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xd4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_53() const {
return ::cordl_internals::getInstanceField<float_t, 0xd4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_54(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xd8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_54() const {
return ::cordl_internals::getInstanceField<float_t, 0xd8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_55(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xdc>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_55() const {
return ::cordl_internals::getInstanceField<float_t, 0xdc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_56(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xe0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_56() const {
return ::cordl_internals::getInstanceField<float_t, 0xe0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_57(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xe4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_57() const {
return ::cordl_internals::getInstanceField<float_t, 0xe4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_58(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xe8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_58() const {
return ::cordl_internals::getInstanceField<float_t, 0xe8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_59(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xec>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_59() const {
return ::cordl_internals::getInstanceField<float_t, 0xec>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_60(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xf0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_60() const {
return ::cordl_internals::getInstanceField<float_t, 0xf0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_61(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xf4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_61() const {
return ::cordl_internals::getInstanceField<float_t, 0xf4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeights_62(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xf8>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeights_62() const {
return ::cordl_internals::getInstanceField<float_t, 0xf8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeightConfidences_0(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0xfc>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeightConfidences_0() const {
return ::cordl_internals::getInstanceField<float_t, 0xfc>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_ExpressionWeightConfidences_1(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x100>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_ExpressionWeightConfidences_1() const {
return ::cordl_internals::getInstanceField<float_t, 0x100>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_Status(GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal, 0x104>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_Status() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal, 0x104>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__set_Time(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x110>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal::__get_Time() const {
return ::cordl_internals::getInstanceField<double_t, 0x110>(this->__instance);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceRegionConfidence::GlobalNamespace__OVRPlugin__FaceRegionConfidence(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceRegionConfidence::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceRegionConfidence::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceRegionConfidence  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceRegionConfidence::Lower{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceRegionConfidence  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceRegionConfidence::Upper{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceRegionConfidence  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceRegionConfidence::Max{2};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::GlobalNamespace__OVRPlugin__FaceExpression(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Invalid{-1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Brow_Lowerer_L{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Brow_Lowerer_R{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Cheek_Puff_L{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Cheek_Puff_R{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Cheek_Raiser_L{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Cheek_Raiser_R{5};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Cheek_Suck_L{6};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Cheek_Suck_R{7};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Chin_Raiser_B{8};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Chin_Raiser_T{9};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Dimpler_L{10};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Dimpler_R{11};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Eyes_Closed_L{12};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Eyes_Closed_R{13};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Eyes_Look_Down_L{14};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Eyes_Look_Down_R{15};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Eyes_Look_Left_L{16};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Eyes_Look_Left_R{17};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Eyes_Look_Right_L{18};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Eyes_Look_Right_R{19};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Eyes_Look_Up_L{20};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Eyes_Look_Up_R{21};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Inner_Brow_Raiser_L{22};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Inner_Brow_Raiser_R{23};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Jaw_Drop{24};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Jaw_Sideways_Left{25};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Jaw_Sideways_Right{26};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Jaw_Thrust{27};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lid_Tightener_L{28};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lid_Tightener_R{29};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Corner_Depressor_L{30};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Corner_Depressor_R{31};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Corner_Puller_L{32};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Corner_Puller_R{33};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Funneler_LB{34};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Funneler_LT{35};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Funneler_RB{36};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Funneler_RT{37};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Pressor_L{38};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Pressor_R{39};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Pucker_L{40};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Pucker_R{41};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Stretcher_L{42};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Stretcher_R{43};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Suck_LB{44};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Suck_LT{45};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Suck_RB{46};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Suck_RT{47};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Tightener_L{48};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lip_Tightener_R{49};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lips_Toward{50};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lower_Lip_Depressor_L{51};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Lower_Lip_Depressor_R{52};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Mouth_Left{53};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Mouth_Right{54};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Nose_Wrinkler_L{55};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Nose_Wrinkler_R{56};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Outer_Brow_Raiser_L{57};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Outer_Brow_Raiser_R{58};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Upper_Lid_Raiser_L{59};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Upper_Lid_Raiser_R{60};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Upper_Lip_Raiser_L{61};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Upper_Lip_Raiser_R{62};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression::Max{63};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceConstants::GlobalNamespace__OVRPlugin__FaceConstants(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__FaceConstants::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__FaceConstants::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceConstants  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceConstants::MaxFaceExpressions{63};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceConstants  GlobalNamespace::GlobalNamespace__OVRPlugin__FaceConstants::MaxFaceRegionConfidences{2};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState.get_IsValid
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState::get_IsValid)> {
  constexpr static std::size_t size = 0x10;
  constexpr static std::size_t addrs = 0x2622450;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState>::get(),
                            "get_IsValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
// Ctor Parameters [CppParam { name: "Pose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: Some("{}") }, CppParam { name: "Confidence", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "_isValid", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState::GlobalNamespace__OVRPlugin__EyeGazeState(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef Pose, float_t Confidence, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool _isValid) noexcept : ::bs_hook::ValueTypeWrapper() {this->Pose = Pose;
this->Confidence = Confidence;
this->_isValid = _isValid;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState::__set_Pose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState::__get_Pose() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState::__set_Confidence(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x1c>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState::__get_Confidence() const {
return ::cordl_internals::getInstanceField<float_t, 0x1c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState::__set__isValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x20>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState::__get__isValid() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, 0x20>(this->__instance);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState::get_IsValid()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState>::get(),
                            "get_IsValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
// Ctor Parameters [CppParam { name: "EyeGazes", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesState::GlobalNamespace__OVRPlugin__EyeGazesState(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState> EyeGazes, double_t Time) noexcept : ::bs_hook::ValueTypeWrapper() {this->EyeGazes = EyeGazes;
this->Time = Time;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesState::__set_EyeGazes(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState>, 0x0>(this->__instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState> GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesState::__get_EyeGazes() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState>, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesState::__set_Time(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x8>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesState::__get_Time() const {
return ::cordl_internals::getInstanceField<double_t, 0x8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "EyeGazes_0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState", modifiers: "", def_value: Some("{}") }, CppParam { name: "EyeGazes_1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState", modifiers: "", def_value: Some("{}") }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal::GlobalNamespace__OVRPlugin__EyeGazesStateInternal(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState EyeGazes_0, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState EyeGazes_1, double_t Time) noexcept : ::bs_hook::ValueTypeWrapper() {this->EyeGazes_0 = EyeGazes_0;
this->EyeGazes_1 = EyeGazes_1;
this->Time = Time;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal::__set_EyeGazes_0(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal::__get_EyeGazes_0() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal::__set_EyeGazes_1(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState, 0x24>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal::__get_EyeGazes_1() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState, 0x24>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal::__set_Time(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x48>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal::__get_Time() const {
return ::cordl_internals::getInstanceField<double_t, 0x48>(this->__instance);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace::GlobalNamespace__OVRPlugin__ColorSpace(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace  GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace::Unknown{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace  GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace::Unmanaged{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace  GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace::Rec_2020{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace  GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace::Rec_709{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace  GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace::Rift_CV1{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace  GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace::Rift_S{5};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace  GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace::Quest{6};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace  GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace::P3{7};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace  GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace::Adobe_RGB{8};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventType::GlobalNamespace__OVRPlugin__EventType(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__EventType::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__EventType::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventType  GlobalNamespace::GlobalNamespace__OVRPlugin__EventType::Unknown{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventType  GlobalNamespace::GlobalNamespace__OVRPlugin__EventType::DisplayRefreshRateChanged{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventType  GlobalNamespace::GlobalNamespace__OVRPlugin__EventType::SpatialAnchorCreateComplete{49};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventType  GlobalNamespace::GlobalNamespace__OVRPlugin__EventType::SpaceSetComponentStatusComplete{50};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventType  GlobalNamespace::GlobalNamespace__OVRPlugin__EventType::SpaceQueryResults{51};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventType  GlobalNamespace::GlobalNamespace__OVRPlugin__EventType::SpaceQueryComplete{52};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventType  GlobalNamespace::GlobalNamespace__OVRPlugin__EventType::SpaceSaveComplete{53};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventType  GlobalNamespace::GlobalNamespace__OVRPlugin__EventType::SpaceEraseComplete{54};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventType  GlobalNamespace::GlobalNamespace__OVRPlugin__EventType::SpaceShareResult{56};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventType  GlobalNamespace::GlobalNamespace__OVRPlugin__EventType::SpaceListSaveResult{57};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventType  GlobalNamespace::GlobalNamespace__OVRPlugin__EventType::SceneCaptureComplete{100};
// Ctor Parameters [CppParam { name: "EventType", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EventType", modifiers: "", def_value: Some("{}") }, CppParam { name: "EventData", ty: "::ArrayW<uint8_t>", modifiers: "", def_value: Some("csnull") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer::GlobalNamespace__OVRPlugin__EventDataBuffer(GlobalNamespace::GlobalNamespace__OVRPlugin__EventType EventType, ::ArrayW<uint8_t> EventData) noexcept : ::bs_hook::ValueTypeWrapper() {this->EventType = EventType;
this->EventData = EventData;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer::__set_EventType(GlobalNamespace::GlobalNamespace__OVRPlugin__EventType value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EventType, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__EventType>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventType GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer::__get_EventType() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__EventType, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer::__set_EventData(::ArrayW<uint8_t> value)  {
::cordl_internals::setInstanceField<::ArrayW<uint8_t>, 0x8>(this->__instance, std::forward<::ArrayW<uint8_t>>(value));
}
constexpr ::ArrayW<uint8_t> GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer::__get_EventData() const {
return ::cordl_internals::getInstanceField<::ArrayW<uint8_t>, 0x8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "ModelName", ty: "::StringW", modifiers: "", def_value: Some("csnull") }, CppParam { name: "ModelKey", ty: "uint64_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "VendorId", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ModelVersion", ty: "uint32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties::GlobalNamespace__OVRPlugin__RenderModelProperties(::StringW ModelName, uint64_t ModelKey, uint32_t VendorId, uint32_t ModelVersion) noexcept : ::bs_hook::ValueTypeWrapper() {this->ModelName = ModelName;
this->ModelKey = ModelKey;
this->VendorId = VendorId;
this->ModelVersion = ModelVersion;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties::__set_ModelName(::StringW value)  {
::cordl_internals::setInstanceField<::StringW, 0x0>(this->__instance, std::forward<::StringW>(value));
}
constexpr ::StringW GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties::__get_ModelName() const {
return ::cordl_internals::getInstanceField<::StringW, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties::__set_ModelKey(uint64_t value)  {
::cordl_internals::setInstanceField<uint64_t, 0x8>(this->__instance, std::forward<uint64_t>(value));
}
constexpr uint64_t GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties::__get_ModelKey() const {
return ::cordl_internals::getInstanceField<uint64_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties::__set_VendorId(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x10>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties::__get_VendorId() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties::__set_ModelVersion(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x14>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties::__get_ModelVersion() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x14>(this->__instance);
}
// Ctor Parameters [CppParam { name: "ModelName", ty: "::ArrayW<uint8_t>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "ModelKey", ty: "uint64_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "VendorId", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "ModelVersion", ty: "uint32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal(::ArrayW<uint8_t> ModelName, uint64_t ModelKey, uint32_t VendorId, uint32_t ModelVersion) noexcept : ::bs_hook::ValueTypeWrapper() {this->ModelName = ModelName;
this->ModelKey = ModelKey;
this->VendorId = VendorId;
this->ModelVersion = ModelVersion;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal::__set_ModelName(::ArrayW<uint8_t> value)  {
::cordl_internals::setInstanceField<::ArrayW<uint8_t>, 0x0>(this->__instance, std::forward<::ArrayW<uint8_t>>(value));
}
constexpr ::ArrayW<uint8_t> GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal::__get_ModelName() const {
return ::cordl_internals::getInstanceField<::ArrayW<uint8_t>, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal::__set_ModelKey(uint64_t value)  {
::cordl_internals::setInstanceField<uint64_t, 0x8>(this->__instance, std::forward<uint64_t>(value));
}
constexpr uint64_t GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal::__get_ModelKey() const {
return ::cordl_internals::getInstanceField<uint64_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal::__set_VendorId(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x10>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal::__get_VendorId() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal::__set_ModelVersion(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x14>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal::__get_ModelVersion() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x14>(this->__instance);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags::GlobalNamespace__OVRPlugin__RenderModelFlags(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags::SupportsGltf20Subset1{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags::SupportsGltf20Subset2{2};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType  GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType::None{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType  GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType::MonoToRgba{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType  GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType::MonoToMono{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType  GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType::BrightnessContrastSaturation{4};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags::HasTextureOpacityFactor{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags::HasEdgeColor{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags::HasTextureColorMap{4};
// Ctor Parameters [CppParam { name: "Flags", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags", modifiers: "", def_value: Some("{}") }, CppParam { name: "TextureOpacityFactor", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "EdgeColor", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf", modifiers: "", def_value: Some("{}") }, CppParam { name: "TextureColorMapType", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType", modifiers: "", def_value: Some("{}") }, CppParam { name: "TextureColorMapDataSize", ty: "uint32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "TextureColorMapData", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle::GlobalNamespace__OVRPlugin__InsightPassthroughStyle(GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags Flags, float_t TextureOpacityFactor, GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf EdgeColor, GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType TextureColorMapType, uint32_t TextureColorMapDataSize, ::cordl_internals::intptr_t TextureColorMapData) noexcept : ::bs_hook::ValueTypeWrapper() {this->Flags = Flags;
this->TextureOpacityFactor = TextureOpacityFactor;
this->EdgeColor = EdgeColor;
this->TextureColorMapType = TextureColorMapType;
this->TextureColorMapDataSize = TextureColorMapDataSize;
this->TextureColorMapData = TextureColorMapData;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle::__set_Flags(GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle::__get_Flags() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle::__set_TextureOpacityFactor(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle::__get_TextureOpacityFactor() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle::__set_EdgeColor(GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf, 0x8>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle::__get_EdgeColor() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle::__set_TextureColorMapType(GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType, 0x18>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle::__get_TextureColorMapType() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType, 0x18>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle::__set_TextureColorMapDataSize(uint32_t value)  {
::cordl_internals::setInstanceField<uint32_t, 0x1c>(this->__instance, std::forward<uint32_t>(value));
}
constexpr uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle::__get_TextureColorMapDataSize() const {
return ::cordl_internals::getInstanceField<uint32_t, 0x1c>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle::__set_TextureColorMapData(::cordl_internals::intptr_t value)  {
::cordl_internals::setInstanceField<::cordl_internals::intptr_t, 0x20>(this->__instance, std::forward<::cordl_internals::intptr_t>(value));
}
constexpr ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle::__get_TextureColorMapData() const {
return ::cordl_internals::getInstanceField<::cordl_internals::intptr_t, 0x20>(this->__instance);
}
// Ctor Parameters [CppParam { name: "LeftHandIntensity", ty: "float_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "RightHandIntensity", ty: "float_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity(float_t LeftHandIntensity, float_t RightHandIntensity) noexcept : ::bs_hook::ValueTypeWrapper() {this->LeftHandIntensity = LeftHandIntensity;
this->RightHandIntensity = RightHandIntensity;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity::__set_LeftHandIntensity(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x0>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity::__get_LeftHandIntensity() const {
return ::cordl_internals::getInstanceField<float_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity::__set_RightHandIntensity(float_t value)  {
::cordl_internals::setInstanceField<float_t, 0x4>(this->__instance, std::forward<float_t>(value));
}
constexpr float_t GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity::__get_RightHandIntensity() const {
return ::cordl_internals::getInstanceField<float_t, 0x4>(this->__instance);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags::Passthrough{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags::Color{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags  GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags::Depth{4};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType::GlobalNamespace__OVRPlugin__SpaceComponentType(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType::Locatable{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType::Storable{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType::Sharable{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType::Bounded2D{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType::Bounded3D{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType::SemanticLabels{5};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType::RoomLayout{6};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType::SpaceContainer{7};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation::GlobalNamespace__OVRPlugin__SpaceStorageLocation(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation::Invalid{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation::Local{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation::Cloud{2};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode::Invalid{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode::Indefinite{1};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType::GlobalNamespace__OVRPlugin__SpaceQueryActionType(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType::Load{0};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType::GlobalNamespace__OVRPlugin__SpaceQueryType(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType::Action{0};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType::GlobalNamespace__OVRPlugin__SpaceQueryFilterType(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType::None{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType::Ids{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType  GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType::Components{2};
// Ctor Parameters [CppParam { name: "BaseTracking", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin", modifiers: "", def_value: Some("{}") }, CppParam { name: "PoseInSpace", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: Some("{}") }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin BaseTracking, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef PoseInSpace, double_t Time) noexcept : ::bs_hook::ValueTypeWrapper() {this->BaseTracking = BaseTracking;
this->PoseInSpace = PoseInSpace;
this->Time = Time;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo::__set_BaseTracking(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo::__get_BaseTracking() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo::__set_PoseInSpace(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x4>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo::__get_PoseInSpace() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo::__set_Time(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x20>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo::__get_Time() const {
return ::cordl_internals::getInstanceField<double_t, 0x20>(this->__instance);
}
// Ctor Parameters [CppParam { name: "Ids", ty: "::ArrayW<System::Guid>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "NumIds", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds(::ArrayW<System::Guid> Ids, int32_t NumIds) noexcept : ::bs_hook::ValueTypeWrapper() {this->Ids = Ids;
this->NumIds = NumIds;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds::__set_Ids(::ArrayW<System::Guid> value)  {
::cordl_internals::setInstanceField<::ArrayW<System::Guid>, 0x0>(this->__instance, std::forward<::ArrayW<System::Guid>>(value));
}
constexpr ::ArrayW<System::Guid> GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds::__get_Ids() const {
return ::cordl_internals::getInstanceField<::ArrayW<System::Guid>, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds::__set_NumIds(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x8>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds::__get_NumIds() const {
return ::cordl_internals::getInstanceField<int32_t, 0x8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "Components", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>", modifiers: "", def_value: Some("csnull") }, CppParam { name: "NumComponents", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType> Components, int32_t NumComponents) noexcept : ::bs_hook::ValueTypeWrapper() {this->Components = Components;
this->NumComponents = NumComponents;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents::__set_Components(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType> value)  {
::cordl_internals::setInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>, 0x0>(this->__instance, std::forward<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>>(value));
}
constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType> GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents::__get_Components() const {
return ::cordl_internals::getInstanceField<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents::__set_NumComponents(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x8>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents::__get_NumComponents() const {
return ::cordl_internals::getInstanceField<int32_t, 0x8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "QueryType", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType", modifiers: "", def_value: Some("{}") }, CppParam { name: "MaxQuerySpaces", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Timeout", ty: "double_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "Location", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation", modifiers: "", def_value: Some("{}") }, CppParam { name: "ActionType", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType", modifiers: "", def_value: Some("{}") }, CppParam { name: "FilterType", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType", modifiers: "", def_value: Some("{}") }, CppParam { name: "IdInfo", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds", modifiers: "", def_value: Some("{}") }, CppParam { name: "ComponentsInfo", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::GlobalNamespace__OVRPlugin__SpaceQueryInfo(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType QueryType, int32_t MaxQuerySpaces, double_t Timeout, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation Location, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType ActionType, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType FilterType, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds IdInfo, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents ComponentsInfo) noexcept : ::bs_hook::ValueTypeWrapper() {this->QueryType = QueryType;
this->MaxQuerySpaces = MaxQuerySpaces;
this->Timeout = Timeout;
this->Location = Location;
this->ActionType = ActionType;
this->FilterType = FilterType;
this->IdInfo = IdInfo;
this->ComponentsInfo = ComponentsInfo;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__set_QueryType(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType, 0x0>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__get_QueryType() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__set_MaxQuerySpaces(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x4>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__get_MaxQuerySpaces() const {
return ::cordl_internals::getInstanceField<int32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__set_Timeout(double_t value)  {
::cordl_internals::setInstanceField<double_t, 0x8>(this->__instance, std::forward<double_t>(value));
}
constexpr double_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__get_Timeout() const {
return ::cordl_internals::getInstanceField<double_t, 0x8>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__set_Location(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation, 0x10>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__get_Location() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__set_ActionType(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType, 0x14>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__get_ActionType() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType, 0x14>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__set_FilterType(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType, 0x18>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__get_FilterType() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType, 0x18>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__set_IdInfo(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds, 0x20>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__get_IdInfo() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__set_ComponentsInfo(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents value)  {
::cordl_internals::setInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents, 0x30>(this->__instance, std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents>(value));
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo::__get_ComponentsInfo() const {
return ::cordl_internals::getInstanceField<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents, 0x30>(this->__instance);
}
// Ctor Parameters [CppParam { name: "space", ty: "uint64_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "uuid", ty: "System::Guid", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult::GlobalNamespace__OVRPlugin__SpaceQueryResult(uint64_t space, System::Guid uuid) noexcept : ::bs_hook::ValueTypeWrapper() {this->space = space;
this->uuid = uuid;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult::__set_space(uint64_t value)  {
::cordl_internals::setInstanceField<uint64_t, 0x0>(this->__instance, std::forward<uint64_t>(value));
}
constexpr uint64_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult::__get_space() const {
return ::cordl_internals::getInstanceField<uint64_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult::__set_uuid(System::Guid value)  {
::cordl_internals::setInstanceField<System::Guid, 0x8>(this->__instance, std::forward<System::Guid>(value));
}
constexpr System::Guid GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult::__get_uuid() const {
return ::cordl_internals::getInstanceField<System::Guid, 0x8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode::GlobalNamespace__OVRPlugin__Media__MrcActivationMode(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode::Automatic{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode::Disabled{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode::EnumSize{2147483647};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode::Disabled{-1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode::Initialized{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode::UserControlled{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode::SmartNavigated{2};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode::StabilizedPoV{3};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode::RemoteDroneControlled{4};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode::RemoteSpatialMapped{5};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode::SpectatorMode{6};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode::MobileMRC{7};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode::EnumSize{2147483647};
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType(int32_t value__) noexcept : ::bs_hook::EnumTypeWrapper() {this->value__ = value__;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType::__set_value__(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType::__get_value__() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType::Memory{0};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType::TextureHandle{1};
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType  GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType::EnumSize{2147483647};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.Initialize
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::Initialize)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x2622460;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "Initialize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.Shutdown
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::Shutdown)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x2622588;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "Shutdown",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.GetInitialized
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GetInitialized)> {
  constexpr static std::size_t size = 0xd4;
  constexpr static std::size_t addrs = 0x26226b0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "GetInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.Update
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::Update)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x2622800;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "Update",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.GetMrcActivationMode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GetMrcActivationMode)> {
  constexpr static std::size_t size = 0xcc;
  constexpr static std::size_t addrs = 0x2622928;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "GetMrcActivationMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.SetMrcActivationMode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetMrcActivationMode)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x2622a70;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetMrcActivationMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.SetPlatformInitialized
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetPlatformInitialized)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x2622bb4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetPlatformInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.GetPlatformCameraMode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GetPlatformCameraMode)> {
  constexpr static std::size_t size = 0xcc;
  constexpr static std::size_t addrs = 0x2622cdc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "GetPlatformCameraMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.SetPlatformCameraMode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetPlatformCameraMode)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x2622e24;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetPlatformCameraMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.IsMrcEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::IsMrcEnabled)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x2622f68;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "IsMrcEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.IsMrcActivated
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::IsMrcActivated)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x26230b4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "IsMrcActivated",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.UseMrcDebugCamera
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::UseMrcDebugCamera)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x2623200;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "UseMrcDebugCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.SetMrcInputVideoBufferType
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetMrcInputVideoBufferType)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x262334c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetMrcInputVideoBufferType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.GetMrcInputVideoBufferType
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GetMrcInputVideoBufferType)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x2623490;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "GetMrcInputVideoBufferType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.SetMrcFrameSize
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int32_t, int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetMrcFrameSize)> {
  constexpr static std::size_t size = 0xd8;
  constexpr static std::size_t addrs = 0x26235d4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetMrcFrameSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.GetMrcFrameSize
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(ByRef<int32_t>, ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GetMrcFrameSize)> {
  constexpr static std::size_t size = 0xe0;
  constexpr static std::size_t addrs = 0x2623730;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "GetMrcFrameSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.SetMrcAudioSampleRate
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetMrcAudioSampleRate)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x2623894;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetMrcAudioSampleRate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.GetMrcAudioSampleRate
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int32_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GetMrcAudioSampleRate)> {
  constexpr static std::size_t size = 0xc4;
  constexpr static std::size_t addrs = 0x26239d8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "GetMrcAudioSampleRate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.SetMrcFrameImageFlipped
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetMrcFrameImageFlipped)> {
  constexpr static std::size_t size = 0xcc;
  constexpr static std::size_t addrs = 0x2623b18;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetMrcFrameImageFlipped",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.GetMrcFrameImageFlipped
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GetMrcFrameImageFlipped)> {
  constexpr static std::size_t size = 0xcc;
  constexpr static std::size_t addrs = 0x2623c60;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "GetMrcFrameImageFlipped",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.EncodeMrcFrame
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::cordl_internals::intptr_t, ::cordl_internals::intptr_t, ::ArrayW<float_t>, int32_t, int32_t, double_t, double_t, ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::EncodeMrcFrame)> {
  constexpr static std::size_t size = 0x354;
  constexpr static std::size_t addrs = 0x2623da8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "EncodeMrcFrame",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<float_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.EncodeMrcFrame
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::RenderTexture, ::ArrayW<float_t>, int32_t, int32_t, double_t, double_t, ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::EncodeMrcFrame)> {
  constexpr static std::size_t size = 0x4e8;
  constexpr static std::size_t addrs = 0x262440c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "EncodeMrcFrame",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::RenderTexture>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<float_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.SyncMrcFrame
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SyncMrcFrame)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x26248f4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SyncMrcFrame",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.SetAvailableQueueIndexVulkan
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetAvailableQueueIndexVulkan)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x2624a38;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetAvailableQueueIndexVulkan",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.SetMrcHeadsetControllerPose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetMrcHeadsetControllerPose)> {
  constexpr static std::size_t size = 0x14c;
  constexpr static std::size_t addrs = 0x2624b7c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetMrcHeadsetControllerPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media.IsCastingToRemoteClient
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::IsCastingToRemoteClient)> {
  constexpr static std::size_t size = 0xd4;
  constexpr static std::size_t addrs = 0x2624d8c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "IsCastingToRemoteClient",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Media._ctor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GlobalNamespace__OVRPlugin__Media::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Media::_ctor)> {
  constexpr static std::size_t size = 0x8;
  constexpr static std::size_t addrs = 0x2624edc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__Media::__set_cachedTexture(UnityEngine::Texture2D value)  {
::cordl_internals::setStaticField<UnityEngine::Texture2D, "cachedTexture", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get>(std::forward<UnityEngine::Texture2D>(value));
}
 UnityEngine::Texture2D GlobalNamespace::GlobalNamespace__OVRPlugin__Media::__get_cachedTexture()  {
return ::cordl_internals::getStaticField<UnityEngine::Texture2D, "cachedTexture", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get>();
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::Initialize()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "Initialize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::Shutdown()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "Shutdown",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GetInitialized()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "GetInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::Update()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "Update",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GetMrcActivationMode()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "GetMrcActivationMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetMrcActivationMode(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode mode)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetMrcActivationMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, mode);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetPlatformInitialized()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetPlatformInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GetPlatformCameraMode()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "GetPlatformCameraMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetPlatformCameraMode(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode mode)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetPlatformCameraMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, mode);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::IsMrcEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "IsMrcEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::IsMrcActivated()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "IsMrcActivated",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::UseMrcDebugCamera()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "UseMrcDebugCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetMrcInputVideoBufferType(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType videoBufferType)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetMrcInputVideoBufferType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, videoBufferType);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GetMrcInputVideoBufferType()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "GetMrcInputVideoBufferType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetMrcFrameSize(int32_t frameWidth, int32_t frameHeight)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetMrcFrameSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, frameWidth, frameHeight);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GetMrcFrameSize(ByRef<int32_t> frameWidth, ByRef<int32_t> frameHeight)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "GetMrcFrameSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, frameWidth, frameHeight);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetMrcAudioSampleRate(int32_t sampleRate)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetMrcAudioSampleRate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, sampleRate);
}
 int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GetMrcAudioSampleRate()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "GetMrcAudioSampleRate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<int32_t, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetMrcFrameImageFlipped(bool imageFlipped)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetMrcFrameImageFlipped",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, imageFlipped);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GetMrcFrameImageFlipped()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "GetMrcFrameImageFlipped",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::EncodeMrcFrame(::cordl_internals::intptr_t textureHandle, ::cordl_internals::intptr_t fgTextureHandle, ::ArrayW<float_t> audioData, int32_t audioFrames, int32_t audioChannels, double_t timestamp, double_t poseTime, ByRef<int32_t> outSyncId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "EncodeMrcFrame",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<float_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, textureHandle, fgTextureHandle, audioData, audioFrames, audioChannels, timestamp, poseTime, outSyncId);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::EncodeMrcFrame(UnityEngine::RenderTexture frame, ::ArrayW<float_t> audioData, int32_t audioFrames, int32_t audioChannels, double_t timestamp, double_t poseTime, ByRef<int32_t> outSyncId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "EncodeMrcFrame",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::RenderTexture>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<float_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, frame, audioData, audioFrames, audioChannels, timestamp, poseTime, outSyncId);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SyncMrcFrame(int32_t syncId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SyncMrcFrame",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, syncId);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetAvailableQueueIndexVulkan(uint32_t queueIndexVk)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetAvailableQueueIndexVulkan",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, queueIndexVk);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::SetMrcHeadsetControllerPose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef headsetPose, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef leftControllerPose, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef rightControllerPose)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "SetMrcHeadsetControllerPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, headsetPose, leftControllerPose, rightControllerPose);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Media::IsCastingToRemoteClient()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            "IsCastingToRemoteClient",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
// Ctor Parameters []
 GlobalNamespace::GlobalNamespace__OVRPlugin__Media::GlobalNamespace__OVRPlugin__Media()  : ::bs_hook::Il2CppWrapperType(THROW_UNLESS(::il2cpp_utils::New<GlobalNamespace__OVRPlugin__Media>())) {}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__Media::_ctor()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Media>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(const_cast<void*>(instance), ___internal_method);
}
// Ctor Parameters [CppParam { name: "uuidCapacityInput", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "uuidCountOutput", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "uuids", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceContainerInternal::GlobalNamespace__OVRPlugin__SpaceContainerInternal(int32_t uuidCapacityInput, int32_t uuidCountOutput, ::cordl_internals::intptr_t uuids) noexcept : ::bs_hook::ValueTypeWrapper() {this->uuidCapacityInput = uuidCapacityInput;
this->uuidCountOutput = uuidCountOutput;
this->uuids = uuids;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceContainerInternal::__set_uuidCapacityInput(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceContainerInternal::__get_uuidCapacityInput() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceContainerInternal::__set_uuidCountOutput(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x4>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceContainerInternal::__get_uuidCountOutput() const {
return ::cordl_internals::getInstanceField<int32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceContainerInternal::__set_uuids(::cordl_internals::intptr_t value)  {
::cordl_internals::setInstanceField<::cordl_internals::intptr_t, 0x8>(this->__instance, std::forward<::cordl_internals::intptr_t>(value));
}
constexpr ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceContainerInternal::__get_uuids() const {
return ::cordl_internals::getInstanceField<::cordl_internals::intptr_t, 0x8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "byteCapacityInput", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "byteCountOutput", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "labels", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal(int32_t byteCapacityInput, int32_t byteCountOutput, ::cordl_internals::intptr_t labels) noexcept : ::bs_hook::ValueTypeWrapper() {this->byteCapacityInput = byteCapacityInput;
this->byteCountOutput = byteCountOutput;
this->labels = labels;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal::__set_byteCapacityInput(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal::__get_byteCapacityInput() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal::__set_byteCountOutput(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x4>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal::__get_byteCountOutput() const {
return ::cordl_internals::getInstanceField<int32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal::__set_labels(::cordl_internals::intptr_t value)  {
::cordl_internals::setInstanceField<::cordl_internals::intptr_t, 0x8>(this->__instance, std::forward<::cordl_internals::intptr_t>(value));
}
constexpr ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal::__get_labels() const {
return ::cordl_internals::getInstanceField<::cordl_internals::intptr_t, 0x8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "floorUuid", ty: "System::Guid", modifiers: "", def_value: Some("{}") }, CppParam { name: "ceilingUuid", ty: "System::Guid", modifiers: "", def_value: Some("{}") }, CppParam { name: "wallUuids", ty: "::ArrayW<System::Guid>", modifiers: "", def_value: Some("csnull") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayout::GlobalNamespace__OVRPlugin__RoomLayout(System::Guid floorUuid, System::Guid ceilingUuid, ::ArrayW<System::Guid> wallUuids) noexcept : ::bs_hook::ValueTypeWrapper() {this->floorUuid = floorUuid;
this->ceilingUuid = ceilingUuid;
this->wallUuids = wallUuids;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayout::__set_floorUuid(System::Guid value)  {
::cordl_internals::setInstanceField<System::Guid, 0x0>(this->__instance, std::forward<System::Guid>(value));
}
constexpr System::Guid GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayout::__get_floorUuid() const {
return ::cordl_internals::getInstanceField<System::Guid, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayout::__set_ceilingUuid(System::Guid value)  {
::cordl_internals::setInstanceField<System::Guid, 0x10>(this->__instance, std::forward<System::Guid>(value));
}
constexpr System::Guid GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayout::__get_ceilingUuid() const {
return ::cordl_internals::getInstanceField<System::Guid, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayout::__set_wallUuids(::ArrayW<System::Guid> value)  {
::cordl_internals::setInstanceField<::ArrayW<System::Guid>, 0x20>(this->__instance, std::forward<::ArrayW<System::Guid>>(value));
}
constexpr ::ArrayW<System::Guid> GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayout::__get_wallUuids() const {
return ::cordl_internals::getInstanceField<::ArrayW<System::Guid>, 0x20>(this->__instance);
}
// Ctor Parameters [CppParam { name: "floorUuid", ty: "System::Guid", modifiers: "", def_value: Some("{}") }, CppParam { name: "ceilingUuid", ty: "System::Guid", modifiers: "", def_value: Some("{}") }, CppParam { name: "wallUuidCapacityInput", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "wallUuidCountOutput", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "wallUuids", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal::GlobalNamespace__OVRPlugin__RoomLayoutInternal(System::Guid floorUuid, System::Guid ceilingUuid, int32_t wallUuidCapacityInput, int32_t wallUuidCountOutput, ::cordl_internals::intptr_t wallUuids) noexcept : ::bs_hook::ValueTypeWrapper() {this->floorUuid = floorUuid;
this->ceilingUuid = ceilingUuid;
this->wallUuidCapacityInput = wallUuidCapacityInput;
this->wallUuidCountOutput = wallUuidCountOutput;
this->wallUuids = wallUuids;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal::__set_floorUuid(System::Guid value)  {
::cordl_internals::setInstanceField<System::Guid, 0x0>(this->__instance, std::forward<System::Guid>(value));
}
constexpr System::Guid GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal::__get_floorUuid() const {
return ::cordl_internals::getInstanceField<System::Guid, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal::__set_ceilingUuid(System::Guid value)  {
::cordl_internals::setInstanceField<System::Guid, 0x10>(this->__instance, std::forward<System::Guid>(value));
}
constexpr System::Guid GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal::__get_ceilingUuid() const {
return ::cordl_internals::getInstanceField<System::Guid, 0x10>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal::__set_wallUuidCapacityInput(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x20>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal::__get_wallUuidCapacityInput() const {
return ::cordl_internals::getInstanceField<int32_t, 0x20>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal::__set_wallUuidCountOutput(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x24>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal::__get_wallUuidCountOutput() const {
return ::cordl_internals::getInstanceField<int32_t, 0x24>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal::__set_wallUuids(::cordl_internals::intptr_t value)  {
::cordl_internals::setInstanceField<::cordl_internals::intptr_t, 0x28>(this->__instance, std::forward<::cordl_internals::intptr_t>(value));
}
constexpr ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal::__get_wallUuids() const {
return ::cordl_internals::getInstanceField<::cordl_internals::intptr_t, 0x28>(this->__instance);
}
// Ctor Parameters [CppParam { name: "vertexCapacityInput", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "vertexCountOutput", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "vertices", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal(int32_t vertexCapacityInput, int32_t vertexCountOutput, ::cordl_internals::intptr_t vertices) noexcept : ::bs_hook::ValueTypeWrapper() {this->vertexCapacityInput = vertexCapacityInput;
this->vertexCountOutput = vertexCountOutput;
this->vertices = vertices;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal::__set_vertexCapacityInput(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal::__get_vertexCapacityInput() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal::__set_vertexCountOutput(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x4>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal::__get_vertexCountOutput() const {
return ::cordl_internals::getInstanceField<int32_t, 0x4>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal::__set_vertices(::cordl_internals::intptr_t value)  {
::cordl_internals::setInstanceField<::cordl_internals::intptr_t, 0x8>(this->__instance, std::forward<::cordl_internals::intptr_t>(value));
}
constexpr ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal::__get_vertices() const {
return ::cordl_internals::getInstanceField<::cordl_internals::intptr_t, 0x8>(this->__instance);
}
// Ctor Parameters [CppParam { name: "requestByteCount", ty: "int32_t", modifiers: "", def_value: Some("{}") }, CppParam { name: "request", ty: "::StringW", modifiers: "", def_value: Some("csnull") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal::GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal(int32_t requestByteCount, ::StringW request) noexcept : ::bs_hook::ValueTypeWrapper() {this->requestByteCount = requestByteCount;
this->request = request;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal::__set_requestByteCount(int32_t value)  {
::cordl_internals::setInstanceField<int32_t, 0x0>(this->__instance, std::forward<int32_t>(value));
}
constexpr int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal::__get_requestByteCount() const {
return ::cordl_internals::getInstanceField<int32_t, 0x0>(this->__instance);
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal::__set_request(::StringW value)  {
::cordl_internals::setInstanceField<::StringW, 0x8>(this->__instance, std::forward<::StringW>(value));
}
constexpr ::StringW GlobalNamespace::GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal::__get_request() const {
return ::cordl_internals::getInstanceField<::StringW, 0x8>(this->__instance);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx.LoadKtxFromMemory
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::cordl_internals::intptr_t (*)(::cordl_internals::intptr_t, uint32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::LoadKtxFromMemory)> {
  constexpr static std::size_t size = 0x174;
  constexpr static std::size_t addrs = 0x2624ee4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            "LoadKtxFromMemory",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx.GetKtxTextureWidth
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint32_t (*)(::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::GetKtxTextureWidth)> {
  constexpr static std::size_t size = 0x13c;
  constexpr static std::size_t addrs = 0x26250ec;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            "GetKtxTextureWidth",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx.GetKtxTextureHeight
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint32_t (*)(::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::GetKtxTextureHeight)> {
  constexpr static std::size_t size = 0x13c;
  constexpr static std::size_t addrs = 0x26252ac;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            "GetKtxTextureHeight",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx.TranscodeKtxTexture
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::cordl_internals::intptr_t, uint32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::TranscodeKtxTexture)> {
  constexpr static std::size_t size = 0x13c;
  constexpr static std::size_t addrs = 0x262546c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            "TranscodeKtxTexture",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx.GetKtxTextureSize
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint32_t (*)(::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::GetKtxTextureSize)> {
  constexpr static std::size_t size = 0x13c;
  constexpr static std::size_t addrs = 0x262562c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            "GetKtxTextureSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx.GetKtxTextureData
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::cordl_internals::intptr_t, ::cordl_internals::intptr_t, uint32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::GetKtxTextureData)> {
  constexpr static std::size_t size = 0x144;
  constexpr static std::size_t addrs = 0x26257ec;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            "GetKtxTextureData",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx.DestroyKtxTexture
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::DestroyKtxTexture)> {
  constexpr static std::size_t size = 0x12c;
  constexpr static std::size_t addrs = 0x26259c4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            "DestroyKtxTexture",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx._ctor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::_ctor)> {
  constexpr static std::size_t size = 0x8;
  constexpr static std::size_t addrs = 0x2625b6c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
 ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::LoadKtxFromMemory(::cordl_internals::intptr_t dataPtr, uint32_t length)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            "LoadKtxFromMemory",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<::cordl_internals::intptr_t, false>(nullptr, ___internal_method, dataPtr, length);
}
 uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::GetKtxTextureWidth(::cordl_internals::intptr_t texture)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            "GetKtxTextureWidth",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<uint32_t, false>(nullptr, ___internal_method, texture);
}
 uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::GetKtxTextureHeight(::cordl_internals::intptr_t texture)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            "GetKtxTextureHeight",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<uint32_t, false>(nullptr, ___internal_method, texture);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::TranscodeKtxTexture(::cordl_internals::intptr_t texture, uint32_t format)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            "TranscodeKtxTexture",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, texture, format);
}
 uint32_t GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::GetKtxTextureSize(::cordl_internals::intptr_t texture)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            "GetKtxTextureSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<uint32_t, false>(nullptr, ___internal_method, texture);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::GetKtxTextureData(::cordl_internals::intptr_t texture, ::cordl_internals::intptr_t textureData, uint32_t bufferSize)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            "GetKtxTextureData",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, texture, textureData, bufferSize);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::DestroyKtxTexture(::cordl_internals::intptr_t texture)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            "DestroyKtxTexture",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, texture);
}
// Ctor Parameters []
 GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::GlobalNamespace__OVRPlugin__Ktx()  : ::bs_hook::Il2CppWrapperType(THROW_UNLESS(::il2cpp_utils::New<GlobalNamespace__OVRPlugin__Ktx>())) {}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx::_ctor()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(const_cast<void*>(instance), ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR.SetClientVersion
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::SetClientVersion)> {
  constexpr static std::size_t size = 0xf0;
  constexpr static std::size_t addrs = 0x2625b74;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "SetClientVersion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR.HookGetInstanceProcAddr
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::cordl_internals::intptr_t (*)(::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::HookGetInstanceProcAddr)> {
  constexpr static std::size_t size = 0xc4;
  constexpr static std::size_t addrs = 0x2625cf8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "HookGetInstanceProcAddr",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR.OnInstanceCreate
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnInstanceCreate)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x2625e38;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnInstanceCreate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR.OnInstanceDestroy
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnInstanceDestroy)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x2625f7c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnInstanceDestroy",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR.OnSessionCreate
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnSessionCreate)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x26260b8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnSessionCreate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR.OnAppSpaceChange
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnAppSpaceChange)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x26261f4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnAppSpaceChange",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR.OnSessionStateChange
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int32_t, int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnSessionStateChange)> {
  constexpr static std::size_t size = 0xd4;
  constexpr static std::size_t addrs = 0x2626330;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnSessionStateChange",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR.OnSessionBegin
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnSessionBegin)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x2626488;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnSessionBegin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR.OnSessionEnd
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnSessionEnd)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x26265c4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnSessionEnd",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR.OnSessionExiting
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnSessionExiting)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x2626700;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnSessionExiting",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR.OnSessionDestroy
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnSessionDestroy)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x262683c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnSessionDestroy",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR._ctor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::_ctor)> {
  constexpr static std::size_t size = 0x8;
  constexpr static std::size_t addrs = 0x2626978;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::__set_Enabled(bool value)  {
::cordl_internals::setStaticField<bool, "Enabled", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get>(std::forward<bool>(value));
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::__get_Enabled()  {
return ::cordl_internals::getStaticField<bool, "Enabled", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get>();
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::SetClientVersion()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "SetClientVersion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method);
}
 ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::HookGetInstanceProcAddr(::cordl_internals::intptr_t func)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "HookGetInstanceProcAddr",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<::cordl_internals::intptr_t, false>(nullptr, ___internal_method, func);
}
 bool GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnInstanceCreate(uint64_t xrInstance)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnInstanceCreate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, xrInstance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnInstanceDestroy(uint64_t xrInstance)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnInstanceDestroy",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, xrInstance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnSessionCreate(uint64_t xrSession)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnSessionCreate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, xrSession);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnAppSpaceChange(uint64_t xrSpace)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnAppSpaceChange",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, xrSpace);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnSessionStateChange(int32_t oldState, int32_t newState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnSessionStateChange",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, oldState, newState);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnSessionBegin(uint64_t xrSession)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnSessionBegin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, xrSession);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnSessionEnd(uint64_t xrSession)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnSessionEnd",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, xrSession);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnSessionExiting(uint64_t xrSession)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnSessionExiting",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, xrSession);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::OnSessionDestroy(uint64_t xrSession)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            "OnSessionDestroy",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, xrSession);
}
// Ctor Parameters []
 GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::GlobalNamespace__OVRPlugin__UnityOpenXR()  : ::bs_hook::Il2CppWrapperType(THROW_UNLESS(::il2cpp_utils::New<GlobalNamespace__OVRPlugin__UnityOpenXR>())) {}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR::_ctor()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(const_cast<void*>(instance), ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_0.ovrp_GetEyeTextureSize
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Eye)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_0::ovrp_GetEyeTextureSize)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2626980;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_0>::get(),
                            "ovrp_GetEyeTextureSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Eye>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_0::ovrp_GetEyeTextureSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Eye eyeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_0>::get(),
                            "ovrp_GetEyeTextureSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Eye>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, false>(nullptr, ___internal_method, eyeId);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_1.ovrp_SetOverlayQuad2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, ::cordl_internals::intptr_t, ::cordl_internals::intptr_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_1::ovrp_SetOverlayQuad2)> {
  constexpr static std::size_t size = 0xe4;
  constexpr static std::size_t addrs = 0x2626a80;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_1>::get(),
                            "ovrp_SetOverlayQuad2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_1::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_1>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_1::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_1>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_1::ovrp_SetOverlayQuad2(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool onTop, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool headLocked, ::cordl_internals::intptr_t texture, ::cordl_internals::intptr_t device, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef pose, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f scale)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_1>::get(),
                            "ovrp_SetOverlayQuad2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, onTop, headLocked, texture, device, pose, scale);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2.ovrp_GetNodePose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2::ovrp_GetNodePose)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2626be8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2>::get(),
                            "ovrp_GetNodePose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2.ovrp_SetControllerVibration
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(uint32_t, float_t, float_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2::ovrp_SetControllerVibration)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x2626c6c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2>::get(),
                            "ovrp_SetControllerVibration",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2::ovrp_GetNodePose(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2>::get(),
                            "ovrp_GetNodePose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, false>(nullptr, ___internal_method, nodeId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2::ovrp_SetControllerVibration(uint32_t controllerMask, float_t frequency, float_t amplitude)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2>::get(),
                            "ovrp_SetControllerVibration",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, controllerMask, frequency, amplitude);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3.ovrp_GetNodeVelocity
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3::ovrp_GetNodeVelocity)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2626d84;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3>::get(),
                            "ovrp_GetNodeVelocity",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3.ovrp_GetNodeAcceleration
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3::ovrp_GetNodeAcceleration)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2626e08;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3>::get(),
                            "ovrp_GetNodeAcceleration",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3::ovrp_GetNodeVelocity(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3>::get(),
                            "ovrp_GetNodeVelocity",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, false>(nullptr, ___internal_method, nodeId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3::ovrp_GetNodeAcceleration(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3>::get(),
                            "ovrp_GetNodeAcceleration",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, false>(nullptr, ___internal_method, nodeId);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_5_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_5_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_5_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_5_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0.ovrp_GetTrackingOriginType
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0::ovrp_GetTrackingOriginType)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2626f94;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0>::get(),
                            "ovrp_GetTrackingOriginType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0.ovrp_SetTrackingOriginType
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0::ovrp_SetTrackingOriginType)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2626ffc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0>::get(),
                            "ovrp_SetTrackingOriginType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0.ovrp_GetTrackingCalibratedOrigin
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0::ovrp_GetTrackingCalibratedOrigin)> {
  constexpr static std::size_t size = 0x74;
  constexpr static std::size_t addrs = 0x2627078;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0>::get(),
                            "ovrp_GetTrackingCalibratedOrigin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0.ovrp_RecenterTrackingOrigin
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(uint32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0::ovrp_RecenterTrackingOrigin)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x26270ec;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0>::get(),
                            "ovrp_RecenterTrackingOrigin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0::ovrp_GetTrackingOriginType()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0>::get(),
                            "ovrp_GetTrackingOriginType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0::ovrp_SetTrackingOriginType(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin originType)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0>::get(),
                            "ovrp_SetTrackingOriginType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, originType);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0::ovrp_GetTrackingCalibratedOrigin()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0>::get(),
                            "ovrp_GetTrackingCalibratedOrigin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0::ovrp_RecenterTrackingOrigin(uint32_t flags)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0>::get(),
                            "ovrp_RecenterTrackingOrigin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, flags);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetInitialized
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetInitialized)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x26271ec;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0._ovrp_GetVersion
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::cordl_internals::intptr_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::_ovrp_GetVersion)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2627254;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "_ovrp_GetVersion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetVersion
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetVersion)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x26272bc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetVersion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0._ovrp_GetNativeSDKVersion
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::cordl_internals::intptr_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::_ovrp_GetNativeSDKVersion)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2627340;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "_ovrp_GetNativeSDKVersion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetNativeSDKVersion
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetNativeSDKVersion)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x26273a8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetNativeSDKVersion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetAudioOutId
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::cordl_internals::intptr_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetAudioOutId)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x262742c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetAudioOutId",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetAudioInId
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::cordl_internals::intptr_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetAudioInId)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2627494;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetAudioInId",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetEyeTextureScale
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetEyeTextureScale)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x26274fc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetEyeTextureScale",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_SetEyeTextureScale
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(float_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetEyeTextureScale)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2627560;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetEyeTextureScale",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetTrackingOrientationSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetTrackingOrientationSupported)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x26275dc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetTrackingOrientationSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetTrackingOrientationEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetTrackingOrientationEnabled)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2627644;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetTrackingOrientationEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_SetTrackingOrientationEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetTrackingOrientationEnabled)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x26276ac;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetTrackingOrientationEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetTrackingPositionSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetTrackingPositionSupported)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2627728;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetTrackingPositionSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetTrackingPositionEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetTrackingPositionEnabled)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2627790;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetTrackingPositionEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_SetTrackingPositionEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetTrackingPositionEnabled)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x26277f8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetTrackingPositionEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetNodePresent
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetNodePresent)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2627874;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetNodePresent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetNodeOrientationTracked
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetNodeOrientationTracked)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x26278f0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetNodeOrientationTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetNodePositionTracked
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetNodePositionTracked)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262796c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetNodePositionTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetNodeFrustum
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetNodeFrustum)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x26279e8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetNodeFrustum",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetControllerState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState (*)(uint32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetControllerState)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2627a64;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetControllerState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetSystemCpuLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int32_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemCpuLevel)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2627ae8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemCpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_SetSystemCpuLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetSystemCpuLevel)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2627b50;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetSystemCpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetSystemGpuLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int32_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemGpuLevel)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2627bcc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemGpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_SetSystemGpuLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetSystemGpuLevel)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2627c34;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetSystemGpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetSystemPowerSavingMode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemPowerSavingMode)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2627cb0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemPowerSavingMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetSystemDisplayFrequency
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemDisplayFrequency)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x2627d18;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemDisplayFrequency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetSystemVSyncCount
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int32_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemVSyncCount)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2627d7c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemVSyncCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetSystemVolume
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemVolume)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x2627de4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemVolume",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetSystemBatteryStatus
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemBatteryStatus)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2627e48;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemBatteryStatus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetSystemBatteryLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemBatteryLevel)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x2627eb0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemBatteryLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetSystemBatteryTemperature
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemBatteryTemperature)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x2627f14;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemBatteryTemperature",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0._ovrp_GetSystemProductName
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::cordl_internals::intptr_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::_ovrp_GetSystemProductName)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2627f78;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "_ovrp_GetSystemProductName",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetSystemProductName
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemProductName)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2627fe0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemProductName",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_ShowSystemUI
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_ShowSystemUI)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2628064;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_ShowSystemUI",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetAppMonoscopic
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetAppMonoscopic)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x26280e0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetAppMonoscopic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_SetAppMonoscopic
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetAppMonoscopic)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2628148;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetAppMonoscopic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetAppHasVrFocus
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetAppHasVrFocus)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x26281c4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetAppHasVrFocus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetAppShouldQuit
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetAppShouldQuit)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x262822c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetAppShouldQuit",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetAppShouldRecenter
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetAppShouldRecenter)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2628294;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetAppShouldRecenter",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0._ovrp_GetAppLatencyTimings
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::cordl_internals::intptr_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::_ovrp_GetAppLatencyTimings)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x26282fc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "_ovrp_GetAppLatencyTimings",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetAppLatencyTimings
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetAppLatencyTimings)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2628364;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetAppLatencyTimings",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetUserPresent
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetUserPresent)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x26283e8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetUserPresent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetUserIPD
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetUserIPD)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x2628450;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetUserIPD",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_SetUserIPD
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(float_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetUserIPD)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x26284b4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetUserIPD",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetUserEyeDepth
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetUserEyeDepth)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x2628530;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetUserEyeDepth",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_SetUserEyeDepth
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(float_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetUserEyeDepth)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2628594;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetUserEyeDepth",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_GetUserEyeHeight
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetUserEyeHeight)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x2628610;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetUserEyeHeight",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0.ovrp_SetUserEyeHeight
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(float_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetUserEyeHeight)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2628674;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetUserEyeHeight",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetInitialized()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::_ovrp_GetVersion()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "_ovrp_GetVersion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::cordl_internals::intptr_t, false>(nullptr, ___internal_method);
}
 ::StringW GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetVersion()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetVersion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(nullptr, ___internal_method);
}
 ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::_ovrp_GetNativeSDKVersion()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "_ovrp_GetNativeSDKVersion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::cordl_internals::intptr_t, false>(nullptr, ___internal_method);
}
 ::StringW GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetNativeSDKVersion()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetNativeSDKVersion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(nullptr, ___internal_method);
}
 ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetAudioOutId()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetAudioOutId",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::cordl_internals::intptr_t, false>(nullptr, ___internal_method);
}
 ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetAudioInId()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetAudioInId",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::cordl_internals::intptr_t, false>(nullptr, ___internal_method);
}
 float_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetEyeTextureScale()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetEyeTextureScale",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetEyeTextureScale(float_t value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetEyeTextureScale",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetTrackingOrientationSupported()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetTrackingOrientationSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetTrackingOrientationEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetTrackingOrientationEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetTrackingOrientationEnabled(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetTrackingOrientationEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetTrackingPositionSupported()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetTrackingPositionSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetTrackingPositionEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetTrackingPositionEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetTrackingPositionEnabled(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetTrackingPositionEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetNodePresent(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetNodePresent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, nodeId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetNodeOrientationTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetNodeOrientationTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, nodeId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetNodePositionTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetNodePositionTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, nodeId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetNodeFrustum(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetNodeFrustum",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf, false>(nullptr, ___internal_method, nodeId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetControllerState(uint32_t controllerMask)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetControllerState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState, false>(nullptr, ___internal_method, controllerMask);
}
 int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemCpuLevel()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemCpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<int32_t, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetSystemCpuLevel(int32_t value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetSystemCpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, value);
}
 int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemGpuLevel()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemGpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<int32_t, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetSystemGpuLevel(int32_t value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetSystemGpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemPowerSavingMode()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemPowerSavingMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 float_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemDisplayFrequency()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemDisplayFrequency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemVSyncCount()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemVSyncCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<int32_t, false>(nullptr, ___internal_method);
}
 float_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemVolume()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemVolume",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemBatteryStatus()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemBatteryStatus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus, false>(nullptr, ___internal_method);
}
 float_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemBatteryLevel()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemBatteryLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 float_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemBatteryTemperature()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemBatteryTemperature",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::_ovrp_GetSystemProductName()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "_ovrp_GetSystemProductName",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::cordl_internals::intptr_t, false>(nullptr, ___internal_method);
}
 ::StringW GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetSystemProductName()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetSystemProductName",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_ShowSystemUI(GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI ui)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_ShowSystemUI",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, ui);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetAppMonoscopic()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetAppMonoscopic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetAppMonoscopic(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetAppMonoscopic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetAppHasVrFocus()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetAppHasVrFocus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetAppShouldQuit()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetAppShouldQuit",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetAppShouldRecenter()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetAppShouldRecenter",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::_ovrp_GetAppLatencyTimings()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "_ovrp_GetAppLatencyTimings",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::cordl_internals::intptr_t, false>(nullptr, ___internal_method);
}
 ::StringW GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetAppLatencyTimings()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetAppLatencyTimings",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetUserPresent()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetUserPresent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 float_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetUserIPD()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetUserIPD",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetUserIPD(float_t value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetUserIPD",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, value);
}
 float_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetUserEyeDepth()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetUserEyeDepth",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetUserEyeDepth(float_t value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetUserEyeDepth",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, value);
}
 float_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_GetUserEyeHeight()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_GetUserEyeHeight",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0::ovrp_SetUserEyeHeight(float_t value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0>::get(),
                            "ovrp_SetUserEyeHeight",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, value);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0.ovrp_SetSystemVSyncCount
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0::ovrp_SetSystemVSyncCount)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2628774;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0>::get(),
                            "ovrp_SetSystemVSyncCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0.ovrpi_SetTrackingCalibratedOrigin
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0::ovrpi_SetTrackingCalibratedOrigin)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x26287f0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0>::get(),
                            "ovrpi_SetTrackingCalibratedOrigin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0::ovrp_SetSystemVSyncCount(int32_t vsyncCount)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0>::get(),
                            "ovrp_SetSystemVSyncCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, vsyncCount);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0::ovrpi_SetTrackingCalibratedOrigin()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0>::get(),
                            "ovrpi_SetTrackingCalibratedOrigin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0.ovrp_GetEyeOcclusionMeshEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0::ovrp_GetEyeOcclusionMeshEnabled)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x26288dc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0>::get(),
                            "ovrp_GetEyeOcclusionMeshEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0.ovrp_SetEyeOcclusionMeshEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0::ovrp_SetEyeOcclusionMeshEnabled)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2628944;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0>::get(),
                            "ovrp_SetEyeOcclusionMeshEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0.ovrp_GetSystemHeadphonesPresent
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0::ovrp_GetSystemHeadphonesPresent)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x26289c0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0>::get(),
                            "ovrp_GetSystemHeadphonesPresent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0::ovrp_GetEyeOcclusionMeshEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0>::get(),
                            "ovrp_GetEyeOcclusionMeshEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0::ovrp_SetEyeOcclusionMeshEnabled(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0>::get(),
                            "ovrp_SetEyeOcclusionMeshEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0::ovrp_GetSystemHeadphonesPresent()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0>::get(),
                            "ovrp_GetSystemHeadphonesPresent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_5_0.ovrp_GetSystemRegion
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_5_0::ovrp_GetSystemRegion)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2628aac;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_5_0>::get(),
                            "ovrp_GetSystemRegion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_5_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_5_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_5_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_5_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_5_0::ovrp_GetSystemRegion()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_5_0>::get(),
                            "ovrp_GetSystemRegion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion, false>(nullptr, ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0.ovrp_GetTrackingIPDEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_GetTrackingIPDEnabled)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2628b98;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_GetTrackingIPDEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0.ovrp_SetTrackingIPDEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_SetTrackingIPDEnabled)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2628c00;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_SetTrackingIPDEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0.ovrp_GetControllerHapticsDesc
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc (*)(uint32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_GetControllerHapticsDesc)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2628c7c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_GetControllerHapticsDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0.ovrp_GetControllerHapticsState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState (*)(uint32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_GetControllerHapticsState)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2628d00;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_GetControllerHapticsState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0.ovrp_SetControllerHaptics
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(uint32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_SetControllerHaptics)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x2628d7c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_SetControllerHaptics",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0.ovrp_SetOverlayQuad3
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(uint32_t, ::cordl_internals::intptr_t, ::cordl_internals::intptr_t, ::cordl_internals::intptr_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_SetOverlayQuad3)> {
  constexpr static std::size_t size = 0xec;
  constexpr static std::size_t addrs = 0x2628e10;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_SetOverlayQuad3",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0.ovrp_GetEyeRecommendedResolutionScale
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_GetEyeRecommendedResolutionScale)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x2628efc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_GetEyeRecommendedResolutionScale",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0.ovrp_GetAppCpuStartToGpuEndTime
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_GetAppCpuStartToGpuEndTime)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x2628f60;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_GetAppCpuStartToGpuEndTime",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0.ovrp_GetSystemRecommendedMSAALevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int32_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_GetSystemRecommendedMSAALevel)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2628fc4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_GetSystemRecommendedMSAALevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_GetTrackingIPDEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_GetTrackingIPDEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_SetTrackingIPDEnabled(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_SetTrackingIPDEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_GetControllerHapticsDesc(uint32_t controllerMask)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_GetControllerHapticsDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc, false>(nullptr, ___internal_method, controllerMask);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_GetControllerHapticsState(uint32_t controllerMask)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_GetControllerHapticsState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState, false>(nullptr, ___internal_method, controllerMask);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_SetControllerHaptics(uint32_t controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer hapticsBuffer)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_SetControllerHaptics",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, controllerMask, hapticsBuffer);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_SetOverlayQuad3(uint32_t flags, ::cordl_internals::intptr_t textureLeft, ::cordl_internals::intptr_t textureRight, ::cordl_internals::intptr_t device, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef pose, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f scale, int32_t layerIndex)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_SetOverlayQuad3",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, flags, textureLeft, textureRight, device, pose, scale, layerIndex);
}
 float_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_GetEyeRecommendedResolutionScale()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_GetEyeRecommendedResolutionScale",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 float_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_GetAppCpuStartToGpuEndTime()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_GetAppCpuStartToGpuEndTime",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 int32_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0::ovrp_GetSystemRecommendedMSAALevel()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0>::get(),
                            "ovrp_GetSystemRecommendedMSAALevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<int32_t, false>(nullptr, ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0.ovrp_GetAppChromaticCorrection
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0::ovrp_GetAppChromaticCorrection)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x26290b0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0>::get(),
                            "ovrp_GetAppChromaticCorrection",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0.ovrp_SetAppChromaticCorrection
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0::ovrp_SetAppChromaticCorrection)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2629118;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0>::get(),
                            "ovrp_SetAppChromaticCorrection",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0::ovrp_GetAppChromaticCorrection()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0>::get(),
                            "ovrp_GetAppChromaticCorrection",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0::ovrp_SetAppChromaticCorrection(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0>::get(),
                            "ovrp_SetAppChromaticCorrection",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, value);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0.ovrp_GetBoundaryConfigured
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_GetBoundaryConfigured)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2629218;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_GetBoundaryConfigured",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0.ovrp_TestBoundaryNode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node, GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_TestBoundaryNode)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x2629280;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_TestBoundaryNode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0.ovrp_TestBoundaryPoint
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_TestBoundaryPoint)> {
  constexpr static std::size_t size = 0xac;
  constexpr static std::size_t addrs = 0x2629314;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_TestBoundaryPoint",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0.ovrp_GetBoundaryGeometry
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_GetBoundaryGeometry)> {
  constexpr static std::size_t size = 0xa0;
  constexpr static std::size_t addrs = 0x26293c0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_GetBoundaryGeometry",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0.ovrp_GetBoundaryDimensions
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_GetBoundaryDimensions)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2629460;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_GetBoundaryDimensions",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0.ovrp_GetBoundaryVisible
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_GetBoundaryVisible)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x26294dc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_GetBoundaryVisible",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0.ovrp_SetBoundaryVisible
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_SetBoundaryVisible)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2629544;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_SetBoundaryVisible",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0.ovrp_Update2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(int32_t, int32_t, double_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_Update2)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x26295c0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_Update2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0.ovrp_GetNodePose2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef (*)(int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_GetNodePose2)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x2629654;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_GetNodePose2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0.ovrp_GetNodeVelocity2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef (*)(int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_GetNodeVelocity2)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x26296e8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_GetNodeVelocity2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0.ovrp_GetNodeAcceleration2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef (*)(int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_GetNodeAcceleration2)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x262977c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_GetNodeAcceleration2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_GetBoundaryConfigured()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_GetBoundaryConfigured",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_TestBoundaryNode(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_TestBoundaryNode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult, false>(nullptr, ___internal_method, nodeId, boundaryType);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_TestBoundaryPoint(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f point, GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_TestBoundaryPoint",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult, false>(nullptr, ___internal_method, point, boundaryType);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_GetBoundaryGeometry(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_GetBoundaryGeometry",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry, false>(nullptr, ___internal_method, boundaryType);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_GetBoundaryDimensions(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_GetBoundaryDimensions",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, false>(nullptr, ___internal_method, boundaryType);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_GetBoundaryVisible()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_GetBoundaryVisible",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_SetBoundaryVisible(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_SetBoundaryVisible",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_Update2(int32_t stateId, int32_t frameIndex, double_t predictionSeconds)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_Update2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, stateId, frameIndex, predictionSeconds);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_GetNodePose2(int32_t stateId, GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_GetNodePose2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, false>(nullptr, ___internal_method, stateId, nodeId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_GetNodeVelocity2(int32_t stateId, GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_GetNodeVelocity2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, false>(nullptr, ___internal_method, stateId, nodeId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0::ovrp_GetNodeAcceleration2(int32_t stateId, GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0>::get(),
                            "ovrp_GetNodeAcceleration2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, false>(nullptr, ___internal_method, stateId, nodeId);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0.ovrp_GetSystemHeadsetType
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0::ovrp_GetSystemHeadsetType)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2629894;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0>::get(),
                            "ovrp_GetSystemHeadsetType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0.ovrp_GetActiveController
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0::ovrp_GetActiveController)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x26298fc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0>::get(),
                            "ovrp_GetActiveController",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0.ovrp_GetConnectedControllers
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0::ovrp_GetConnectedControllers)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2629964;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0>::get(),
                            "ovrp_GetConnectedControllers",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0.ovrp_GetBoundaryGeometry2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType, ::cordl_internals::intptr_t, ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0::ovrp_GetBoundaryGeometry2)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x26299cc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0>::get(),
                            "ovrp_GetBoundaryGeometry2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0.ovrp_GetAppPerfStats
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0::ovrp_GetAppPerfStats)> {
  constexpr static std::size_t size = 0x88;
  constexpr static std::size_t addrs = 0x2629a60;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0>::get(),
                            "ovrp_GetAppPerfStats",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0.ovrp_ResetAppPerfStats
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0::ovrp_ResetAppPerfStats)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2629ae8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0>::get(),
                            "ovrp_ResetAppPerfStats",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0::ovrp_GetSystemHeadsetType()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0>::get(),
                            "ovrp_GetSystemHeadsetType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Controller GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0::ovrp_GetActiveController()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0>::get(),
                            "ovrp_GetActiveController",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Controller GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0::ovrp_GetConnectedControllers()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0>::get(),
                            "ovrp_GetConnectedControllers",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0::ovrp_GetBoundaryGeometry2(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType, ::cordl_internals::intptr_t points, ByRef<int32_t> pointsCount)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0>::get(),
                            "ovrp_GetBoundaryGeometry2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, boundaryType, points, pointsCount);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0::ovrp_GetAppPerfStats()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0>::get(),
                            "ovrp_GetAppPerfStats",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0::ovrp_ResetAppPerfStats()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0>::get(),
                            "ovrp_ResetAppPerfStats",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_10_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_10_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_10_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_10_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0.ovrp_SetDesiredEyeTextureFormat
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0::ovrp_SetDesiredEyeTextureFormat)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2629c58;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0>::get(),
                            "ovrp_SetDesiredEyeTextureFormat",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0.ovrp_GetDesiredEyeTextureFormat
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0::ovrp_GetDesiredEyeTextureFormat)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2629cd4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0>::get(),
                            "ovrp_GetDesiredEyeTextureFormat",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0::ovrp_SetDesiredEyeTextureFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0>::get(),
                            "ovrp_SetDesiredEyeTextureFormat",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0::ovrp_GetDesiredEyeTextureFormat()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0>::get(),
                            "ovrp_GetDesiredEyeTextureFormat",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, false>(nullptr, ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0.ovrp_GetAppFramerate
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0::ovrp_GetAppFramerate)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x2629dc0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0>::get(),
                            "ovrp_GetAppFramerate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0.ovrp_GetNodePoseState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Step, GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0::ovrp_GetNodePoseState)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x2629e24;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0>::get(),
                            "ovrp_GetNodePoseState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0.ovrp_GetControllerState2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2 (*)(uint32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0::ovrp_GetControllerState2)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2629eb8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0>::get(),
                            "ovrp_GetControllerState2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0>::get>();
}
 float_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0::ovrp_GetAppFramerate()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0>::get(),
                            "ovrp_GetAppFramerate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0::ovrp_GetNodePoseState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0>::get(),
                            "ovrp_GetNodePoseState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef, false>(nullptr, ___internal_method, stepId, nodeId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2 GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0::ovrp_GetControllerState2(uint32_t controllerMask)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0>::get(),
                            "ovrp_GetControllerState2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2, false>(nullptr, ___internal_method, controllerMask);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_InitializeMixedReality
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_InitializeMixedReality)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2629fc0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_InitializeMixedReality",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_ShutdownMixedReality
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_ShutdownMixedReality)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x262a028;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_ShutdownMixedReality",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_GetMixedRealityInitialized
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetMixedRealityInitialized)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x262a090;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetMixedRealityInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_UpdateExternalCamera
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_UpdateExternalCamera)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x262a0f8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_UpdateExternalCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_GetExternalCameraCount
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetExternalCameraCount)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262a160;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetExternalCameraCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_GetExternalCameraName
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, ::ArrayW<char16_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetExternalCameraName)> {
  constexpr static std::size_t size = 0x110;
  constexpr static std::size_t addrs = 0x262a1dc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetExternalCameraName",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<char16_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_GetExternalCameraIntrinsics
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetExternalCameraIntrinsics)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262a2ec;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetExternalCameraIntrinsics",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_GetExternalCameraExtrinsics
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetExternalCameraExtrinsics)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262a370;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetExternalCameraExtrinsics",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_CalculateLayerDesc
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape, GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>, int32_t, int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, int32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_CalculateLayerDesc)> {
  constexpr static std::size_t size = 0xcc;
  constexpr static std::size_t addrs = 0x262a3f4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_CalculateLayerDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_EnqueueSetupLayer
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal>, ::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_EnqueueSetupLayer)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262a4c0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_EnqueueSetupLayer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_EnqueueDestroyLayer
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_EnqueueDestroyLayer)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262a544;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_EnqueueDestroyLayer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_GetLayerTextureStageCount
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetLayerTextureStageCount)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262a5c0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetLayerTextureStageCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_GetLayerTexturePtr
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Eye, ByRef<::cordl_internals::intptr_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetLayerTexturePtr)> {
  constexpr static std::size_t size = 0x9c;
  constexpr static std::size_t addrs = 0x262a644;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetLayerTexturePtr",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Eye>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_EnqueueSubmitLayer
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(uint32_t, ::cordl_internals::intptr_t, ::cordl_internals::intptr_t, int32_t, int32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>, int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_EnqueueSubmitLayer)> {
  constexpr static std::size_t size = 0xcc;
  constexpr static std::size_t addrs = 0x262a6e0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_EnqueueSubmitLayer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_GetNodeFrustum2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetNodeFrustum2)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262a7ac;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetNodeFrustum2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0.ovrp_GetEyeTextureArrayEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetEyeTextureArrayEnabled)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x262a830;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetEyeTextureArrayEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_InitializeMixedReality()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_InitializeMixedReality",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_ShutdownMixedReality()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_ShutdownMixedReality",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetMixedRealityInitialized()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetMixedRealityInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_UpdateExternalCamera()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_UpdateExternalCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetExternalCameraCount(ByRef<int32_t> cameraCount)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetExternalCameraCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraCount);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetExternalCameraName(int32_t cameraId, ::ArrayW<char16_t> cameraName)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetExternalCameraName",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<char16_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraId, cameraName);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetExternalCameraIntrinsics(int32_t cameraId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics> cameraIntrinsics)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetExternalCameraIntrinsics",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraId, cameraIntrinsics);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetExternalCameraExtrinsics(int32_t cameraId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics> cameraExtrinsics)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetExternalCameraExtrinsics",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraId, cameraExtrinsics);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_CalculateLayerDesc(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape shape, GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout layout, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei> textureSize, int32_t mipLevels, int32_t sampleCount, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat format, int32_t layerFlags, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal> layerDesc)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_CalculateLayerDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, shape, layout, textureSize, mipLevels, sampleCount, format, layerFlags, layerDesc);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_EnqueueSetupLayer(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal> desc, ::cordl_internals::intptr_t layerId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_EnqueueSetupLayer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, desc, layerId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_EnqueueDestroyLayer(::cordl_internals::intptr_t layerId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_EnqueueDestroyLayer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, layerId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetLayerTextureStageCount(int32_t layerId, ByRef<int32_t> layerTextureStageCount)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetLayerTextureStageCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, layerId, layerTextureStageCount);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetLayerTexturePtr(int32_t layerId, int32_t stage, GlobalNamespace::GlobalNamespace__OVRPlugin__Eye eyeId, ByRef<::cordl_internals::intptr_t> textureHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetLayerTexturePtr",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Eye>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, layerId, stage, eyeId, textureHandle);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_EnqueueSubmitLayer(uint32_t flags, ::cordl_internals::intptr_t textureLeft, ::cordl_internals::intptr_t textureRight, int32_t layerId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> pose, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> scale, int32_t layerIndex)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_EnqueueSubmitLayer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, flags, textureLeft, textureRight, layerId, frameIndex, pose, scale, layerIndex);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetNodeFrustum2(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2> nodeFrustum)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetNodeFrustum2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, nodeId, nodeFrustum);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0::ovrp_GetEyeTextureArrayEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0>::get(),
                            "ovrp_GetEyeTextureArrayEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0.ovrp_UpdateCameraDevices
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_UpdateCameraDevices)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x262a91c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_UpdateCameraDevices",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0.ovrp_IsCameraDeviceAvailable
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_IsCameraDeviceAvailable)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262a984;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_IsCameraDeviceAvailable",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0.ovrp_SetCameraDevicePreferredColorFrameSize
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_SetCameraDevicePreferredColorFrameSize)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262aa00;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_SetCameraDevicePreferredColorFrameSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0.ovrp_OpenCameraDevice
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_OpenCameraDevice)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262aa84;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_OpenCameraDevice",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0.ovrp_CloseCameraDevice
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_CloseCameraDevice)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262ab00;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_CloseCameraDevice",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0.ovrp_HasCameraDeviceOpened
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_HasCameraDeviceOpened)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262ab7c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_HasCameraDeviceOpened",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0.ovrp_IsCameraDeviceColorFrameAvailable
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_IsCameraDeviceColorFrameAvailable)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262abf8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_IsCameraDeviceColorFrameAvailable",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0.ovrp_GetCameraDeviceColorFrameSize
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameSize)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262ac74;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_GetCameraDeviceColorFrameSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0.ovrp_GetCameraDeviceColorFrameBgraPixels
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice, ByRef<::cordl_internals::intptr_t>, ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameBgraPixels)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x262acf8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_GetCameraDeviceColorFrameBgraPixels",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0.ovrp_GetControllerState4
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(uint32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_GetControllerState4)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262ad8c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_GetControllerState4",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_UpdateCameraDevices()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_UpdateCameraDevices",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_IsCameraDeviceAvailable(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_IsCameraDeviceAvailable",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, cameraDevice);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_SetCameraDevicePreferredColorFrameSize(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei preferredColorFrameSize)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_SetCameraDevicePreferredColorFrameSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraDevice, preferredColorFrameSize);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_OpenCameraDevice(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_OpenCameraDevice",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraDevice);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_CloseCameraDevice(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_CloseCameraDevice",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraDevice);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_HasCameraDeviceOpened(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_HasCameraDeviceOpened",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, cameraDevice);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_IsCameraDeviceColorFrameAvailable(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_IsCameraDeviceColorFrameAvailable",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, cameraDevice);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameSize(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei> colorFrameSize)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_GetCameraDeviceColorFrameSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraDevice, colorFrameSize);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_GetCameraDeviceColorFrameBgraPixels(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice, ByRef<::cordl_internals::intptr_t> colorFrameBgraPixels, ByRef<int32_t> colorFrameRowPitch)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_GetCameraDeviceColorFrameBgraPixels",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraDevice, colorFrameBgraPixels, colorFrameRowPitch);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0::ovrp_GetControllerState4(uint32_t controllerMask, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4> controllerState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0>::get(),
                            "ovrp_GetControllerState4",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, controllerMask, controllerState);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_17_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_17_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_17_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_17_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0.ovrp_SetHandNodePoseStateLatency
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(double_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0::ovrp_SetHandNodePoseStateLatency)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262af18;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0>::get(),
                            "ovrp_SetHandNodePoseStateLatency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0.ovrp_GetHandNodePoseStateLatency
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<double_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0::ovrp_GetHandNodePoseStateLatency)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262af94;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0>::get(),
                            "ovrp_GetHandNodePoseStateLatency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<double_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0.ovrp_GetAppHasInputFocus
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0::ovrp_GetAppHasInputFocus)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262b010;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0>::get(),
                            "ovrp_GetAppHasInputFocus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0::ovrp_SetHandNodePoseStateLatency(double_t latencyInSeconds)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0>::get(),
                            "ovrp_SetHandNodePoseStateLatency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, latencyInSeconds);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0::ovrp_GetHandNodePoseStateLatency(ByRef<double_t> latencyInSeconds)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0>::get(),
                            "ovrp_GetHandNodePoseStateLatency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<double_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, latencyInSeconds);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0::ovrp_GetAppHasInputFocus(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> appHasInputFocus)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0>::get(),
                            "ovrp_GetAppHasInputFocus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, appHasInputFocus);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_19_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_19_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_19_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_19_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0.ovrp_GetTiledMultiResSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_GetTiledMultiResSupported)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262b194;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_GetTiledMultiResSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0.ovrp_GetTiledMultiResLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_GetTiledMultiResLevel)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262b210;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_GetTiledMultiResLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0.ovrp_SetTiledMultiResLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_SetTiledMultiResLevel)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262b28c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_SetTiledMultiResLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0.ovrp_GetGPUUtilSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_GetGPUUtilSupported)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262b308;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_GetGPUUtilSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0.ovrp_GetGPUUtilLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<float_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_GetGPUUtilLevel)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262b384;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_GetGPUUtilLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<float_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0.ovrp_GetSystemDisplayFrequency2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<float_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_GetSystemDisplayFrequency2)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262b400;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_GetSystemDisplayFrequency2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<float_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0.ovrp_GetSystemDisplayAvailableFrequencies
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_GetSystemDisplayAvailableFrequencies)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262b47c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_GetSystemDisplayAvailableFrequencies",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0.ovrp_SetSystemDisplayFrequency
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(float_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_SetSystemDisplayFrequency)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262b500;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_SetSystemDisplayFrequency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0.ovrp_GetAppAsymmetricFov
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_GetAppAsymmetricFov)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262b57c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_GetAppAsymmetricFov",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_GetTiledMultiResSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> foveationSupported)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_GetTiledMultiResSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, foveationSupported);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_GetTiledMultiResLevel(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel> level)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_GetTiledMultiResLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, level);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_SetTiledMultiResLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel level)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_SetTiledMultiResLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, level);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_GetGPUUtilSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> gpuUtilSupported)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_GetGPUUtilSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, gpuUtilSupported);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_GetGPUUtilLevel(ByRef<float_t> gpuUtil)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_GetGPUUtilLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<float_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, gpuUtil);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_GetSystemDisplayFrequency2(ByRef<float_t> systemDisplayFrequency)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_GetSystemDisplayFrequency2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<float_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, systemDisplayFrequency);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_GetSystemDisplayAvailableFrequencies(::cordl_internals::intptr_t systemDisplayAvailableFrequencies, ByRef<int32_t> numFrequencies)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_GetSystemDisplayAvailableFrequencies",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, systemDisplayAvailableFrequencies, numFrequencies);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_SetSystemDisplayFrequency(float_t requestedFrequency)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_SetSystemDisplayFrequency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, requestedFrequency);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0::ovrp_GetAppAsymmetricFov(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> useAsymmetricFov)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0>::get(),
                            "ovrp_GetAppAsymmetricFov",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, useAsymmetricFov);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0.ovrp_GetDominantHand
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0::ovrp_GetDominantHand)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262b67c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0>::get(),
                            "ovrp_GetDominantHand",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0.ovrp_SendEvent
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::StringW, ::StringW)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0::ovrp_SendEvent)> {
  constexpr static std::size_t size = 0xb4;
  constexpr static std::size_t addrs = 0x262b6f8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0>::get(),
                            "ovrp_SendEvent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0.ovrp_EnqueueSetupLayer2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal>, int32_t, ::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0::ovrp_EnqueueSetupLayer2)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x262b7ac;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0>::get(),
                            "ovrp_EnqueueSetupLayer2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0::ovrp_GetDominantHand(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness> dominantHand)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0>::get(),
                            "ovrp_GetDominantHand",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, dominantHand);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0::ovrp_SendEvent(::StringW name, ::StringW param)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0>::get(),
                            "ovrp_SendEvent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, name, param);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0::ovrp_EnqueueSetupLayer2(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal> desc, int32_t compositionDepth, ::cordl_internals::intptr_t layerId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0>::get(),
                            "ovrp_EnqueueSetupLayer2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, desc, compositionDepth, layerId);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0.ovrp_GetLayerAndroidSurfaceObject
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, ByRef<::cordl_internals::intptr_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0::ovrp_GetLayerAndroidSurfaceObject)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262b8c4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0>::get(),
                            "ovrp_GetLayerAndroidSurfaceObject",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0.ovrp_SetHeadPoseModifier
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0::ovrp_SetHeadPoseModifier)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262b948;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0>::get(),
                            "ovrp_SetHeadPoseModifier",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0.ovrp_GetHeadPoseModifier
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0::ovrp_GetHeadPoseModifier)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262b9cc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0>::get(),
                            "ovrp_GetHeadPoseModifier",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0.ovrp_GetNodePoseStateRaw
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Step, int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Node, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0::ovrp_GetNodePoseStateRaw)> {
  constexpr static std::size_t size = 0x9c;
  constexpr static std::size_t addrs = 0x262ba50;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0>::get(),
                            "ovrp_GetNodePoseStateRaw",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0::ovrp_GetLayerAndroidSurfaceObject(int32_t layerId, ByRef<::cordl_internals::intptr_t> surfaceObject)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0>::get(),
                            "ovrp_GetLayerAndroidSurfaceObject",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, layerId, surfaceObject);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0::ovrp_SetHeadPoseModifier(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> relativeRotation, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> relativeTranslation)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0>::get(),
                            "ovrp_SetHeadPoseModifier",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, relativeRotation, relativeTranslation);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0::ovrp_GetHeadPoseModifier(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> relativeRotation, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> relativeTranslation)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0>::get(),
                            "ovrp_GetHeadPoseModifier",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, relativeRotation, relativeTranslation);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0::ovrp_GetNodePoseStateRaw(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, int32_t frameIndex, GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef> nodePoseState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0>::get(),
                            "ovrp_GetNodePoseStateRaw",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, stepId, frameIndex, nodeId, nodePoseState);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0.ovrp_GetCurrentTrackingTransformPose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0::ovrp_GetCurrentTrackingTransformPose)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262bb70;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0>::get(),
                            "ovrp_GetCurrentTrackingTransformPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0.ovrp_GetTrackingTransformRawPose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0::ovrp_GetTrackingTransformRawPose)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262bbec;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0>::get(),
                            "ovrp_GetTrackingTransformRawPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0.ovrp_SendEvent2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::StringW, ::StringW, ::StringW)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0::ovrp_SendEvent2)> {
  constexpr static std::size_t size = 0xd8;
  constexpr static std::size_t addrs = 0x262bc68;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0>::get(),
                            "ovrp_SendEvent2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0.ovrp_IsPerfMetricsSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0::ovrp_IsPerfMetricsSupported)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262bd40;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0>::get(),
                            "ovrp_IsPerfMetricsSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0.ovrp_GetPerfMetricsFloat
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics, ByRef<float_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0::ovrp_GetPerfMetricsFloat)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262bdc4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0>::get(),
                            "ovrp_GetPerfMetricsFloat",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<float_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0.ovrp_GetPerfMetricsInt
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics, ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0::ovrp_GetPerfMetricsInt)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262be48;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0>::get(),
                            "ovrp_GetPerfMetricsInt",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0::ovrp_GetCurrentTrackingTransformPose(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> trackingTransformPose)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0>::get(),
                            "ovrp_GetCurrentTrackingTransformPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, trackingTransformPose);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0::ovrp_GetTrackingTransformRawPose(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> trackingTransformRawPose)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0>::get(),
                            "ovrp_GetTrackingTransformRawPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, trackingTransformRawPose);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0::ovrp_SendEvent2(::StringW name, ::StringW param, ::StringW source)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0>::get(),
                            "ovrp_SendEvent2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, name, param, source);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0::ovrp_IsPerfMetricsSupported(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics perfMetrics, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> isSupported)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0>::get(),
                            "ovrp_IsPerfMetricsSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, perfMetrics, isSupported);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0::ovrp_GetPerfMetricsFloat(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics perfMetrics, ByRef<float_t> value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0>::get(),
                            "ovrp_GetPerfMetricsFloat",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<float_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, perfMetrics, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0::ovrp_GetPerfMetricsInt(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics perfMetrics, ByRef<int32_t> value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0>::get(),
                            "ovrp_GetPerfMetricsInt",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, perfMetrics, value);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0.ovrp_GetTimeInSeconds
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<double_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0::ovrp_GetTimeInSeconds)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262bf50;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0>::get(),
                            "ovrp_GetTimeInSeconds",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<double_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0.ovrp_SetColorScaleAndOffset
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(UnityEngine::Vector4, UnityEngine::Vector4, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0::ovrp_SetColorScaleAndOffset)> {
  constexpr static std::size_t size = 0xdc;
  constexpr static std::size_t addrs = 0x262bfcc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0>::get(),
                            "ovrp_SetColorScaleAndOffset",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Vector4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Vector4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0::ovrp_GetTimeInSeconds(ByRef<double_t> value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0>::get(),
                            "ovrp_GetTimeInSeconds",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<double_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0::ovrp_SetColorScaleAndOffset(UnityEngine::Vector4 colorScale, UnityEngine::Vector4 colorOffset, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool applyToAllLayers)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0>::get(),
                            "ovrp_SetColorScaleAndOffset",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Vector4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Vector4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, colorScale, colorOffset, applyToAllLayers);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_32_0.ovrp_AddCustomMetadata
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::StringW, ::StringW)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_32_0::ovrp_AddCustomMetadata)> {
  constexpr static std::size_t size = 0xb4;
  constexpr static std::size_t addrs = 0x262c12c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_32_0>::get(),
                            "ovrp_AddCustomMetadata",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_32_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_32_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_32_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_32_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_32_0::ovrp_AddCustomMetadata(::StringW name, ::StringW param)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_32_0>::get(),
                            "ovrp_AddCustomMetadata",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, name, param);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_34_0.ovrp_EnqueueSubmitLayer2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(uint32_t, ::cordl_internals::intptr_t, ::cordl_internals::intptr_t, int32_t, int32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>, int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf>, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, ByRef<UnityEngine::Vector4>, ByRef<UnityEngine::Vector4>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_34_0::ovrp_EnqueueSubmitLayer2)> {
  constexpr static std::size_t size = 0xfc;
  constexpr static std::size_t addrs = 0x262c264;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_34_0>::get(),
                            "ovrp_EnqueueSubmitLayer2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<UnityEngine::Vector4>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<UnityEngine::Vector4>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_34_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_34_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_34_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_34_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_34_0::ovrp_EnqueueSubmitLayer2(uint32_t flags, ::cordl_internals::intptr_t textureLeft, ::cordl_internals::intptr_t textureRight, int32_t layerId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> pose, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> scale, int32_t layerIndex, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool overrideTextureRectMatrix, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf> textureRectMatrix, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool overridePerLayerColorScaleAndOffset, ByRef<UnityEngine::Vector4> colorScale, ByRef<UnityEngine::Vector4> colorOffset)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_34_0>::get(),
                            "ovrp_EnqueueSubmitLayer2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<UnityEngine::Vector4>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<UnityEngine::Vector4>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, flags, textureLeft, textureRight, layerId, frameIndex, pose, scale, layerIndex, overrideTextureRectMatrix, textureRectMatrix, overridePerLayerColorScaleAndOffset, colorScale, colorOffset);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_35_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_35_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_35_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_35_0>::get>();
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_36_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_36_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_36_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_36_0>::get>();
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_37_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_37_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_37_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_37_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_GetTrackingTransformRelativePose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_GetTrackingTransformRelativePose)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262c570;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_GetTrackingTransformRelativePose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_Initialize
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_Initialize)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2622520;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_Initialize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_Shutdown
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_Shutdown)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2622648;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_Shutdown",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_GetInitialized
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_GetInitialized)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2622784;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_GetInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_Update
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_Update)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x26228c0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_Update",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_GetMrcActivationMode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_GetMrcActivationMode)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x26229f4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_GetMrcActivationMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_SetMrcActivationMode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_SetMrcActivationMode)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2622b38;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_SetMrcActivationMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_IsMrcEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_IsMrcEnabled)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2623038;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_IsMrcEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_IsMrcActivated
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_IsMrcActivated)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2623184;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_IsMrcActivated",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_UseMrcDebugCamera
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_UseMrcDebugCamera)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x26232d0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_UseMrcDebugCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_SetMrcInputVideoBufferType
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_SetMrcInputVideoBufferType)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2623414;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_SetMrcInputVideoBufferType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_GetMrcInputVideoBufferType
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_GetMrcInputVideoBufferType)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2623558;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_GetMrcInputVideoBufferType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_SetMrcFrameSize
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_SetMrcFrameSize)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x26236ac;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_SetMrcFrameSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_GetMrcFrameSize
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<int32_t>, ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_GetMrcFrameSize)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2623810;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_GetMrcFrameSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_SetMrcAudioSampleRate
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_SetMrcAudioSampleRate)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262395c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_SetMrcAudioSampleRate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_GetMrcAudioSampleRate
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_GetMrcAudioSampleRate)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2623a9c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_GetMrcAudioSampleRate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_SetMrcFrameImageFlipped
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_SetMrcFrameImageFlipped)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2623be4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_SetMrcFrameImageFlipped",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_GetMrcFrameImageFlipped
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_GetMrcFrameImageFlipped)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2623d2c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_GetMrcFrameImageFlipped",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_EncodeMrcFrame
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ::cordl_internals::intptr_t, int32_t, int32_t, double_t, ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_EncodeMrcFrame)> {
  constexpr static std::size_t size = 0xbc;
  constexpr static std::size_t addrs = 0x26241c0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_EncodeMrcFrame",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_EncodeMrcFrameWithDualTextures
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ::cordl_internals::intptr_t, ::cordl_internals::intptr_t, int32_t, int32_t, double_t, ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_EncodeMrcFrameWithDualTextures)> {
  constexpr static std::size_t size = 0xc4;
  constexpr static std::size_t addrs = 0x2624348;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_EncodeMrcFrameWithDualTextures",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_Media_SyncMrcFrame
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_SyncMrcFrame)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x26249bc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_SyncMrcFrame",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_SetDeveloperMode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_SetDeveloperMode)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262c5f4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_SetDeveloperMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_GetNodeOrientationValid
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_GetNodeOrientationValid)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262c670;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_GetNodeOrientationValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0.ovrp_GetNodePositionValid
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_GetNodePositionValid)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262c6f4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_GetNodePositionValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_GetTrackingTransformRelativePose(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> trackingTransformRelativePose, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin trackingOrigin)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_GetTrackingTransformRelativePose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, trackingTransformRelativePose, trackingOrigin);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_Initialize()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_Initialize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_Shutdown()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_Shutdown",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_GetInitialized(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> initialized)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_GetInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, initialized);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_Update()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_Update",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_GetMrcActivationMode(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode> activationMode)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_GetMrcActivationMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, activationMode);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_SetMrcActivationMode(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode activationMode)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_SetMrcActivationMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, activationMode);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_IsMrcEnabled(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> mrcEnabled)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_IsMrcEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, mrcEnabled);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_IsMrcActivated(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> mrcActivated)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_IsMrcActivated",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, mrcActivated);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_UseMrcDebugCamera(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> useMrcDebugCamera)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_UseMrcDebugCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, useMrcDebugCamera);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_SetMrcInputVideoBufferType(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType inputVideoBufferType)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_SetMrcInputVideoBufferType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, inputVideoBufferType);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_GetMrcInputVideoBufferType(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType> inputVideoBufferType)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_GetMrcInputVideoBufferType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, inputVideoBufferType);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_SetMrcFrameSize(int32_t frameWidth, int32_t frameHeight)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_SetMrcFrameSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, frameWidth, frameHeight);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_GetMrcFrameSize(ByRef<int32_t> frameWidth, ByRef<int32_t> frameHeight)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_GetMrcFrameSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, frameWidth, frameHeight);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_SetMrcAudioSampleRate(int32_t sampleRate)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_SetMrcAudioSampleRate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, sampleRate);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_GetMrcAudioSampleRate(ByRef<int32_t> sampleRate)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_GetMrcAudioSampleRate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, sampleRate);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_SetMrcFrameImageFlipped(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool flipped)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_SetMrcFrameImageFlipped",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, flipped);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_GetMrcFrameImageFlipped(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> flipped)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_GetMrcFrameImageFlipped",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, flipped);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_EncodeMrcFrame(::cordl_internals::intptr_t rawBuffer, ::cordl_internals::intptr_t audioDataPtr, int32_t audioDataLen, int32_t audioChannels, double_t timestamp, ByRef<int32_t> outSyncId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_EncodeMrcFrame",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, rawBuffer, audioDataPtr, audioDataLen, audioChannels, timestamp, outSyncId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_EncodeMrcFrameWithDualTextures(::cordl_internals::intptr_t backgroundTextureHandle, ::cordl_internals::intptr_t foregroundTextureHandle, ::cordl_internals::intptr_t audioData, int32_t audioDataLen, int32_t audioChannels, double_t timestamp, ByRef<int32_t> outSyncId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_EncodeMrcFrameWithDualTextures",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, backgroundTextureHandle, foregroundTextureHandle, audioData, audioDataLen, audioChannels, timestamp, outSyncId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_Media_SyncMrcFrame(int32_t syncId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_Media_SyncMrcFrame",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, syncId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_SetDeveloperMode(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool active)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_SetDeveloperMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, active);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_GetNodeOrientationValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> nodeOrientationValid)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_GetNodeOrientationValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, nodeId, nodeOrientationValid);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0::ovrp_GetNodePositionValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> nodePositionValid)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0>::get(),
                            "ovrp_GetNodePositionValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, nodeId, nodePositionValid);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_39_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_39_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_39_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_39_0>::get>();
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_40_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_40_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_40_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_40_0>::get>();
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_41_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_41_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_41_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_41_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_42_0.ovrp_GetAdaptiveGpuPerformanceScale2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<float_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_42_0::ovrp_GetAdaptiveGpuPerformanceScale2)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262c988;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_42_0>::get(),
                            "ovrp_GetAdaptiveGpuPerformanceScale2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<float_t>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_42_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_42_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_42_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_42_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_42_0::ovrp_GetAdaptiveGpuPerformanceScale2(ByRef<float_t> adaptiveGpuPerformanceScale)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_42_0>::get(),
                            "ovrp_GetAdaptiveGpuPerformanceScale2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<float_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, adaptiveGpuPerformanceScale);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_43_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_43_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_43_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_43_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0.ovrp_GetHandTrackingEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_GetHandTrackingEnabled)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262cb0c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_GetHandTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0.ovrp_GetHandState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Step, GlobalNamespace::GlobalNamespace__OVRPlugin__Hand, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_GetHandState)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x262cb88;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_GetHandState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Hand>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0.ovrp_GetSkeleton
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_GetSkeleton)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x262cc1c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_GetSkeleton",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0.ovrp_GetMesh
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType, ::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_GetMesh)> {
  constexpr static std::size_t size = 0x80;
  constexpr static std::size_t addrs = 0x262ccdc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_GetMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0.ovrp_OverrideExternalCameraFov
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_OverrideExternalCameraFov)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x262cd5c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_OverrideExternalCameraFov",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0.ovrp_GetUseOverriddenExternalCameraFov
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraFov)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262cdf0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_GetUseOverriddenExternalCameraFov",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0.ovrp_OverrideExternalCameraStaticPose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_OverrideExternalCameraStaticPose)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x262ce74;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_OverrideExternalCameraStaticPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0.ovrp_GetUseOverriddenExternalCameraStaticPose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraStaticPose)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262cf08;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_GetUseOverriddenExternalCameraStaticPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0.ovrp_ResetDefaultExternalCamera
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_ResetDefaultExternalCamera)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x262cf8c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_ResetDefaultExternalCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0.ovrp_SetDefaultExternalCamera
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::StringW, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_SetDefaultExternalCamera)> {
  constexpr static std::size_t size = 0xac;
  constexpr static std::size_t addrs = 0x262cff4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_SetDefaultExternalCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0.ovrp_GetLocalTrackingSpaceRecenterCount
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_GetLocalTrackingSpaceRecenterCount)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262d0a0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_GetLocalTrackingSpaceRecenterCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_GetHandTrackingEnabled(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> handTrackingEnabled)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_GetHandTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, handTrackingEnabled);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_GetHandState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, GlobalNamespace::GlobalNamespace__OVRPlugin__Hand hand, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal> handState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_GetHandState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Hand>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, stepId, hand, handState);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_GetSkeleton(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType skeletonType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton> skeleton)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_GetSkeleton",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, skeletonType, skeleton);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_GetMesh(GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType meshType, ::cordl_internals::intptr_t meshPtr)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_GetMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, meshType, meshPtr);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_OverrideExternalCameraFov(int32_t cameraId, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool useOverriddenFov, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf> fov)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_OverrideExternalCameraFov",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraId, useOverriddenFov, fov);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraFov(int32_t cameraId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> useOverriddenFov)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_GetUseOverriddenExternalCameraFov",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraId, useOverriddenFov);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_OverrideExternalCameraStaticPose(int32_t cameraId, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool useOverriddenPose, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> poseInStageOrigin)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_OverrideExternalCameraStaticPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraId, useOverriddenPose, poseInStageOrigin);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_GetUseOverriddenExternalCameraStaticPose(int32_t cameraId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> useOverriddenStaticPose)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_GetUseOverriddenExternalCameraStaticPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraId, useOverriddenStaticPose);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_ResetDefaultExternalCamera()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_ResetDefaultExternalCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_SetDefaultExternalCamera(::StringW cameraName, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics> cameraIntrinsics, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics> cameraExtrinsics)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_SetDefaultExternalCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraName, cameraIntrinsics, cameraExtrinsics);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0::ovrp_GetLocalTrackingSpaceRecenterCount(ByRef<int32_t> recenterCount)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0>::get(),
                            "ovrp_GetLocalTrackingSpaceRecenterCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, recenterCount);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0.ovrp_GetSystemHmd3DofModeEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0::ovrp_GetSystemHmd3DofModeEnabled)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262d1a0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0>::get(),
                            "ovrp_GetSystemHmd3DofModeEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0.ovrp_Media_SetAvailableQueueIndexVulkan
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(uint32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0::ovrp_Media_SetAvailableQueueIndexVulkan)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2624b00;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0>::get(),
                            "ovrp_Media_SetAvailableQueueIndexVulkan",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0::ovrp_GetSystemHmd3DofModeEnabled(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> enabled)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0>::get(),
                            "ovrp_GetSystemHmd3DofModeEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, enabled);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0::ovrp_Media_SetAvailableQueueIndexVulkan(uint32_t queueIndexVk)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0>::get(),
                            "ovrp_Media_SetAvailableQueueIndexVulkan",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, queueIndexVk);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0.ovrp_GetTiledMultiResDynamic
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0::ovrp_GetTiledMultiResDynamic)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262d2a0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0>::get(),
                            "ovrp_GetTiledMultiResDynamic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0.ovrp_SetTiledMultiResDynamic
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0::ovrp_SetTiledMultiResDynamic)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262d31c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0>::get(),
                            "ovrp_SetTiledMultiResDynamic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0::ovrp_GetTiledMultiResDynamic(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> isDynamic)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0>::get(),
                            "ovrp_GetTiledMultiResDynamic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, isDynamic);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0::ovrp_SetTiledMultiResDynamic(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool isDynamic)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0>::get(),
                            "ovrp_SetTiledMultiResDynamic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, isDynamic);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_47_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_47_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_47_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_47_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_48_0.ovrp_SetExternalCameraProperties
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::StringW, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_48_0::ovrp_SetExternalCameraProperties)> {
  constexpr static std::size_t size = 0xac;
  constexpr static std::size_t addrs = 0x262d4a0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_48_0>::get(),
                            "ovrp_SetExternalCameraProperties",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_48_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_48_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_48_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_48_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_48_0::ovrp_SetExternalCameraProperties(::StringW cameraName, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics> cameraIntrinsics, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics> cameraExtrinsics)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_48_0>::get(),
                            "ovrp_SetExternalCameraProperties",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, cameraName, cameraIntrinsics, cameraExtrinsics);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_SetClientColorDesc
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_SetClientColorDesc)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262d5d0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_SetClientColorDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_GetHmdColorDesc
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_GetHmdColorDesc)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262d64c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_GetHmdColorDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_Media_EncodeMrcFrameWithPoseTime
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ::cordl_internals::intptr_t, int32_t, int32_t, double_t, double_t, ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_EncodeMrcFrameWithPoseTime)> {
  constexpr static std::size_t size = 0xc4;
  constexpr static std::size_t addrs = 0x26240fc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_EncodeMrcFrameWithPoseTime",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ::cordl_internals::intptr_t, ::cordl_internals::intptr_t, int32_t, int32_t, double_t, double_t, ByRef<int32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime)> {
  constexpr static std::size_t size = 0xcc;
  constexpr static std::size_t addrs = 0x262427c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_Media_SetHeadsetControllerPose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_SetHeadsetControllerPose)> {
  constexpr static std::size_t size = 0xc4;
  constexpr static std::size_t addrs = 0x2624cc8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_SetHeadsetControllerPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_Media_EnumerateCameraAnchorHandles
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<int32_t>, ByRef<::cordl_internals::intptr_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_EnumerateCameraAnchorHandles)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262d6c8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_EnumerateCameraAnchorHandles",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_Media_GetCurrentCameraAnchorHandle
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<::cordl_internals::intptr_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_GetCurrentCameraAnchorHandle)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262d74c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_GetCurrentCameraAnchorHandle",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_Media_GetCameraAnchorName
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ::ArrayW<char16_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_GetCameraAnchorName)> {
  constexpr static std::size_t size = 0x110;
  constexpr static std::size_t addrs = 0x262d7c8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_GetCameraAnchorName",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<char16_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_Media_GetCameraAnchorHandle
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ByRef<::cordl_internals::intptr_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_GetCameraAnchorHandle)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262d8d8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_GetCameraAnchorHandle",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_Media_GetCameraAnchorType
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_GetCameraAnchorType)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262d95c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_GetCameraAnchorType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_Media_CreateCustomCameraAnchor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ByRef<::cordl_internals::intptr_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_CreateCustomCameraAnchor)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262d9e0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_CreateCustomCameraAnchor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_Media_DestroyCustomCameraAnchor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_DestroyCustomCameraAnchor)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262da64;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_DestroyCustomCameraAnchor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_Media_GetCustomCameraAnchorPose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_GetCustomCameraAnchorPose)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262dae0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_GetCustomCameraAnchorPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_Media_SetCustomCameraAnchorPose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_SetCustomCameraAnchorPose)> {
  constexpr static std::size_t size = 0x90;
  constexpr static std::size_t addrs = 0x262db64;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_SetCustomCameraAnchorPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_Media_GetCameraMinMaxDistance
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ByRef<double_t>, ByRef<double_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_GetCameraMinMaxDistance)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x262dbf4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_GetCameraMinMaxDistance",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<double_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<double_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0.ovrp_Media_SetCameraMinMaxDistance
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, double_t, double_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_SetCameraMinMaxDistance)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x262dc88;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_SetCameraMinMaxDistance",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_SetClientColorDesc(GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace colorSpace)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_SetClientColorDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, colorSpace);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_GetHmdColorDesc(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace> colorSpace)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_GetHmdColorDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, colorSpace);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_EncodeMrcFrameWithPoseTime(::cordl_internals::intptr_t rawBuffer, ::cordl_internals::intptr_t audioDataPtr, int32_t audioDataLen, int32_t audioChannels, double_t timestamp, double_t poseTime, ByRef<int32_t> outSyncId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_EncodeMrcFrameWithPoseTime",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, rawBuffer, audioDataPtr, audioDataLen, audioChannels, timestamp, poseTime, outSyncId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime(::cordl_internals::intptr_t backgroundTextureHandle, ::cordl_internals::intptr_t foregroundTextureHandle, ::cordl_internals::intptr_t audioData, int32_t audioDataLen, int32_t audioChannels, double_t timestamp, double_t poseTime, ByRef<int32_t> outSyncId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, backgroundTextureHandle, foregroundTextureHandle, audioData, audioDataLen, audioChannels, timestamp, poseTime, outSyncId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_SetHeadsetControllerPose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef headsetPose, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef leftControllerPose, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef rightControllerPose)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_SetHeadsetControllerPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, headsetPose, leftControllerPose, rightControllerPose);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_EnumerateCameraAnchorHandles(ByRef<int32_t> anchorCount, ByRef<::cordl_internals::intptr_t> CameraAnchorHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_EnumerateCameraAnchorHandles",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, anchorCount, CameraAnchorHandle);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_GetCurrentCameraAnchorHandle(ByRef<::cordl_internals::intptr_t> anchorHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_GetCurrentCameraAnchorHandle",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, anchorHandle);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_GetCameraAnchorName(::cordl_internals::intptr_t anchorHandle, ::ArrayW<char16_t> cameraName)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_GetCameraAnchorName",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<char16_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, anchorHandle, cameraName);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_GetCameraAnchorHandle(::cordl_internals::intptr_t anchorName, ByRef<::cordl_internals::intptr_t> anchorHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_GetCameraAnchorHandle",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, anchorName, anchorHandle);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_GetCameraAnchorType(::cordl_internals::intptr_t anchorHandle, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType> anchorType)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_GetCameraAnchorType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, anchorHandle, anchorType);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_CreateCustomCameraAnchor(::cordl_internals::intptr_t anchorName, ByRef<::cordl_internals::intptr_t> anchorHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_CreateCustomCameraAnchor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, anchorName, anchorHandle);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_DestroyCustomCameraAnchor(::cordl_internals::intptr_t anchorHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_DestroyCustomCameraAnchor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, anchorHandle);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_GetCustomCameraAnchorPose(::cordl_internals::intptr_t anchorHandle, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> pose)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_GetCustomCameraAnchorPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, anchorHandle, pose);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_SetCustomCameraAnchorPose(::cordl_internals::intptr_t anchorHandle, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef pose)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_SetCustomCameraAnchorPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, anchorHandle, pose);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_GetCameraMinMaxDistance(::cordl_internals::intptr_t anchorHandle, ByRef<double_t> minDistance, ByRef<double_t> maxDistance)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_GetCameraMinMaxDistance",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<double_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<double_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, anchorHandle, minDistance, maxDistance);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0::ovrp_Media_SetCameraMinMaxDistance(::cordl_internals::intptr_t anchorHandle, double_t minDistance, double_t maxDistance)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0>::get(),
                            "ovrp_Media_SetCameraMinMaxDistance",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, anchorHandle, minDistance, maxDistance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_50_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_50_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_50_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_50_0>::get>();
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_51_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_51_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_51_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_51_0>::get>();
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_52_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_52_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_52_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_52_0>::get>();
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_53_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_53_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_53_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_53_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_54_0.ovrp_Media_SetPlatformInitialized
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_54_0::ovrp_Media_SetPlatformInitialized)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2622c74;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_54_0>::get(),
                            "ovrp_Media_SetPlatformInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_54_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_54_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_54_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_54_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_54_0::ovrp_Media_SetPlatformInitialized()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_54_0>::get(),
                            "ovrp_Media_SetPlatformInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0.ovrp_GetSkeleton2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0::ovrp_GetSkeleton2)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262e034;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0>::get(),
                            "ovrp_GetSkeleton2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0.ovrp_PollEvent
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0::ovrp_PollEvent)> {
  constexpr static std::size_t size = 0xe0;
  constexpr static std::size_t addrs = 0x262e0b8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0>::get(),
                            "ovrp_PollEvent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0.ovrp_GetNativeXrApiType
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0::ovrp_GetNativeXrApiType)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262e198;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0>::get(),
                            "ovrp_GetNativeXrApiType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0.ovrp_GetNativeOpenXRHandles
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0::ovrp_GetNativeOpenXRHandles)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262e214;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0>::get(),
                            "ovrp_GetNativeOpenXRHandles",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0::ovrp_GetSkeleton2(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType skeletonType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal> skeleton)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0>::get(),
                            "ovrp_GetSkeleton2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, skeletonType, skeleton);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0::ovrp_PollEvent(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer> eventDataBuffer)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0>::get(),
                            "ovrp_PollEvent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, eventDataBuffer);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0::ovrp_GetNativeXrApiType(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi> xrApi)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0>::get(),
                            "ovrp_GetNativeXrApiType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, xrApi);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0::ovrp_GetNativeOpenXRHandles(ByRef<uint64_t> xrInstance, ByRef<uint64_t> xrSession)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0>::get(),
                            "ovrp_GetNativeOpenXRHandles",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, xrInstance, xrSession);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_1.ovrp_PollEvent2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventType>, ByRef<::cordl_internals::intptr_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_1::ovrp_PollEvent2)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262e31c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_1>::get(),
                            "ovrp_PollEvent2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventType>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_1::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_1>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_1::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_1>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_1::ovrp_PollEvent2(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventType> eventType, ByRef<::cordl_internals::intptr_t> eventData)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_1>::get(),
                            "ovrp_PollEvent2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventType>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, eventType, eventData);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_56_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_56_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_56_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_56_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0.ovrp_Media_GetPlatformCameraMode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0::ovrp_Media_GetPlatformCameraMode)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2622da8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0>::get(),
                            "ovrp_Media_GetPlatformCameraMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0.ovrp_Media_SetPlatformCameraMode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0::ovrp_Media_SetPlatformCameraMode)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2622eec;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0>::get(),
                            "ovrp_Media_SetPlatformCameraMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0.ovrp_SetEyeFovPremultipliedAlphaMode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0::ovrp_SetEyeFovPremultipliedAlphaMode)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262e4a8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0>::get(),
                            "ovrp_SetEyeFovPremultipliedAlphaMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0.ovrp_GetEyeFovPremultipliedAlphaMode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0::ovrp_GetEyeFovPremultipliedAlphaMode)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262e524;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0>::get(),
                            "ovrp_GetEyeFovPremultipliedAlphaMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0.ovrp_SetKeyboardOverlayUV
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0::ovrp_SetKeyboardOverlayUV)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262e5a0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0>::get(),
                            "ovrp_SetKeyboardOverlayUV",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0::ovrp_Media_GetPlatformCameraMode(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode> platformCameraMode)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0>::get(),
                            "ovrp_Media_GetPlatformCameraMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, platformCameraMode);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0::ovrp_Media_SetPlatformCameraMode(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode platformCameraMode)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0>::get(),
                            "ovrp_Media_SetPlatformCameraMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, platformCameraMode);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0::ovrp_SetEyeFovPremultipliedAlphaMode(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool enabled)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0>::get(),
                            "ovrp_SetEyeFovPremultipliedAlphaMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, enabled);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0::ovrp_GetEyeFovPremultipliedAlphaMode(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> enabled)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0>::get(),
                            "ovrp_GetEyeFovPremultipliedAlphaMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, enabled);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0::ovrp_SetKeyboardOverlayUV(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f uv)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0>::get(),
                            "ovrp_SetKeyboardOverlayUV",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, uv);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_58_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_58_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_58_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_58_0>::get>();
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_59_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_59_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_59_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_59_0>::get>();
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_60_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_60_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_60_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_60_0>::get>();
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_61_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_61_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_61_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_61_0>::get>();
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_62_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_62_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_62_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_62_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0.ovrp_InitializeInsightPassthrough
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_InitializeInsightPassthrough)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x262e93c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_InitializeInsightPassthrough",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0.ovrp_ShutdownInsightPassthrough
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_ShutdownInsightPassthrough)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x262e9a4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_ShutdownInsightPassthrough",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0.ovrp_GetInsightPassthroughInitialized
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_GetInsightPassthroughInitialized)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x262ea0c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_GetInsightPassthroughInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0.ovrp_SetInsightPassthroughStyle
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_SetInsightPassthroughStyle)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x262ea74;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_SetInsightPassthroughStyle",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0.ovrp_CreateInsightTriangleMesh
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, ::cordl_internals::intptr_t, int32_t, ::cordl_internals::intptr_t, int32_t, ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_CreateInsightTriangleMesh)> {
  constexpr static std::size_t size = 0xb4;
  constexpr static std::size_t addrs = 0x262eb08;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_CreateInsightTriangleMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0.ovrp_DestroyInsightTriangleMesh
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_DestroyInsightTriangleMesh)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262ebbc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_DestroyInsightTriangleMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0.ovrp_AddInsightPassthroughSurfaceGeometry
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, uint64_t, UnityEngine::Matrix4x4, ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_AddInsightPassthroughSurfaceGeometry)> {
  constexpr static std::size_t size = 0xac;
  constexpr static std::size_t addrs = 0x262ec38;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_AddInsightPassthroughSurfaceGeometry",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Matrix4x4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0.ovrp_DestroyInsightPassthroughGeometryInstance
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_DestroyInsightPassthroughGeometryInstance)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262ece4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_DestroyInsightPassthroughGeometryInstance",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0.ovrp_UpdateInsightPassthroughGeometryTransform
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(uint64_t, UnityEngine::Matrix4x4)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_UpdateInsightPassthroughGeometryTransform)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x262ed60;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_UpdateInsightPassthroughGeometryTransform",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Matrix4x4>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_InitializeInsightPassthrough()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_InitializeInsightPassthrough",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_ShutdownInsightPassthrough()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_ShutdownInsightPassthrough",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_GetInsightPassthroughInitialized()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_GetInsightPassthroughInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_SetInsightPassthroughStyle(int32_t layerId, GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle style)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_SetInsightPassthroughStyle",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, layerId, style);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_CreateInsightTriangleMesh(int32_t layerId, ::cordl_internals::intptr_t vertices, int32_t vertexCount, ::cordl_internals::intptr_t triangles, int32_t triangleCount, ByRef<uint64_t> meshHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_CreateInsightTriangleMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, layerId, vertices, vertexCount, triangles, triangleCount, meshHandle);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_DestroyInsightTriangleMesh(uint64_t meshHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_DestroyInsightTriangleMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, meshHandle);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_AddInsightPassthroughSurfaceGeometry(int32_t layerId, uint64_t meshHandle, UnityEngine::Matrix4x4 T_world_model, ByRef<uint64_t> geometryInstanceHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_AddInsightPassthroughSurfaceGeometry",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Matrix4x4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, layerId, meshHandle, T_world_model, geometryInstanceHandle);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_DestroyInsightPassthroughGeometryInstance(uint64_t geometryInstanceHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_DestroyInsightPassthroughGeometryInstance",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, geometryInstanceHandle);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0::ovrp_UpdateInsightPassthroughGeometryTransform(uint64_t geometryInstanceHandle, UnityEngine::Matrix4x4 T_world_model)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0>::get(),
                            "ovrp_UpdateInsightPassthroughGeometryTransform",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Matrix4x4>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, geometryInstanceHandle, T_world_model);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_64_0.ovrp_LocateSpace
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>, ByRef<uint64_t>, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_64_0::ovrp_LocateSpace)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x262ee78;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_64_0>::get(),
                            "ovrp_LocateSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_64_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_64_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_64_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_64_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_64_0::ovrp_LocateSpace(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> location, ByRef<uint64_t> space, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin trackingOrigin)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_64_0>::get(),
                            "ovrp_LocateSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, location, space, trackingOrigin);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0.ovrp_KtxLoadFromMemory
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<::cordl_internals::intptr_t>, uint32_t, ByRef<::cordl_internals::intptr_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_KtxLoadFromMemory)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x2625058;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_KtxLoadFromMemory",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0.ovrp_KtxTextureWidth
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ByRef<uint32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_KtxTextureWidth)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2625228;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_KtxTextureWidth",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0.ovrp_KtxTextureHeight
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ByRef<uint32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_KtxTextureHeight)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x26253e8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_KtxTextureHeight",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0.ovrp_KtxTranscode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, uint32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_KtxTranscode)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x26255a8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_KtxTranscode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0.ovrp_KtxGetTextureData
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ::cordl_internals::intptr_t, uint32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_KtxGetTextureData)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x2625930;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_KtxGetTextureData",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0.ovrp_KtxTextureSize
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t, ByRef<uint32_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_KtxTextureSize)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2625768;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_KtxTextureSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0.ovrp_KtxDestroy
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_KtxDestroy)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2625af0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_KtxDestroy",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0.ovrp_DestroySpace
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_DestroySpace)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262ef90;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_DestroySpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_KtxLoadFromMemory(ByRef<::cordl_internals::intptr_t> data, uint32_t length, ByRef<::cordl_internals::intptr_t> texture)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_KtxLoadFromMemory",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::cordl_internals::intptr_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, data, length, texture);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_KtxTextureWidth(::cordl_internals::intptr_t texture, ByRef<uint32_t> width)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_KtxTextureWidth",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, texture, width);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_KtxTextureHeight(::cordl_internals::intptr_t texture, ByRef<uint32_t> height)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_KtxTextureHeight",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, texture, height);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_KtxTranscode(::cordl_internals::intptr_t texture, uint32_t format)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_KtxTranscode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, texture, format);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_KtxGetTextureData(::cordl_internals::intptr_t texture, ::cordl_internals::intptr_t data, uint32_t bufferSize)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_KtxGetTextureData",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, texture, data, bufferSize);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_KtxTextureSize(::cordl_internals::intptr_t texture, ByRef<uint32_t> size)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_KtxTextureSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, texture, size);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_KtxDestroy(::cordl_internals::intptr_t texture)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_KtxDestroy",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, texture);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0::ovrp_DestroySpace(ByRef<uint64_t> space)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0>::get(),
                            "ovrp_DestroySpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, space);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0.ovrp_GetInsightPassthroughInitializationState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0::ovrp_GetInsightPassthroughInitializationState)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x262f090;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0>::get(),
                            "ovrp_GetInsightPassthroughInitializationState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0.ovrp_Media_IsCastingToRemoteClient
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0::ovrp_Media_IsCastingToRemoteClient)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2624e60;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0>::get(),
                            "ovrp_Media_IsCastingToRemoteClient",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0::ovrp_GetInsightPassthroughInitializationState()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0>::get(),
                            "ovrp_GetInsightPassthroughInitializationState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0::ovrp_Media_IsCastingToRemoteClient(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> isCasting)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0>::get(),
                            "ovrp_Media_IsCastingToRemoteClient",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, isCasting);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_67_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_67_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_67_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_67_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0.ovrp_LoadRenderModel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(uint64_t, uint32_t, ByRef<uint32_t>, ::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_LoadRenderModel)> {
  constexpr static std::size_t size = 0x9c;
  constexpr static std::size_t addrs = 0x262f200;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_LoadRenderModel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0.ovrp_GetRenderModelPaths
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(uint32_t, ::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_GetRenderModelPaths)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262f29c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_GetRenderModelPaths",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0.ovrp_GetRenderModelProperties
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::StringW, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_GetRenderModelProperties)> {
  constexpr static std::size_t size = 0xf8;
  constexpr static std::size_t addrs = 0x262f320;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_GetRenderModelProperties",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0.ovrp_SetInsightPassthroughKeyboardHandsIntensity
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_SetInsightPassthroughKeyboardHandsIntensity)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x262f418;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_SetInsightPassthroughKeyboardHandsIntensity",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0.ovrp_StartKeyboardTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_StartKeyboardTracking)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262f4ac;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_StartKeyboardTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0.ovrp_StopKeyboardTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_StopKeyboardTracking)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x262f528;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_StopKeyboardTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0.ovrp_GetSystemKeyboardDescription
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_GetSystemKeyboardDescription)> {
  constexpr static std::size_t size = 0xf4;
  constexpr static std::size_t addrs = 0x262f590;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_GetSystemKeyboardDescription",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0.ovrp_GetKeyboardState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Step, int32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_GetKeyboardState)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x262f684;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_GetKeyboardState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_LoadRenderModel(uint64_t modelKey, uint32_t bufferInputCapacity, ByRef<uint32_t> bufferCountOutput, ::cordl_internals::intptr_t buffer)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_LoadRenderModel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, modelKey, bufferInputCapacity, bufferCountOutput, buffer);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_GetRenderModelPaths(uint32_t index, ::cordl_internals::intptr_t path)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_GetRenderModelPaths",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, index, path);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_GetRenderModelProperties(::StringW path, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal> properties)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_GetRenderModelProperties",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, path, properties);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_SetInsightPassthroughKeyboardHandsIntensity(int32_t layerId, GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity intensity)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_SetInsightPassthroughKeyboardHandsIntensity",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, layerId, intensity);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_StartKeyboardTracking(uint64_t trackedKeyboardId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_StartKeyboardTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, trackedKeyboardId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_StopKeyboardTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_StopKeyboardTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_GetSystemKeyboardDescription(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags keyboardQueryFlags, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription> keyboardDescription)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_GetSystemKeyboardDescription",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, keyboardQueryFlags, keyboardDescription);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0::ovrp_GetKeyboardState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState> keyboardState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0>::get(),
                            "ovrp_GetKeyboardState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, stepId, frameIndex, keyboardState);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_69_0.ovrp_GetNodePoseStateImmediate
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_69_0::ovrp_GetNodePoseStateImmediate)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262f79c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_69_0>::get(),
                            "ovrp_GetNodePoseStateImmediate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_69_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_69_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_69_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_69_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_69_0::ovrp_GetNodePoseStateImmediate(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef> nodePoseState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_69_0>::get(),
                            "ovrp_GetNodePoseStateImmediate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, nodeId, nodePoseState);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_70_0.ovrp_SetLogCallback2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_70_0::ovrp_SetLogCallback2)> {
  constexpr static std::size_t size = 0x80;
  constexpr static std::size_t addrs = 0x262f8a4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_70_0>::get(),
                            "ovrp_SetLogCallback2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_70_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_70_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_70_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_70_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_70_0::ovrp_SetLogCallback2(GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType logCallback)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_70_0>::get(),
                            "ovrp_SetLogCallback2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, logCallback);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_IsInsightPassthroughSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_IsInsightPassthroughSupported)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262f9a8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_IsInsightPassthroughSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_UnityOpenXR_SetClientVersion
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int32_t, int32_t, int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_SetClientVersion)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x2625c64;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_SetClientVersion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_UnityOpenXR_HookGetInstanceProcAddr
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::cordl_internals::intptr_t (*)(::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_HookGetInstanceProcAddr)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2625dbc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_HookGetInstanceProcAddr",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_UnityOpenXR_OnInstanceCreate
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnInstanceCreate)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2625f00;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnInstanceCreate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_UnityOpenXR_OnInstanceDestroy
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnInstanceDestroy)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262603c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnInstanceDestroy",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_UnityOpenXR_OnSessionCreate
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnSessionCreate)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2626178;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnSessionCreate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_UnityOpenXR_OnAppSpaceChange
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnAppSpaceChange)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x26262b4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnAppSpaceChange",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_UnityOpenXR_OnSessionStateChange
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int32_t, int32_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnSessionStateChange)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2626404;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnSessionStateChange",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_UnityOpenXR_OnSessionBegin
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnSessionBegin)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2626548;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnSessionBegin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_UnityOpenXR_OnSessionEnd
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnSessionEnd)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2626684;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnSessionEnd",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_UnityOpenXR_OnSessionExiting
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnSessionExiting)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x26267c0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnSessionExiting",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_UnityOpenXR_OnSessionDestroy
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(uint64_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnSessionDestroy)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x26268fc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnSessionDestroy",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_SetSuggestedCpuPerformanceLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_SetSuggestedCpuPerformanceLevel)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262fa24;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_SetSuggestedCpuPerformanceLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_GetSuggestedCpuPerformanceLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_GetSuggestedCpuPerformanceLevel)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262faa0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_GetSuggestedCpuPerformanceLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_SetSuggestedGpuPerformanceLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_SetSuggestedGpuPerformanceLevel)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262fb1c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_SetSuggestedGpuPerformanceLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0.ovrp_GetSuggestedGpuPerformanceLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_GetSuggestedGpuPerformanceLevel)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x262fb98;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_GetSuggestedGpuPerformanceLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_IsInsightPassthroughSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> supported)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_IsInsightPassthroughSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, supported);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_SetClientVersion(int32_t majorVersion, int32_t minorVersion, int32_t patchVersion)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_SetClientVersion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, majorVersion, minorVersion, patchVersion);
}
 ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_HookGetInstanceProcAddr(::cordl_internals::intptr_t func)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_HookGetInstanceProcAddr",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<::cordl_internals::intptr_t, false>(nullptr, ___internal_method, func);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnInstanceCreate(uint64_t xrInstance)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnInstanceCreate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, xrInstance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnInstanceDestroy(uint64_t xrInstance)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnInstanceDestroy",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, xrInstance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnSessionCreate(uint64_t xrSession)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnSessionCreate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, xrSession);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnAppSpaceChange(uint64_t xrSpace)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnAppSpaceChange",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, xrSpace);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnSessionStateChange(int32_t oldState, int32_t newState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnSessionStateChange",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, oldState, newState);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnSessionBegin(uint64_t xrSession)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnSessionBegin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, xrSession);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnSessionEnd(uint64_t xrSession)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnSessionEnd",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, xrSession);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnSessionExiting(uint64_t xrSession)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnSessionExiting",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, xrSession);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_UnityOpenXR_OnSessionDestroy(uint64_t xrSession)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_UnityOpenXR_OnSessionDestroy",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, xrSession);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_SetSuggestedCpuPerformanceLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel perfLevel)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_SetSuggestedCpuPerformanceLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, perfLevel);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_GetSuggestedCpuPerformanceLevel(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel> perfLevel)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_GetSuggestedCpuPerformanceLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, perfLevel);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_SetSuggestedGpuPerformanceLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel perfLevel)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_SetSuggestedGpuPerformanceLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, perfLevel);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0::ovrp_GetSuggestedGpuPerformanceLevel(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel> perfLevel)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0>::get(),
                            "ovrp_GetSuggestedGpuPerformanceLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, perfLevel);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_CreateSpatialAnchor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo>, ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_CreateSpatialAnchor)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x262fc98;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_CreateSpatialAnchor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_SetSpaceComponentStatus
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, double_t, ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_SetSpaceComponentStatus)> {
  constexpr static std::size_t size = 0xac;
  constexpr static std::size_t addrs = 0x262fd1c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_SetSpaceComponentStatus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_GetSpaceComponentStatus
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_GetSpaceComponentStatus)> {
  constexpr static std::size_t size = 0x98;
  constexpr static std::size_t addrs = 0x262fdc8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_GetSpaceComponentStatus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_EnumerateSpaceSupportedComponents
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, uint32_t, ByRef<uint32_t>, ByRef<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_EnumerateSpaceSupportedComponents)> {
  constexpr static std::size_t size = 0xa4;
  constexpr static std::size_t addrs = 0x262fe60;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_EnumerateSpaceSupportedComponents",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_SaveSpace
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode, ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_SaveSpace)> {
  constexpr static std::size_t size = 0x9c;
  constexpr static std::size_t addrs = 0x262ff04;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_SaveSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_QuerySpaces
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo>, ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_QuerySpaces)> {
  constexpr static std::size_t size = 0xdc;
  constexpr static std::size_t addrs = 0x262ffa0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_QuerySpaces",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_RetrieveSpaceQueryResults
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, uint32_t, ByRef<uint32_t>, ::cordl_internals::intptr_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_RetrieveSpaceQueryResults)> {
  constexpr static std::size_t size = 0x9c;
  constexpr static std::size_t addrs = 0x263007c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_RetrieveSpaceQueryResults",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_EraseSpace
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation, ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_EraseSpace)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x2630118;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_EraseSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_GetSpaceContainer
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceContainerInternal>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_GetSpaceContainer)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x26301ac;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_GetSpaceContainer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceContainerInternal>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_GetSpaceBoundingBox2D
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_GetSpaceBoundingBox2D)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2630230;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_GetSpaceBoundingBox2D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_GetSpaceBoundingBox3D
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_GetSpaceBoundingBox3D)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x26302b4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_GetSpaceBoundingBox3D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_GetSpaceSemanticLabels
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_GetSpaceSemanticLabels)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2630338;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_GetSpaceSemanticLabels",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_GetSpaceRoomLayout
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_GetSpaceRoomLayout)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x26303bc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_GetSpaceRoomLayout",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_GetSpaceBoundary2D
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_GetSpaceBoundary2D)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2630440;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_GetSpaceBoundary2D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0.ovrp_RequestSceneCapture
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal>, ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_RequestSceneCapture)> {
  constexpr static std::size_t size = 0xdc;
  constexpr static std::size_t addrs = 0x26304c4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_RequestSceneCapture",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_CreateSpatialAnchor(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo> createInfo, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_CreateSpatialAnchor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, createInfo, requestId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_SetSpaceComponentStatus(ByRef<uint64_t> space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType componentType, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool enable, double_t timeout, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_SetSpaceComponentStatus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, space, componentType, enable, timeout, requestId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_GetSpaceComponentStatus(ByRef<uint64_t> space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType componentType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> enabled, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> changePending)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_GetSpaceComponentStatus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, space, componentType, enabled, changePending);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_EnumerateSpaceSupportedComponents(ByRef<uint64_t> space, uint32_t componentTypesCapacityInput, ByRef<uint32_t> componentTypesCountOutput, ByRef<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>> componentTypes)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_EnumerateSpaceSupportedComponents",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, space, componentTypesCapacityInput, componentTypesCountOutput, componentTypes);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_SaveSpace(ByRef<uint64_t> space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation location, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode mode, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_SaveSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, space, location, mode, requestId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_QuerySpaces(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo> queryInfo, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_QuerySpaces",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, queryInfo, requestId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_RetrieveSpaceQueryResults(ByRef<uint64_t> requestId, uint32_t resultCapacityInput, ByRef<uint32_t> resultCountOutput, ::cordl_internals::intptr_t results)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_RetrieveSpaceQueryResults",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, requestId, resultCapacityInput, resultCountOutput, results);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_EraseSpace(ByRef<uint64_t> space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation location, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_EraseSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, space, location, requestId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_GetSpaceContainer(ByRef<uint64_t> space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceContainerInternal> containerInternal)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_GetSpaceContainer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceContainerInternal>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, space, containerInternal);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_GetSpaceBoundingBox2D(ByRef<uint64_t> space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf> rect)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_GetSpaceBoundingBox2D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, space, rect);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_GetSpaceBoundingBox3D(ByRef<uint64_t> space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf> bounds)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_GetSpaceBoundingBox3D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, space, bounds);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_GetSpaceSemanticLabels(ByRef<uint64_t> space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal> labelsInternal)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_GetSpaceSemanticLabels",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, space, labelsInternal);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_GetSpaceRoomLayout(ByRef<uint64_t> space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal> roomLayoutInternal)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_GetSpaceRoomLayout",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, space, roomLayoutInternal);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_GetSpaceBoundary2D(ByRef<uint64_t> space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal> boundaryInternal)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_GetSpaceBoundary2D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, space, boundaryInternal);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0::ovrp_RequestSceneCapture(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal> request, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0>::get(),
                            "ovrp_RequestSceneCapture",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, request, requestId);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_73_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_73_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_73_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_73_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0.ovrp_GetSpaceUuid
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, ByRef<System::Guid>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0::ovrp_GetSpaceUuid)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x26306a8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0>::get(),
                            "ovrp_GetSpaceUuid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<System::Guid>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0.ovrp_GetRenderModelProperties2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(::StringW, GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0::ovrp_GetRenderModelProperties2)> {
  constexpr static std::size_t size = 0x100;
  constexpr static std::size_t addrs = 0x263072c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0>::get(),
                            "ovrp_GetRenderModelProperties2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0::ovrp_GetSpaceUuid(ByRef<uint64_t> space, ByRef<System::Guid> uuid)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0>::get(),
                            "ovrp_GetSpaceUuid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<System::Guid>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, space, uuid);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0::ovrp_GetRenderModelProperties2(::StringW path, GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags flags, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal> properties)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0>::get(),
                            "ovrp_GetRenderModelProperties2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, path, flags, properties);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_75_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_75_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_75_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_75_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_76_0.ovrp_GetNodePoseStateAtTime
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(double_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Node, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_76_0::ovrp_GetNodePoseStateAtTime)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x2630934;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_76_0>::get(),
                            "ovrp_GetNodePoseStateAtTime",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_76_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_76_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_76_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_76_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_76_0::ovrp_GetNodePoseStateAtTime(double_t time, GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef> nodePoseState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_76_0>::get(),
                            "ovrp_GetNodePoseStateAtTime",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, time, nodeId, nodePoseState);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetPassthroughCapabilityFlags
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetPassthroughCapabilityFlags)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2630a4c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetPassthroughCapabilityFlags",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetFoveationEyeTrackedSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetFoveationEyeTrackedSupported)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2630ac8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetFoveationEyeTrackedSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetFoveationEyeTracked
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetFoveationEyeTracked)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2630b44;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetFoveationEyeTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_SetFoveationEyeTracked
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_SetFoveationEyeTracked)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2630bc0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_SetFoveationEyeTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_StartFaceTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_StartFaceTracking)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2630c3c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_StartFaceTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_StopFaceTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_StopFaceTracking)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2630ca4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_StopFaceTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_StartBodyTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_StartBodyTracking)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2630d0c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_StartBodyTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_StopBodyTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_StopBodyTracking)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2630d74;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_StopBodyTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_StartEyeTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_StartEyeTracking)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2630ddc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_StartEyeTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_StopEyeTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_StopEyeTracking)> {
  constexpr static std::size_t size = 0x68;
  constexpr static std::size_t addrs = 0x2630e44;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_StopEyeTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetEyeTrackingSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetEyeTrackingSupported)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2630eac;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetEyeTrackingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetFaceTrackingSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetFaceTrackingSupported)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2630f28;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetFaceTrackingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetBodyTrackingEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetBodyTrackingEnabled)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2630fa4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetBodyTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetBodyTrackingSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetBodyTrackingSupported)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2631020;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetBodyTrackingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetBodyState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Step, int32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetBodyState)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x263109c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetBodyState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetFaceTrackingEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetFaceTrackingEnabled)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2631130;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetFaceTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetFaceState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Step, int32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetFaceState)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x26311ac;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetFaceState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetEyeTrackingEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetEyeTrackingEnabled)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2631240;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetEyeTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetEyeGazesState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Step, int32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetEyeGazesState)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x26312bc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetEyeGazesState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetControllerState5
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(uint32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetControllerState5)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2631350;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetControllerState5",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_SetControllerLocalizedVibration
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation, float_t, float_t)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_SetControllerLocalizedVibration)> {
  constexpr static std::size_t size = 0x9c;
  constexpr static std::size_t addrs = 0x26313d4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_SetControllerLocalizedVibration",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetLocalDimmingSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetLocalDimmingSupported)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2631470;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetLocalDimmingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_SetLocalDimming
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_SetLocalDimming)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x26314ec;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_SetLocalDimming",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetLocalDimming
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetLocalDimming)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2631568;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetLocalDimming",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetCurrentInteractionProfile
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Hand, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetCurrentInteractionProfile)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x26315e4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetCurrentInteractionProfile",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Hand>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_SetControllerHapticsAmplitudeEnvelope
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_SetControllerHapticsAmplitudeEnvelope)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x2631668;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_SetControllerHapticsAmplitudeEnvelope",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_SetControllerHapticsPcm
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_SetControllerHapticsPcm)> {
  constexpr static std::size_t size = 0x8c;
  constexpr static std::size_t addrs = 0x26316fc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_SetControllerHapticsPcm",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0.ovrp_GetControllerSampleRateHz
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller, ByRef<float_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetControllerSampleRateHz)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2631788;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetControllerSampleRateHz",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<float_t>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetPassthroughCapabilityFlags(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags> capabilityFlags)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetPassthroughCapabilityFlags",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, capabilityFlags);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetFoveationEyeTrackedSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> foveationSupported)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetFoveationEyeTrackedSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, foveationSupported);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetFoveationEyeTracked(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> isEyeTrackedFoveation)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetFoveationEyeTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, isEyeTrackedFoveation);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_SetFoveationEyeTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool isEyeTrackedFoveation)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_SetFoveationEyeTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, isEyeTrackedFoveation);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_StartFaceTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_StartFaceTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_StopFaceTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_StopFaceTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_StartBodyTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_StartBodyTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_StopBodyTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_StopBodyTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_StartEyeTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_StartEyeTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_StopEyeTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_StopEyeTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetEyeTrackingSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> eyeTrackingSupported)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetEyeTrackingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, eyeTrackingSupported);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetFaceTrackingSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> faceTrackingSupported)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetFaceTrackingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, faceTrackingSupported);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetBodyTrackingEnabled(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetBodyTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetBodyTrackingSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetBodyTrackingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetBodyState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal> bodyState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetBodyState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, stepId, frameIndex, bodyState);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetFaceTrackingEnabled(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> faceTrackingEnabled)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetFaceTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, faceTrackingEnabled);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetFaceState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal> faceState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetFaceState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, stepId, frameIndex, faceState);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetEyeTrackingEnabled(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> eyeTrackingEnabled)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetEyeTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, eyeTrackingEnabled);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetEyeGazesState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal> eyeGazesState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetEyeGazesState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, stepId, frameIndex, eyeGazesState);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetControllerState5(uint32_t controllerMask, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5> controllerState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetControllerState5",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, controllerMask, controllerState);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_SetControllerLocalizedVibration(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation hapticsLocationMask, float_t frequency, float_t amplitude)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_SetControllerLocalizedVibration",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, controllerMask, hapticsLocationMask, frequency, amplitude);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetLocalDimmingSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> localDimmingSupported)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetLocalDimmingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, localDimmingSupported);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_SetLocalDimming(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool localDimmingMode)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_SetLocalDimming",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, localDimmingMode);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetLocalDimming(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> localDimmingMode)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetLocalDimming",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, localDimmingMode);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetCurrentInteractionProfile(GlobalNamespace::GlobalNamespace__OVRPlugin__Hand hand, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile> interactionProfile)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetCurrentInteractionProfile",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Hand>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, hand, interactionProfile);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_SetControllerHapticsAmplitudeEnvelope(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration hapticsVibration)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_SetControllerHapticsAmplitudeEnvelope",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, controllerMask, hapticsVibration);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_SetControllerHapticsPcm(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration hapticsVibration)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_SetControllerHapticsPcm",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, controllerMask, hapticsVibration);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0::ovrp_GetControllerSampleRateHz(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controller, ByRef<float_t> sampleRateHz)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0>::get(),
                            "ovrp_GetControllerSampleRateHz",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<float_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, controller, sampleRateHz);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0.ovrp_ShareSpaces
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(void*, uint32_t, void*, uint32_t, ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::ovrp_ShareSpaces)> {
  constexpr static std::size_t size = 0xac;
  constexpr static std::size_t addrs = 0x2631890;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get(),
                            "ovrp_ShareSpaces",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<void*>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<void*>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0.ovrp_SaveSpaceList
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(void*, uint32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation, ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::ovrp_SaveSpaceList)> {
  constexpr static std::size_t size = 0x9c;
  constexpr static std::size_t addrs = 0x263193c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get(),
                            "ovrp_SaveSpaceList",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<void*>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0.ovrp_GetSpaceUserId
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::ovrp_GetSpaceUserId)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x26319d8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get(),
                            "ovrp_GetSpaceUserId",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0.ovrp_CreateSpaceUser
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::ovrp_CreateSpaceUser)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2631a5c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get(),
                            "ovrp_CreateSpaceUser",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0.ovrp_DestroySpaceUser
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::ovrp_DestroySpaceUser)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2631ae0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get(),
                            "ovrp_DestroySpaceUser",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0.ovrp_LocateSpace2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationf>, ByRef<uint64_t>, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::ovrp_LocateSpace2)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x2631b5c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get(),
                            "ovrp_LocateSpace2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationf>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0.ovrp_DeclareUser
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(ByRef<uint64_t>, ByRef<uint64_t>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::ovrp_DeclareUser)> {
  constexpr static std::size_t size = 0x80;
  constexpr static std::size_t addrs = 0x2631bf0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get(),
                            "ovrp_DeclareUser",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get>();
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::ovrp_ShareSpaces(void* spaces, uint32_t numSpaces, void* userHandles, uint32_t numUsers, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get(),
                            "ovrp_ShareSpaces",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<void*>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<void*>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, spaces, numSpaces, userHandles, numUsers, requestId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::ovrp_SaveSpaceList(void* spaces, uint32_t numSpaces, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation location, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get(),
                            "ovrp_SaveSpaceList",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<void*>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, spaces, numSpaces, location, requestId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::ovrp_GetSpaceUserId(ByRef<uint64_t> spaceUserHandle, ByRef<uint64_t> spaceUserId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get(),
                            "ovrp_GetSpaceUserId",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, spaceUserHandle, spaceUserId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::ovrp_CreateSpaceUser(ByRef<uint64_t> spaceUserId, ByRef<uint64_t> spaceUserHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get(),
                            "ovrp_CreateSpaceUser",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, spaceUserId, spaceUserHandle);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::ovrp_DestroySpaceUser(ByRef<uint64_t> userHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get(),
                            "ovrp_DestroySpaceUser",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, userHandle);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::ovrp_LocateSpace2(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationf> location, ByRef<uint64_t> space, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin trackingOrigin)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get(),
                            "ovrp_LocateSpace2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationf>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, location, space, trackingOrigin);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0::ovrp_DeclareUser(ByRef<uint64_t> userId, ByRef<uint64_t> userHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0>::get(),
                            "ovrp_DeclareUser",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, userId, userHandle);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_81_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_81_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_81_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_81_0>::get>();
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_82_0::__set_version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_82_0>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_82_0::__get_version()  {
return ::cordl_internals::getStaticField<System::Version, "version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_82_0>::get>();
}
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_version
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Version (*)()>(&GlobalNamespace::OVRPlugin::get_version)> {
  constexpr static std::size_t size = 0x560;
  constexpr static std::size_t addrs = 0x260cf88;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_version",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_nativeSDKVersion
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Version (*)()>(&GlobalNamespace::OVRPlugin::get_nativeSDKVersion)> {
  constexpr static std::size_t size = 0x2bc;
  constexpr static std::size_t addrs = 0x260d4e8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_nativeSDKVersion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.IsSuccess
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Result)>(&GlobalNamespace::OVRPlugin::IsSuccess)> {
  constexpr static std::size_t size = 0xc;
  constexpr static std::size_t addrs = 0x260d7a4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsSuccess",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Result>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetLogCallback2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType)>(&GlobalNamespace::OVRPlugin::SetLogCallback2)> {
  constexpr static std::size_t size = 0x108;
  constexpr static std::size_t addrs = 0x260d7b0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetLogCallback2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.IsPassthroughShape
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape)>(&GlobalNamespace::OVRPlugin::IsPassthroughShape)> {
  constexpr static std::size_t size = 0x30;
  constexpr static std::size_t addrs = 0x2603b98;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsPassthroughShape",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.IsPositionValid
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags)>(&GlobalNamespace::OVRPlugin::IsPositionValid)> {
  constexpr static std::size_t size = 0x8;
  constexpr static std::size_t addrs = 0x260d8b8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsPositionValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.IsOrientationValid
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags)>(&GlobalNamespace::OVRPlugin::IsOrientationValid)> {
  constexpr static std::size_t size = 0x8;
  constexpr static std::size_t addrs = 0x260d8c0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsOrientationValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.IsPositionTracked
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags)>(&GlobalNamespace::OVRPlugin::IsPositionTracked)> {
  constexpr static std::size_t size = 0x8;
  constexpr static std::size_t addrs = 0x260d8c8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsPositionTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.IsOrientationTracked
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags)>(&GlobalNamespace::OVRPlugin::IsOrientationTracked)> {
  constexpr static std::size_t size = 0x8;
  constexpr static std::size_t addrs = 0x260d8d0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsOrientationTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_initialized
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_initialized)> {
  constexpr static std::size_t size = 0x5c;
  constexpr static std::size_t addrs = 0x25ff8f0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_initialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_nativeXrApi
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi (*)()>(&GlobalNamespace::OVRPlugin::get_nativeXrApi)> {
  constexpr static std::size_t size = 0x19c;
  constexpr static std::size_t addrs = 0x2603674;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_nativeXrApi",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_chromatic
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_chromatic)> {
  constexpr static std::size_t size = 0xd8;
  constexpr static std::size_t addrs = 0x260d8d8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_chromatic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_chromatic
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_chromatic)> {
  constexpr static std::size_t size = 0xf8;
  constexpr static std::size_t addrs = 0x260d9b0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_chromatic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_monoscopic
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_monoscopic)> {
  constexpr static std::size_t size = 0x90;
  constexpr static std::size_t addrs = 0x260dab0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_monoscopic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_monoscopic
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_monoscopic)> {
  constexpr static std::size_t size = 0xa4;
  constexpr static std::size_t addrs = 0x260db40;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_monoscopic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_rotation
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_rotation)> {
  constexpr static std::size_t size = 0x90;
  constexpr static std::size_t addrs = 0x260dbe4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_rotation",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_rotation
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_rotation)> {
  constexpr static std::size_t size = 0xa4;
  constexpr static std::size_t addrs = 0x260dc74;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_rotation",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_position
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_position)> {
  constexpr static std::size_t size = 0x90;
  constexpr static std::size_t addrs = 0x260dd18;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_position",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_position
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_position)> {
  constexpr static std::size_t size = 0xa4;
  constexpr static std::size_t addrs = 0x260dda8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_position",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_useIPDInPositionTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_useIPDInPositionTracking)> {
  constexpr static std::size_t size = 0xd8;
  constexpr static std::size_t addrs = 0x260de4c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_useIPDInPositionTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_useIPDInPositionTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_useIPDInPositionTracking)> {
  constexpr static std::size_t size = 0xf8;
  constexpr static std::size_t addrs = 0x260df24;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_useIPDInPositionTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_positionSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_positionSupported)> {
  constexpr static std::size_t size = 0x90;
  constexpr static std::size_t addrs = 0x260e01c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_positionSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_positionTracked
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_positionTracked)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x260e0ac;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_positionTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_powerSaving
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_powerSaving)> {
  constexpr static std::size_t size = 0x90;
  constexpr static std::size_t addrs = 0x260e140;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_powerSaving",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_hmdPresent
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_hmdPresent)> {
  constexpr static std::size_t size = 0x94;
  constexpr static std::size_t addrs = 0x260e1d0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_hmdPresent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_userPresent
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_userPresent)> {
  constexpr static std::size_t size = 0x90;
  constexpr static std::size_t addrs = 0x260e264;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_userPresent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_headphonesPresent
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_headphonesPresent)> {
  constexpr static std::size_t size = 0x90;
  constexpr static std::size_t addrs = 0x260e2f4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_headphonesPresent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_recommendedMSAALevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int32_t (*)()>(&GlobalNamespace::OVRPlugin::get_recommendedMSAALevel)> {
  constexpr static std::size_t size = 0xd4;
  constexpr static std::size_t addrs = 0x260e384;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_recommendedMSAALevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_systemRegion
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion (*)()>(&GlobalNamespace::OVRPlugin::get_systemRegion)> {
  constexpr static std::size_t size = 0xd4;
  constexpr static std::size_t addrs = 0x260e458;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_systemRegion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_audioOutId
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRPlugin::get_audioOutId)> {
  constexpr static std::size_t size = 0x314;
  constexpr static std::size_t addrs = 0x260e52c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_audioOutId",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_audioInId
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRPlugin::get_audioInId)> {
  constexpr static std::size_t size = 0x314;
  constexpr static std::size_t addrs = 0x260e840;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_audioInId",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_hasVrFocus
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_hasVrFocus)> {
  constexpr static std::size_t size = 0x5c;
  constexpr static std::size_t addrs = 0x260eb54;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_hasVrFocus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_hasInputFocus
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_hasInputFocus)> {
  constexpr static std::size_t size = 0xdc;
  constexpr static std::size_t addrs = 0x260ebb0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_hasInputFocus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_shouldQuit
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_shouldQuit)> {
  constexpr static std::size_t size = 0x5c;
  constexpr static std::size_t addrs = 0x260ec8c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_shouldQuit",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_shouldRecenter
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_shouldRecenter)> {
  constexpr static std::size_t size = 0x5c;
  constexpr static std::size_t addrs = 0x260ece8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_shouldRecenter",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_productName
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRPlugin::get_productName)> {
  constexpr static std::size_t size = 0x50;
  constexpr static std::size_t addrs = 0x260ed44;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_productName",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_latency
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::StringW (*)()>(&GlobalNamespace::OVRPlugin::get_latency)> {
  constexpr static std::size_t size = 0xa8;
  constexpr static std::size_t addrs = 0x260ed94;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_latency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_eyeDepth
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::OVRPlugin::get_eyeDepth)> {
  constexpr static std::size_t size = 0x8c;
  constexpr static std::size_t addrs = 0x260ee3c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_eyeDepth",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_eyeDepth
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float_t)>(&GlobalNamespace::OVRPlugin::set_eyeDepth)> {
  constexpr static std::size_t size = 0x60;
  constexpr static std::size_t addrs = 0x260eec8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_eyeDepth",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_eyeHeight
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::OVRPlugin::get_eyeHeight)> {
  constexpr static std::size_t size = 0x50;
  constexpr static std::size_t addrs = 0x260ef28;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_eyeHeight",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_eyeHeight
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float_t)>(&GlobalNamespace::OVRPlugin::set_eyeHeight)> {
  constexpr static std::size_t size = 0x60;
  constexpr static std::size_t addrs = 0x260ef78;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_eyeHeight",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_batteryLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::OVRPlugin::get_batteryLevel)> {
  constexpr static std::size_t size = 0x50;
  constexpr static std::size_t addrs = 0x260efd8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_batteryLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_batteryTemperature
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::OVRPlugin::get_batteryTemperature)> {
  constexpr static std::size_t size = 0x50;
  constexpr static std::size_t addrs = 0x260f028;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_batteryTemperature",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_suggestedCpuPerfLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel (*)()>(&GlobalNamespace::OVRPlugin::get_suggestedCpuPerfLevel)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x260f078;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_suggestedCpuPerfLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_suggestedCpuPerfLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel)>(&GlobalNamespace::OVRPlugin::set_suggestedCpuPerfLevel)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x260f148;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_suggestedCpuPerfLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_suggestedGpuPerfLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel (*)()>(&GlobalNamespace::OVRPlugin::get_suggestedGpuPerfLevel)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x260f208;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_suggestedGpuPerfLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_suggestedGpuPerfLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel)>(&GlobalNamespace::OVRPlugin::set_suggestedGpuPerfLevel)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x260f2d8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_suggestedGpuPerfLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_cpuLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int32_t (*)()>(&GlobalNamespace::OVRPlugin::get_cpuLevel)> {
  constexpr static std::size_t size = 0x50;
  constexpr static std::size_t addrs = 0x260f398;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_cpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_cpuLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int32_t)>(&GlobalNamespace::OVRPlugin::set_cpuLevel)> {
  constexpr static std::size_t size = 0x58;
  constexpr static std::size_t addrs = 0x260f3e8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_cpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_gpuLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int32_t (*)()>(&GlobalNamespace::OVRPlugin::get_gpuLevel)> {
  constexpr static std::size_t size = 0x50;
  constexpr static std::size_t addrs = 0x260f440;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_gpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_gpuLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int32_t)>(&GlobalNamespace::OVRPlugin::set_gpuLevel)> {
  constexpr static std::size_t size = 0x58;
  constexpr static std::size_t addrs = 0x260f490;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_gpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_vsyncCount
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int32_t (*)()>(&GlobalNamespace::OVRPlugin::get_vsyncCount)> {
  constexpr static std::size_t size = 0x50;
  constexpr static std::size_t addrs = 0x260f4e8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_vsyncCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_vsyncCount
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(int32_t)>(&GlobalNamespace::OVRPlugin::set_vsyncCount)> {
  constexpr static std::size_t size = 0x58;
  constexpr static std::size_t addrs = 0x260f538;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_vsyncCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_systemVolume
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::OVRPlugin::get_systemVolume)> {
  constexpr static std::size_t size = 0x50;
  constexpr static std::size_t addrs = 0x260f590;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_systemVolume",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_ipd
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::OVRPlugin::get_ipd)> {
  constexpr static std::size_t size = 0x50;
  constexpr static std::size_t addrs = 0x260f5e0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_ipd",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_ipd
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float_t)>(&GlobalNamespace::OVRPlugin::set_ipd)> {
  constexpr static std::size_t size = 0x60;
  constexpr static std::size_t addrs = 0x260f630;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_ipd",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_occlusionMesh
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_occlusionMesh)> {
  constexpr static std::size_t size = 0x90;
  constexpr static std::size_t addrs = 0x260f690;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_occlusionMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_occlusionMesh
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_occlusionMesh)> {
  constexpr static std::size_t size = 0xa4;
  constexpr static std::size_t addrs = 0x260f720;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_occlusionMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_batteryStatus
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus (*)()>(&GlobalNamespace::OVRPlugin::get_batteryStatus)> {
  constexpr static std::size_t size = 0x50;
  constexpr static std::size_t addrs = 0x260f7c4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_batteryStatus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetEyeFrustum
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Eye)>(&GlobalNamespace::OVRPlugin::GetEyeFrustum)> {
  constexpr static std::size_t size = 0x58;
  constexpr static std::size_t addrs = 0x260f814;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetEyeFrustum",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Eye>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetEyeTextureSize
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Eye)>(&GlobalNamespace::OVRPlugin::GetEyeTextureSize)> {
  constexpr static std::size_t size = 0x58;
  constexpr static std::size_t addrs = 0x260f86c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetEyeTextureSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Eye>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetTrackerPose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker)>(&GlobalNamespace::OVRPlugin::GetTrackerPose)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x260f8c4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetTrackerPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetTrackerFrustum
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker)>(&GlobalNamespace::OVRPlugin::GetTrackerFrustum)> {
  constexpr static std::size_t size = 0x58;
  constexpr static std::size_t addrs = 0x260fb70;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetTrackerFrustum",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.ShowUI
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI)>(&GlobalNamespace::OVRPlugin::ShowUI)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x260fbc8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "ShowUI",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.EnqueueSubmitLayer
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool, bool, bool, ::cordl_internals::intptr_t, ::cordl_internals::intptr_t, int32_t, int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape, bool, GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf, bool, UnityEngine::Vector4, UnityEngine::Vector4, bool, bool, bool, bool, bool, bool, bool)>(&GlobalNamespace::OVRPlugin::EnqueueSubmitLayer)> {
  constexpr static std::size_t size = 0x558;
  constexpr static std::size_t addrs = 0x26016dc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "EnqueueSubmitLayer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Vector4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Vector4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.CalculateLayerDesc
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape, GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, int32_t, int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, int32_t)>(&GlobalNamespace::OVRPlugin::CalculateLayerDesc)> {
  constexpr static std::size_t size = 0x198;
  constexpr static std::size_t addrs = 0x26006ec;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "CalculateLayerDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.EnqueueSetupLayer
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc, int32_t, ::cordl_internals::intptr_t)>(&GlobalNamespace::OVRPlugin::EnqueueSetupLayer)> {
  constexpr static std::size_t size = 0x208;
  constexpr static std::size_t addrs = 0x2600884;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "EnqueueSetupLayer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.EnqueueDestroyLayer
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::cordl_internals::intptr_t)>(&GlobalNamespace::OVRPlugin::EnqueueDestroyLayer)> {
  constexpr static std::size_t size = 0xe0;
  constexpr static std::size_t addrs = 0x2601c34;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "EnqueueDestroyLayer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetLayerTexture
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::cordl_internals::intptr_t (*)(int32_t, int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Eye)>(&GlobalNamespace::OVRPlugin::GetLayerTexture)> {
  constexpr static std::size_t size = 0x124;
  constexpr static std::size_t addrs = 0x26011d4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetLayerTexture",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Eye>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetLayerTextureStageCount
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int32_t (*)(int32_t)>(&GlobalNamespace::OVRPlugin::GetLayerTextureStageCount)> {
  constexpr static std::size_t size = 0xfc;
  constexpr static std::size_t addrs = 0x2600a8c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetLayerTextureStageCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetLayerAndroidSurfaceObject
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::cordl_internals::intptr_t (*)(int32_t)>(&GlobalNamespace::OVRPlugin::GetLayerAndroidSurfaceObject)> {
  constexpr static std::size_t size = 0x10c;
  constexpr static std::size_t addrs = 0x26010c8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetLayerAndroidSurfaceObject",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.UpdateNodePhysicsPoses
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int32_t, double_t)>(&GlobalNamespace::OVRPlugin::UpdateNodePhysicsPoses)> {
  constexpr static std::size_t size = 0xdc;
  constexpr static std::size_t addrs = 0x260fc2c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "UpdateNodePhysicsPoses",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNodePose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node, GlobalNamespace::GlobalNamespace__OVRPlugin__Step)>(&GlobalNamespace::OVRPlugin::GetNodePose)> {
  constexpr static std::size_t size = 0x228;
  constexpr static std::size_t addrs = 0x260f948;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodePose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNodeVelocity
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node, GlobalNamespace::GlobalNamespace__OVRPlugin__Step)>(&GlobalNamespace::OVRPlugin::GetNodeVelocity)> {
  constexpr static std::size_t size = 0x20c;
  constexpr static std::size_t addrs = 0x260fd08;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodeVelocity",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNodeAngularVelocity
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node, GlobalNamespace::GlobalNamespace__OVRPlugin__Step)>(&GlobalNamespace::OVRPlugin::GetNodeAngularVelocity)> {
  constexpr static std::size_t size = 0x150;
  constexpr static std::size_t addrs = 0x260ff14;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodeAngularVelocity",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNodeAcceleration
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node, GlobalNamespace::GlobalNamespace__OVRPlugin__Step)>(&GlobalNamespace::OVRPlugin::GetNodeAcceleration)> {
  constexpr static std::size_t size = 0x20c;
  constexpr static std::size_t addrs = 0x2610064;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodeAcceleration",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNodeAngularAcceleration
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node, GlobalNamespace::GlobalNamespace__OVRPlugin__Step)>(&GlobalNamespace::OVRPlugin::GetNodeAngularAcceleration)> {
  constexpr static std::size_t size = 0x150;
  constexpr static std::size_t addrs = 0x2610270;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodeAngularAcceleration",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNodePresent
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::OVRPlugin::GetNodePresent)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x26103c0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodePresent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNodeOrientationTracked
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::OVRPlugin::GetNodeOrientationTracked)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x2610424;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodeOrientationTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNodeOrientationValid
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::OVRPlugin::GetNodeOrientationValid)> {
  constexpr static std::size_t size = 0x104;
  constexpr static std::size_t addrs = 0x2610488;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodeOrientationValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNodePositionTracked
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::OVRPlugin::GetNodePositionTracked)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x261058c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodePositionTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNodePositionValid
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::OVRPlugin::GetNodePositionValid)> {
  constexpr static std::size_t size = 0x104;
  constexpr static std::size_t addrs = 0x26105f0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodePositionValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNodePoseStateRaw
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node, GlobalNamespace::GlobalNamespace__OVRPlugin__Step)>(&GlobalNamespace::OVRPlugin::GetNodePoseStateRaw)> {
  constexpr static std::size_t size = 0x238;
  constexpr static std::size_t addrs = 0x26106f4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodePoseStateRaw",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNodePoseStateAtTime
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef (*)(double_t, GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::OVRPlugin::GetNodePoseStateAtTime)> {
  constexpr static std::size_t size = 0x138;
  constexpr static std::size_t addrs = 0x261092c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodePoseStateAtTime",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNodePoseStateImmediate
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node)>(&GlobalNamespace::OVRPlugin::GetNodePoseStateImmediate)> {
  constexpr static std::size_t size = 0x128;
  constexpr static std::size_t addrs = 0x2610a64;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodePoseStateImmediate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetCurrentTrackingTransformPose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef (*)()>(&GlobalNamespace::OVRPlugin::GetCurrentTrackingTransformPose)> {
  constexpr static std::size_t size = 0x120;
  constexpr static std::size_t addrs = 0x2610b8c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetCurrentTrackingTransformPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetTrackingTransformRawPose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef (*)()>(&GlobalNamespace::OVRPlugin::GetTrackingTransformRawPose)> {
  constexpr static std::size_t size = 0x120;
  constexpr static std::size_t addrs = 0x2610cac;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetTrackingTransformRawPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetTrackingTransformRelativePose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin)>(&GlobalNamespace::OVRPlugin::GetTrackingTransformRelativePose)> {
  constexpr static std::size_t size = 0x160;
  constexpr static std::size_t addrs = 0x2610dcc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetTrackingTransformRelativePose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetControllerState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState (*)(uint32_t)>(&GlobalNamespace::OVRPlugin::GetControllerState)> {
  constexpr static std::size_t size = 0x84;
  constexpr static std::size_t addrs = 0x2610f2c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetControllerState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetControllerState2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2 (*)(uint32_t)>(&GlobalNamespace::OVRPlugin::GetControllerState2)> {
  constexpr static std::size_t size = 0x144;
  constexpr static std::size_t addrs = 0x2610fb0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetControllerState2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetControllerState4
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4 (*)(uint32_t)>(&GlobalNamespace::OVRPlugin::GetControllerState4)> {
  constexpr static std::size_t size = 0x15c;
  constexpr static std::size_t addrs = 0x26110f4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetControllerState4",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetControllerState5
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5 (*)(uint32_t)>(&GlobalNamespace::OVRPlugin::GetControllerState5)> {
  constexpr static std::size_t size = 0x164;
  constexpr static std::size_t addrs = 0x2611250;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetControllerState5",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetCurrentInteractionProfile
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Hand)>(&GlobalNamespace::OVRPlugin::GetCurrentInteractionProfile)> {
  constexpr static std::size_t size = 0xd4;
  constexpr static std::size_t addrs = 0x26113b4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetCurrentInteractionProfile",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Hand>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetControllerVibration
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint32_t, float_t, float_t)>(&GlobalNamespace::OVRPlugin::SetControllerVibration)> {
  constexpr static std::size_t size = 0x7c;
  constexpr static std::size_t addrs = 0x2611488;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetControllerVibration",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetControllerLocalizedVibration
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation, float_t, float_t)>(&GlobalNamespace::OVRPlugin::SetControllerLocalizedVibration)> {
  constexpr static std::size_t size = 0xf0;
  constexpr static std::size_t addrs = 0x2611504;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetControllerLocalizedVibration",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetControllerHapticsAmplitudeEnvelope
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration)>(&GlobalNamespace::OVRPlugin::SetControllerHapticsAmplitudeEnvelope)> {
  constexpr static std::size_t size = 0xe0;
  constexpr static std::size_t addrs = 0x26115f4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetControllerHapticsAmplitudeEnvelope",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetControllerHapticsPcm
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration)>(&GlobalNamespace::OVRPlugin::SetControllerHapticsPcm)> {
  constexpr static std::size_t size = 0xf0;
  constexpr static std::size_t addrs = 0x26116d4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetControllerHapticsPcm",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetControllerSampleRateHz
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller, ByRef<float_t>)>(&GlobalNamespace::OVRPlugin::GetControllerSampleRateHz)> {
  constexpr static std::size_t size = 0xdc;
  constexpr static std::size_t addrs = 0x26117c4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetControllerSampleRateHz",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<float_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetControllerHapticsDesc
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc (*)(uint32_t)>(&GlobalNamespace::OVRPlugin::GetControllerHapticsDesc)> {
  constexpr static std::size_t size = 0xec;
  constexpr static std::size_t addrs = 0x26118a0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetControllerHapticsDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetControllerHapticsState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState (*)(uint32_t)>(&GlobalNamespace::OVRPlugin::GetControllerHapticsState)> {
  constexpr static std::size_t size = 0xc4;
  constexpr static std::size_t addrs = 0x261198c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetControllerHapticsState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetControllerHaptics
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer)>(&GlobalNamespace::OVRPlugin::SetControllerHaptics)> {
  constexpr static std::size_t size = 0xe0;
  constexpr static std::size_t addrs = 0x2611a50;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetControllerHaptics",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetEyeRecommendedResolutionScale
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::OVRPlugin::GetEyeRecommendedResolutionScale)> {
  constexpr static std::size_t size = 0xbc;
  constexpr static std::size_t addrs = 0x2611b30;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetEyeRecommendedResolutionScale",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetAppCpuStartToGpuEndTime
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::OVRPlugin::GetAppCpuStartToGpuEndTime)> {
  constexpr static std::size_t size = 0xbc;
  constexpr static std::size_t addrs = 0x2611bec;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetAppCpuStartToGpuEndTime",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetBoundaryConfigured
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::GetBoundaryConfigured)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x2611ca8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetBoundaryConfigured",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.TestBoundaryNode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node, GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType)>(&GlobalNamespace::OVRPlugin::TestBoundaryNode)> {
  constexpr static std::size_t size = 0xec;
  constexpr static std::size_t addrs = 0x2611d68;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "TestBoundaryNode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.TestBoundaryPoint
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType)>(&GlobalNamespace::OVRPlugin::TestBoundaryPoint)> {
  constexpr static std::size_t size = 0x10c;
  constexpr static std::size_t addrs = 0x2611e54;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "TestBoundaryPoint",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetBoundaryGeometry
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType)>(&GlobalNamespace::OVRPlugin::GetBoundaryGeometry)> {
  constexpr static std::size_t size = 0xec;
  constexpr static std::size_t addrs = 0x2611f60;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetBoundaryGeometry",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetBoundaryGeometry2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType, ::cordl_internals::intptr_t, ByRef<int32_t>)>(&GlobalNamespace::OVRPlugin::GetBoundaryGeometry2)> {
  constexpr static std::size_t size = 0xe4;
  constexpr static std::size_t addrs = 0x261204c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetBoundaryGeometry2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetAppPerfStats
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats (*)()>(&GlobalNamespace::OVRPlugin::GetAppPerfStats)> {
  constexpr static std::size_t size = 0x178;
  constexpr static std::size_t addrs = 0x2612130;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetAppPerfStats",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.ResetAppPerfStats
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::ResetAppPerfStats)> {
  constexpr static std::size_t size = 0x164;
  constexpr static std::size_t addrs = 0x26122a8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "ResetAppPerfStats",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetAppFramerate
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::OVRPlugin::GetAppFramerate)> {
  constexpr static std::size_t size = 0xbc;
  constexpr static std::size_t addrs = 0x261240c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetAppFramerate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetHandNodePoseStateLatency
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(double_t)>(&GlobalNamespace::OVRPlugin::SetHandNodePoseStateLatency)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x26124c8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetHandNodePoseStateLatency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetHandNodePoseStateLatency
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double_t (*)()>(&GlobalNamespace::OVRPlugin::GetHandNodePoseStateLatency)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x2612598;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetHandNodePoseStateLatency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetDesiredEyeTextureFormat
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat (*)()>(&GlobalNamespace::OVRPlugin::GetDesiredEyeTextureFormat)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x2612668;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetDesiredEyeTextureFormat",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetDesiredEyeTextureFormat
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat)>(&GlobalNamespace::OVRPlugin::SetDesiredEyeTextureFormat)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x2612728;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetDesiredEyeTextureFormat",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.InitializeMixedReality
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::InitializeMixedReality)> {
  constexpr static std::size_t size = 0xd4;
  constexpr static std::size_t addrs = 0x25ffa20;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "InitializeMixedReality",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.ShutdownMixedReality
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::ShutdownMixedReality)> {
  constexpr static std::size_t size = 0xd4;
  constexpr static std::size_t addrs = 0x25ffca8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "ShutdownMixedReality",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.IsMixedRealityInitialized
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::IsMixedRealityInitialized)> {
  constexpr static std::size_t size = 0xd4;
  constexpr static std::size_t addrs = 0x25ff94c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsMixedRealityInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetExternalCameraCount
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int32_t (*)()>(&GlobalNamespace::OVRPlugin::GetExternalCameraCount)> {
  constexpr static std::size_t size = 0xe4;
  constexpr static std::size_t addrs = 0x26127f0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetExternalCameraCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.UpdateExternalCamera
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::UpdateExternalCamera)> {
  constexpr static std::size_t size = 0xd4;
  constexpr static std::size_t addrs = 0x25ffaf4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "UpdateExternalCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetMixedRealityCameraInfo
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>)>(&GlobalNamespace::OVRPlugin::GetMixedRealityCameraInfo)> {
  constexpr static std::size_t size = 0x134;
  constexpr static std::size_t addrs = 0x26128d4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetMixedRealityCameraInfo",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.OverrideExternalCameraFov
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int32_t, bool, GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf)>(&GlobalNamespace::OVRPlugin::OverrideExternalCameraFov)> {
  constexpr static std::size_t size = 0xf0;
  constexpr static std::size_t addrs = 0x2612a08;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "OverrideExternalCameraFov",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetUseOverriddenExternalCameraFov
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int32_t)>(&GlobalNamespace::OVRPlugin::GetUseOverriddenExternalCameraFov)> {
  constexpr static std::size_t size = 0xec;
  constexpr static std::size_t addrs = 0x2612af8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetUseOverriddenExternalCameraFov",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.OverrideExternalCameraStaticPose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int32_t, bool, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef)>(&GlobalNamespace::OVRPlugin::OverrideExternalCameraStaticPose)> {
  constexpr static std::size_t size = 0xe4;
  constexpr static std::size_t addrs = 0x2612be4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "OverrideExternalCameraStaticPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetUseOverriddenExternalCameraStaticPose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int32_t)>(&GlobalNamespace::OVRPlugin::GetUseOverriddenExternalCameraStaticPose)> {
  constexpr static std::size_t size = 0xec;
  constexpr static std::size_t addrs = 0x2612cc8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetUseOverriddenExternalCameraStaticPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.ResetDefaultExternalCamera
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::ResetDefaultExternalCamera)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x2612db4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "ResetDefaultExternalCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetDefaultExternalCamera
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>)>(&GlobalNamespace::OVRPlugin::SetDefaultExternalCamera)> {
  constexpr static std::size_t size = 0xe0;
  constexpr static std::size_t addrs = 0x2612e74;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetDefaultExternalCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetExternalCameraProperties
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>)>(&GlobalNamespace::OVRPlugin::SetExternalCameraProperties)> {
  constexpr static std::size_t size = 0xe0;
  constexpr static std::size_t addrs = 0x2612f54;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetExternalCameraProperties",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.IsInsightPassthroughSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::IsInsightPassthroughSupported)> {
  constexpr static std::size_t size = 0x16c;
  constexpr static std::size_t addrs = 0x2613034;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsInsightPassthroughSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.InitializeInsightPassthrough
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::InitializeInsightPassthrough)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x26131a0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "InitializeInsightPassthrough",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.ShutdownInsightPassthrough
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::ShutdownInsightPassthrough)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x2613260;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "ShutdownInsightPassthrough",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.IsInsightPassthroughInitialized
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::IsInsightPassthroughInitialized)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x2613320;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsInsightPassthroughInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetInsightPassthroughInitializationState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)()>(&GlobalNamespace::OVRPlugin::GetInsightPassthroughInitializationState)> {
  constexpr static std::size_t size = 0xbc;
  constexpr static std::size_t addrs = 0x26133e0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetInsightPassthroughInitializationState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.CreateInsightTriangleMesh
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int32_t, ::ArrayW<UnityEngine::Vector3>, ::ArrayW<int32_t>, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::CreateInsightTriangleMesh)> {
  constexpr static std::size_t size = 0x1a8;
  constexpr static std::size_t addrs = 0x260a078;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "CreateInsightTriangleMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<UnityEngine::Vector3>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<int32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.DestroyInsightTriangleMesh
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::DestroyInsightTriangleMesh)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x26089d4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "DestroyInsightTriangleMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.AddInsightPassthroughSurfaceGeometry
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int32_t, uint64_t, UnityEngine::Matrix4x4, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::AddInsightPassthroughSurfaceGeometry)> {
  constexpr static std::size_t size = 0x124;
  constexpr static std::size_t addrs = 0x260a220;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "AddInsightPassthroughSurfaceGeometry",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Matrix4x4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.DestroyInsightPassthroughGeometryInstance
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::DestroyInsightPassthroughGeometryInstance)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x260890c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "DestroyInsightPassthroughGeometryInstance",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.UpdateInsightPassthroughGeometryTransform
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, UnityEngine::Matrix4x4)>(&GlobalNamespace::OVRPlugin::UpdateInsightPassthroughGeometryTransform)> {
  constexpr static std::size_t size = 0x108;
  constexpr static std::size_t addrs = 0x260aa98;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "UpdateInsightPassthroughGeometryTransform",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Matrix4x4>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetInsightPassthroughStyle
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle)>(&GlobalNamespace::OVRPlugin::SetInsightPassthroughStyle)> {
  constexpr static std::size_t size = 0x100;
  constexpr static std::size_t addrs = 0x260b548;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetInsightPassthroughStyle",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetInsightPassthroughKeyboardHandsIntensity
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(int32_t, GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity)>(&GlobalNamespace::OVRPlugin::SetInsightPassthroughKeyboardHandsIntensity)> {
  constexpr static std::size_t size = 0xe0;
  constexpr static std::size_t addrs = 0x261349c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetInsightPassthroughKeyboardHandsIntensity",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetPassthroughCapabilityFlags
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags (*)()>(&GlobalNamespace::OVRPlugin::GetPassthroughCapabilityFlags)> {
  constexpr static std::size_t size = 0x1b4;
  constexpr static std::size_t addrs = 0x261357c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetPassthroughCapabilityFlags",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetBoundaryDimensions
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType)>(&GlobalNamespace::OVRPlugin::GetBoundaryDimensions)> {
  constexpr static std::size_t size = 0xc4;
  constexpr static std::size_t addrs = 0x2613730;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetBoundaryDimensions",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetBoundaryVisible
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::GetBoundaryVisible)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x26137f4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetBoundaryVisible",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetBoundaryVisible
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(bool)>(&GlobalNamespace::OVRPlugin::SetBoundaryVisible)> {
  constexpr static std::size_t size = 0xe4;
  constexpr static std::size_t addrs = 0x26138b4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetBoundaryVisible",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSystemHeadsetType
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset (*)()>(&GlobalNamespace::OVRPlugin::GetSystemHeadsetType)> {
  constexpr static std::size_t size = 0xbc;
  constexpr static std::size_t addrs = 0x2613998;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSystemHeadsetType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetActiveController
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller (*)()>(&GlobalNamespace::OVRPlugin::GetActiveController)> {
  constexpr static std::size_t size = 0xbc;
  constexpr static std::size_t addrs = 0x2613a54;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetActiveController",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetConnectedControllers
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller (*)()>(&GlobalNamespace::OVRPlugin::GetConnectedControllers)> {
  constexpr static std::size_t size = 0xbc;
  constexpr static std::size_t addrs = 0x2613b10;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetConnectedControllers",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.ToBool
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool (*)(bool)>(&GlobalNamespace::OVRPlugin::ToBool)> {
  constexpr static std::size_t size = 0x8;
  constexpr static std::size_t addrs = 0x260daa8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "ToBool",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetTrackingOriginType
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin (*)()>(&GlobalNamespace::OVRPlugin::GetTrackingOriginType)> {
  constexpr static std::size_t size = 0x50;
  constexpr static std::size_t addrs = 0x2613bcc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetTrackingOriginType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetTrackingOriginType
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin)>(&GlobalNamespace::OVRPlugin::SetTrackingOriginType)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x2613c1c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetTrackingOriginType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetTrackingCalibratedOrigin
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef (*)()>(&GlobalNamespace::OVRPlugin::GetTrackingCalibratedOrigin)> {
  constexpr static std::size_t size = 0x74;
  constexpr static std::size_t addrs = 0x2613c80;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetTrackingCalibratedOrigin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetTrackingCalibratedOrigin
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::SetTrackingCalibratedOrigin)> {
  constexpr static std::size_t size = 0x5c;
  constexpr static std::size_t addrs = 0x2613cf4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetTrackingCalibratedOrigin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.RecenterTrackingOrigin
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags)>(&GlobalNamespace::OVRPlugin::RecenterTrackingOrigin)> {
  constexpr static std::size_t size = 0x64;
  constexpr static std::size_t addrs = 0x2613d50;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "RecenterTrackingOrigin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_foveatedRenderingSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_foveatedRenderingSupported)> {
  constexpr static std::size_t size = 0x74;
  constexpr static std::size_t addrs = 0x2613db4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_foveatedRenderingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_eyeTrackedFoveatedRenderingSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_eyeTrackedFoveatedRenderingSupported)> {
  constexpr static std::size_t size = 0xcc;
  constexpr static std::size_t addrs = 0x2613ef8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_eyeTrackedFoveatedRenderingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_eyeTrackedFoveatedRenderingEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_eyeTrackedFoveatedRenderingEnabled)> {
  constexpr static std::size_t size = 0xec;
  constexpr static std::size_t addrs = 0x2613fc4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_eyeTrackedFoveatedRenderingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_eyeTrackedFoveatedRenderingEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_eyeTrackedFoveatedRenderingEnabled)> {
  constexpr static std::size_t size = 0xe8;
  constexpr static std::size_t addrs = 0x26140b0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_eyeTrackedFoveatedRenderingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_fixedFoveatedRenderingSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_fixedFoveatedRenderingSupported)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x2613e28;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_fixedFoveatedRenderingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_foveatedRenderingLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel (*)()>(&GlobalNamespace::OVRPlugin::get_foveatedRenderingLevel)> {
  constexpr static std::size_t size = 0xe4;
  constexpr static std::size_t addrs = 0x2614198;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_foveatedRenderingLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_foveatedRenderingLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel)>(&GlobalNamespace::OVRPlugin::set_foveatedRenderingLevel)> {
  constexpr static std::size_t size = 0xe4;
  constexpr static std::size_t addrs = 0x261427c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_foveatedRenderingLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_fixedFoveatedRenderingLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel (*)()>(&GlobalNamespace::OVRPlugin::get_fixedFoveatedRenderingLevel)> {
  constexpr static std::size_t size = 0x4c;
  constexpr static std::size_t addrs = 0x2614360;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_fixedFoveatedRenderingLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_fixedFoveatedRenderingLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel)>(&GlobalNamespace::OVRPlugin::set_fixedFoveatedRenderingLevel)> {
  constexpr static std::size_t size = 0x54;
  constexpr static std::size_t addrs = 0x26143ac;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_fixedFoveatedRenderingLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_useDynamicFoveatedRendering
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_useDynamicFoveatedRendering)> {
  constexpr static std::size_t size = 0xf0;
  constexpr static std::size_t addrs = 0x2614400;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_useDynamicFoveatedRendering",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_useDynamicFoveatedRendering
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_useDynamicFoveatedRendering)> {
  constexpr static std::size_t size = 0xe8;
  constexpr static std::size_t addrs = 0x26144f0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_useDynamicFoveatedRendering",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_useDynamicFixedFoveatedRendering
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_useDynamicFixedFoveatedRendering)> {
  constexpr static std::size_t size = 0x4c;
  constexpr static std::size_t addrs = 0x26145d8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_useDynamicFixedFoveatedRendering",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_useDynamicFixedFoveatedRendering
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_useDynamicFixedFoveatedRendering)> {
  constexpr static std::size_t size = 0x54;
  constexpr static std::size_t addrs = 0x2614624;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_useDynamicFixedFoveatedRendering",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_tiledMultiResSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_tiledMultiResSupported)> {
  constexpr static std::size_t size = 0x4c;
  constexpr static std::size_t addrs = 0x2614678;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_tiledMultiResSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_tiledMultiResLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel (*)()>(&GlobalNamespace::OVRPlugin::get_tiledMultiResLevel)> {
  constexpr static std::size_t size = 0x4c;
  constexpr static std::size_t addrs = 0x26146c4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_tiledMultiResLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_tiledMultiResLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel)>(&GlobalNamespace::OVRPlugin::set_tiledMultiResLevel)> {
  constexpr static std::size_t size = 0x54;
  constexpr static std::size_t addrs = 0x2614710;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_tiledMultiResLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_gpuUtilSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_gpuUtilSupported)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x2614764;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_gpuUtilSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_gpuUtilLevel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::OVRPlugin::get_gpuUtilLevel)> {
  constexpr static std::size_t size = 0xf0;
  constexpr static std::size_t addrs = 0x2614834;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_gpuUtilLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_systemDisplayFrequenciesAvailable
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<float_t> (*)()>(&GlobalNamespace::OVRPlugin::get_systemDisplayFrequenciesAvailable)> {
  constexpr static std::size_t size = 0x2a4;
  constexpr static std::size_t addrs = 0x2614924;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_systemDisplayFrequenciesAvailable",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_systemDisplayFrequency
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::OVRPlugin::get_systemDisplayFrequency)> {
  constexpr static std::size_t size = 0x14c;
  constexpr static std::size_t addrs = 0x2614bc8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_systemDisplayFrequency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_systemDisplayFrequency
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(float_t)>(&GlobalNamespace::OVRPlugin::set_systemDisplayFrequency)> {
  constexpr static std::size_t size = 0xcc;
  constexpr static std::size_t addrs = 0x2614d14;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_systemDisplayFrequency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_eyeFovPremultipliedAlphaModeEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_eyeFovPremultipliedAlphaModeEnabled)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x2614de0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_eyeFovPremultipliedAlphaModeEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_eyeFovPremultipliedAlphaModeEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_eyeFovPremultipliedAlphaModeEnabled)> {
  constexpr static std::size_t size = 0xe0;
  constexpr static std::size_t addrs = 0x2614eb0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_eyeFovPremultipliedAlphaModeEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNodeFrustum2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Node, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2>)>(&GlobalNamespace::OVRPlugin::GetNodeFrustum2)> {
  constexpr static std::size_t size = 0xe0;
  constexpr static std::size_t addrs = 0x2614f90;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodeFrustum2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_AsymmetricFovEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_AsymmetricFovEnabled)> {
  constexpr static std::size_t size = 0xd4;
  constexpr static std::size_t addrs = 0x2615070;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_AsymmetricFovEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_EyeTextureArrayEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_EyeTextureArrayEnabled)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x2615144;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_EyeTextureArrayEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_localDimmingSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_localDimmingSupported)> {
  constexpr static std::size_t size = 0xd4;
  constexpr static std::size_t addrs = 0x2615204;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_localDimmingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_localDimming
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_localDimming)> {
  constexpr static std::size_t size = 0xf4;
  constexpr static std::size_t addrs = 0x26152d8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_localDimming",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.set_localDimming
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (*)(bool)>(&GlobalNamespace::OVRPlugin::set_localDimming)> {
  constexpr static std::size_t size = 0xe8;
  constexpr static std::size_t addrs = 0x26153cc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_localDimming",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetDominantHand
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness (*)()>(&GlobalNamespace::OVRPlugin::GetDominantHand)> {
  constexpr static std::size_t size = 0xcc;
  constexpr static std::size_t addrs = 0x26154b4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetDominantHand",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SendEvent
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW, ::StringW)>(&GlobalNamespace::OVRPlugin::SendEvent)> {
  constexpr static std::size_t size = 0x194;
  constexpr static std::size_t addrs = 0x2615580;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SendEvent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetHeadPoseModifier
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>)>(&GlobalNamespace::OVRPlugin::SetHeadPoseModifier)> {
  constexpr static std::size_t size = 0xd8;
  constexpr static std::size_t addrs = 0x2615714;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetHeadPoseModifier",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetHeadPoseModifier
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>)>(&GlobalNamespace::OVRPlugin::GetHeadPoseModifier)> {
  constexpr static std::size_t size = 0x14c;
  constexpr static std::size_t addrs = 0x26157ec;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetHeadPoseModifier",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.IsPerfMetricsSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics)>(&GlobalNamespace::OVRPlugin::IsPerfMetricsSupported)> {
  constexpr static std::size_t size = 0xe0;
  constexpr static std::size_t addrs = 0x2615938;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsPerfMetricsSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetPerfMetricsFloat
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<float_t> (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics)>(&GlobalNamespace::OVRPlugin::GetPerfMetricsFloat)> {
  constexpr static std::size_t size = 0x104;
  constexpr static std::size_t addrs = 0x2615a18;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetPerfMetricsFloat",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetPerfMetricsInt
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<System::Nullable_1<int32_t> (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics)>(&GlobalNamespace::OVRPlugin::GetPerfMetricsInt)> {
  constexpr static std::size_t size = 0x104;
  constexpr static std::size_t addrs = 0x2615b1c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetPerfMetricsInt",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetTimeInSeconds
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<double_t (*)()>(&GlobalNamespace::OVRPlugin::GetTimeInSeconds)> {
  constexpr static std::size_t size = 0xcc;
  constexpr static std::size_t addrs = 0x2615c20;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetTimeInSeconds",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetColorScaleAndOffset
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(UnityEngine::Vector4, UnityEngine::Vector4, bool)>(&GlobalNamespace::OVRPlugin::SetColorScaleAndOffset)> {
  constexpr static std::size_t size = 0x50;
  constexpr static std::size_t addrs = 0x2615cec;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetColorScaleAndOffset",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Vector4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Vector4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.AddCustomMetadata
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ::StringW)>(&GlobalNamespace::OVRPlugin::AddCustomMetadata)> {
  constexpr static std::size_t size = 0xd8;
  constexpr static std::size_t addrs = 0x2615d3c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "AddCustomMetadata",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetDeveloperMode
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool)>(&GlobalNamespace::OVRPlugin::SetDeveloperMode)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x2615e14;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetDeveloperMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetAdaptiveGPUPerformanceScale
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<float_t (*)()>(&GlobalNamespace::OVRPlugin::GetAdaptiveGPUPerformanceScale)> {
  constexpr static std::size_t size = 0xd8;
  constexpr static std::size_t addrs = 0x2615edc;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetAdaptiveGPUPerformanceScale",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetHandTrackingEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::GetHandTrackingEnabled)> {
  constexpr static std::size_t size = 0xd4;
  constexpr static std::size_t addrs = 0x2615fb4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetHandTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetHandState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Step, GlobalNamespace::GlobalNamespace__OVRPlugin__Hand, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__HandState>)>(&GlobalNamespace::OVRPlugin::GetHandState)> {
  constexpr static std::size_t size = 0x6a4;
  constexpr static std::size_t addrs = 0x2616088;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetHandState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Hand>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__HandState>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSkeleton
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton>)>(&GlobalNamespace::OVRPlugin::GetSkeleton)> {
  constexpr static std::size_t size = 0xe0;
  constexpr static std::size_t addrs = 0x261672c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSkeleton",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSkeleton2
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2>)>(&GlobalNamespace::OVRPlugin::GetSkeleton2)> {
  constexpr static std::size_t size = 0x2310;
  constexpr static std::size_t addrs = 0x261680c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSkeleton2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_bodyTrackingSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_bodyTrackingSupported)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x260bfa0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_bodyTrackingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_bodyTrackingEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_bodyTrackingEnabled)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x2618b1c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_bodyTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetBodyState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Step, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState>)>(&GlobalNamespace::OVRPlugin::GetBodyState)> {
  constexpr static std::size_t size = 0x221c;
  constexpr static std::size_t addrs = 0x2618bec;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetBodyState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetMesh
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh>)>(&GlobalNamespace::OVRPlugin::GetMesh)> {
  constexpr static std::size_t size = 0x1cc;
  constexpr static std::size_t addrs = 0x261ae08;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.StartKeyboardTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::StartKeyboardTracking)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x261afd4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StartKeyboardTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.StopKeyboardTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::StopKeyboardTracking)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x261b09c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StopKeyboardTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetKeyboardState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Step, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState>)>(&GlobalNamespace::OVRPlugin::GetKeyboardState)> {
  constexpr static std::size_t size = 0xf0;
  constexpr static std::size_t addrs = 0x261b15c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetKeyboardState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSystemKeyboardDescription
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription>)>(&GlobalNamespace::OVRPlugin::GetSystemKeyboardDescription)> {
  constexpr static std::size_t size = 0xe4;
  constexpr static std::size_t addrs = 0x261b24c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSystemKeyboardDescription",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_faceTrackingEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_faceTrackingEnabled)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x261b330;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_faceTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_faceTrackingSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_faceTrackingSupported)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x260bed0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_faceTrackingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetFaceState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Step, int32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState>)>(&GlobalNamespace::OVRPlugin::GetFaceState)> {
  constexpr static std::size_t size = 0x634;
  constexpr static std::size_t addrs = 0x261b400;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetFaceState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_eyeTrackingEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_eyeTrackingEnabled)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x261ba34;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_eyeTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.get_eyeTrackingSupported
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::get_eyeTrackingSupported)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x260c070;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_eyeTrackingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetEyeGazesState
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Step, int32_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesState>)>(&GlobalNamespace::OVRPlugin::GetEyeGazesState)> {
  constexpr static std::size_t size = 0x274;
  constexpr static std::size_t addrs = 0x261bb04;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetEyeGazesState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesState>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.StartEyeTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::StartEyeTracking)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x261bd78;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StartEyeTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.StopEyeTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::StopEyeTracking)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x261be38;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StopEyeTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.StartFaceTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::StartFaceTracking)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x261bef8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StartFaceTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.StopFaceTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::StopFaceTracking)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x261bfb8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StopFaceTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.StartBodyTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::StartBodyTracking)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x261c078;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StartBodyTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.StopBodyTracking
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::StopBodyTracking)> {
  constexpr static std::size_t size = 0xc0;
  constexpr static std::size_t addrs = 0x261c138;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StopBodyTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetLocalTrackingSpaceRecenterCount
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<int32_t (*)()>(&GlobalNamespace::OVRPlugin::GetLocalTrackingSpaceRecenterCount)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x261c1f8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetLocalTrackingSpaceRecenterCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSystemHmd3DofModeEnabled
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)()>(&GlobalNamespace::OVRPlugin::GetSystemHmd3DofModeEnabled)> {
  constexpr static std::size_t size = 0xd4;
  constexpr static std::size_t addrs = 0x261c2c8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSystemHmd3DofModeEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetClientColorDesc
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace)>(&GlobalNamespace::OVRPlugin::SetClientColorDesc)> {
  constexpr static std::size_t size = 0x114;
  constexpr static std::size_t addrs = 0x261c39c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetClientColorDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetHmdColorDesc
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace (*)()>(&GlobalNamespace::OVRPlugin::GetHmdColorDesc)> {
  constexpr static std::size_t size = 0x130;
  constexpr static std::size_t addrs = 0x261c4b0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetHmdColorDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.PollEvent
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer>)>(&GlobalNamespace::OVRPlugin::PollEvent)> {
  constexpr static std::size_t size = 0x218;
  constexpr static std::size_t addrs = 0x261c5e0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "PollEvent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNativeOpenXRInstance
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)()>(&GlobalNamespace::OVRPlugin::GetNativeOpenXRInstance)> {
  constexpr static std::size_t size = 0xdc;
  constexpr static std::size_t addrs = 0x261c7f8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNativeOpenXRInstance",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetNativeOpenXRSession
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<uint64_t (*)()>(&GlobalNamespace::OVRPlugin::GetNativeOpenXRSession)> {
  constexpr static std::size_t size = 0xdc;
  constexpr static std::size_t addrs = 0x261c8d4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNativeOpenXRSession",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetKeyboardOverlayUV
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f)>(&GlobalNamespace::OVRPlugin::SetKeyboardOverlayUV)> {
  constexpr static std::size_t size = 0xd8;
  constexpr static std::size_t addrs = 0x261c9b0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetKeyboardOverlayUV",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.CreateSpatialAnchor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::CreateSpatialAnchor)> {
  constexpr static std::size_t size = 0xdc;
  constexpr static std::size_t addrs = 0x261ca88;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "CreateSpatialAnchor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SetSpaceComponentStatus
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType, bool, double_t, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::SetSpaceComponentStatus)> {
  constexpr static std::size_t size = 0x120;
  constexpr static std::size_t addrs = 0x261cb64;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetSpaceComponentStatus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSpaceComponentStatus
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType, ByRef<bool>, ByRef<bool>)>(&GlobalNamespace::OVRPlugin::GetSpaceComponentStatus)> {
  constexpr static std::size_t size = 0x11c;
  constexpr static std::size_t addrs = 0x261cc84;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceComponentStatus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<bool>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<bool>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.EnumerateSpaceSupportedComponents
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<uint32_t>, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>)>(&GlobalNamespace::OVRPlugin::EnumerateSpaceSupportedComponents)> {
  constexpr static std::size_t size = 0xf0;
  constexpr static std::size_t addrs = 0x261cda0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "EnumerateSpaceSupportedComponents",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SaveSpace
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::SaveSpace)> {
  constexpr static std::size_t size = 0xf4;
  constexpr static std::size_t addrs = 0x261ce90;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SaveSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.EraseSpace
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::EraseSpace)> {
  constexpr static std::size_t size = 0xe4;
  constexpr static std::size_t addrs = 0x261cf84;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "EraseSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSpaceUuid
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<System::Guid>)>(&GlobalNamespace::OVRPlugin::GetSpaceUuid)> {
  constexpr static std::size_t size = 0xdc;
  constexpr static std::size_t addrs = 0x261d068;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceUuid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<System::Guid>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.QuerySpaces
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::QuerySpaces)> {
  constexpr static std::size_t size = 0x21c;
  constexpr static std::size_t addrs = 0x261d144;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "QuerySpaces",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.RetrieveSpaceQueryResults
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<Unity::Collections::NativeArray_1<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult>>, Unity::Collections::Allocator)>(&GlobalNamespace::OVRPlugin::RetrieveSpaceQueryResults)> {
  constexpr static std::size_t size = 0x1b4;
  constexpr static std::size_t addrs = 0x261d360;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "RetrieveSpaceQueryResults",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<Unity::Collections::NativeArray_1<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult>>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<Unity::Collections::Allocator>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.RetrieveSpaceQueryResults
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult>>)>(&GlobalNamespace::OVRPlugin::RetrieveSpaceQueryResults)> {
  constexpr static std::size_t size = 0x38c;
  constexpr static std::size_t addrs = 0x261d514;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "RetrieveSpaceQueryResults",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult>>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.SaveSpaceList
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(Unity::Collections::NativeArray_1<uint64_t>, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::SaveSpaceList)> {
  constexpr static std::size_t size = 0x124;
  constexpr static std::size_t addrs = 0x261d8a0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SaveSpaceList",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<Unity::Collections::NativeArray_1<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSpaceUserId
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::GetSpaceUserId)> {
  constexpr static std::size_t size = 0xdc;
  constexpr static std::size_t addrs = 0x261d9c4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceUserId",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.CreateSpaceUser
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::CreateSpaceUser)> {
  constexpr static std::size_t size = 0xdc;
  constexpr static std::size_t addrs = 0x261daa0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "CreateSpaceUser",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.DestroySpaceUser
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::DestroySpaceUser)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x261db7c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "DestroySpaceUser",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.ShareSpaces
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Result (*)(Unity::Collections::NativeArray_1<uint64_t>, Unity::Collections::NativeArray_1<uint64_t>, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::ShareSpaces)> {
  constexpr static std::size_t size = 0x140;
  constexpr static std::size_t addrs = 0x261dc44;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "ShareSpaces",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<Unity::Collections::NativeArray_1<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<Unity::Collections::NativeArray_1<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.TryLocateSpace
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>)>(&GlobalNamespace::OVRPlugin::TryLocateSpace)> {
  constexpr static std::size_t size = 0x1e0;
  constexpr static std::size_t addrs = 0x261dd84;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "TryLocateSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.LocateSpace
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef (*)(uint64_t, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin)>(&GlobalNamespace::OVRPlugin::LocateSpace)> {
  constexpr static std::size_t size = 0xd0;
  constexpr static std::size_t addrs = 0x261df64;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "LocateSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.TryLocateSpace
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags>)>(&GlobalNamespace::OVRPlugin::TryLocateSpace)> {
  constexpr static std::size_t size = 0x168;
  constexpr static std::size_t addrs = 0x261e034;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "TryLocateSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.DestroySpace
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::DestroySpace)> {
  constexpr static std::size_t size = 0xc8;
  constexpr static std::size_t addrs = 0x261e19c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "DestroySpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSpaceContainer
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<::ArrayW<System::Guid>>)>(&GlobalNamespace::OVRPlugin::GetSpaceContainer)> {
  constexpr static std::size_t size = 0x274;
  constexpr static std::size_t addrs = 0x261e264;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceContainer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::ArrayW<System::Guid>>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSpaceBoundingBox2D
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf>)>(&GlobalNamespace::OVRPlugin::GetSpaceBoundingBox2D)> {
  constexpr static std::size_t size = 0xdc;
  constexpr static std::size_t addrs = 0x261e4d8;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceBoundingBox2D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSpaceBoundingBox3D
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf>)>(&GlobalNamespace::OVRPlugin::GetSpaceBoundingBox3D)> {
  constexpr static std::size_t size = 0xe0;
  constexpr static std::size_t addrs = 0x261e5b4;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceBoundingBox3D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSpaceSemanticLabels
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<::StringW>)>(&GlobalNamespace::OVRPlugin::GetSpaceSemanticLabels)> {
  constexpr static std::size_t size = 0x190;
  constexpr static std::size_t addrs = 0x261e694;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceSemanticLabels",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::StringW>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSpaceRoomLayout
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayout>)>(&GlobalNamespace::OVRPlugin::GetSpaceRoomLayout)> {
  constexpr static std::size_t size = 0x250;
  constexpr static std::size_t addrs = 0x261e824;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceRoomLayout",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayout>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSpaceBoundary2DCount
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<int32_t>)>(&GlobalNamespace::OVRPlugin::GetSpaceBoundary2DCount)> {
  constexpr static std::size_t size = 0xec;
  constexpr static std::size_t addrs = 0x261ea74;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceBoundary2DCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSpaceBoundary2D
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, Unity::Collections::NativeArray_1<UnityEngine::Vector2>)>(&GlobalNamespace::OVRPlugin::GetSpaceBoundary2D)> {
  constexpr static std::size_t size = 0x114;
  constexpr static std::size_t addrs = 0x261eb60;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceBoundary2D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<Unity::Collections::NativeArray_1<UnityEngine::Vector2>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSpaceBoundary2D
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<Unity::Collections::NativeArray_1<UnityEngine::Vector2> (*)(uint64_t, Unity::Collections::Allocator)>(&GlobalNamespace::OVRPlugin::GetSpaceBoundary2D)> {
  constexpr static std::size_t size = 0x1a0;
  constexpr static std::size_t addrs = 0x261ec74;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceBoundary2D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<Unity::Collections::Allocator>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetSpaceBoundary2D
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(uint64_t, ByRef<::ArrayW<UnityEngine::Vector2>>)>(&GlobalNamespace::OVRPlugin::GetSpaceBoundary2D)> {
  constexpr static std::size_t size = 0x318;
  constexpr static std::size_t addrs = 0x261ee14;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceBoundary2D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::ArrayW<UnityEngine::Vector2>>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.RequestSceneCapture
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<uint64_t>)>(&GlobalNamespace::OVRPlugin::RequestSceneCapture)> {
  constexpr static std::size_t size = 0x120;
  constexpr static std::size_t addrs = 0x261f12c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "RequestSceneCapture",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetRenderModelPaths
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<::StringW> (*)()>(&GlobalNamespace::OVRPlugin::GetRenderModelPaths)> {
  constexpr static std::size_t size = 0x22c;
  constexpr static std::size_t addrs = 0x261f24c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetRenderModelPaths",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.GetRenderModelProperties
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<bool (*)(::StringW, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties>)>(&GlobalNamespace::OVRPlugin::GetRenderModelProperties)> {
  constexpr static std::size_t size = 0x1a4;
  constexpr static std::size_t addrs = 0x261f478;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetRenderModelProperties",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::OVRPlugin.LoadRenderModel
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::ArrayW<uint8_t> (*)(uint64_t)>(&GlobalNamespace::OVRPlugin::LoadRenderModel)> {
  constexpr static std::size_t size = 0x200;
  constexpr static std::size_t addrs = 0x261f61c;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "LoadRenderModel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
    return ___internal_method;
  }
};
 void GlobalNamespace::OVRPlugin::__set_wrapperVersion(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "wrapperVersion", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::OVRPlugin::__get_wrapperVersion()  {
return ::cordl_internals::getStaticField<System::Version, "wrapperVersion", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set__version(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "_version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::OVRPlugin::__get__version()  {
return ::cordl_internals::getStaticField<System::Version, "_version", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set__nativeSDKVersion(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "_nativeSDKVersion", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::OVRPlugin::__get__nativeSDKVersion()  {
return ::cordl_internals::getStaticField<System::Version, "_nativeSDKVersion", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set_MAX_CPU_CORES(int32_t value)  {
::cordl_internals::setStaticField<int32_t, "MAX_CPU_CORES", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<int32_t>(value));
}
 int32_t GlobalNamespace::OVRPlugin::__get_MAX_CPU_CORES()  {
return ::cordl_internals::getStaticField<int32_t, "MAX_CPU_CORES", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set__nativeXrApi(System::Nullable_1<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi> value)  {
::cordl_internals::setStaticField<System::Nullable_1<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi>, "_nativeXrApi", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<System::Nullable_1<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi>>(value));
}
 System::Nullable_1<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi> GlobalNamespace::OVRPlugin::__get__nativeXrApi()  {
return ::cordl_internals::getStaticField<System::Nullable_1<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi>, "_nativeXrApi", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set__nativeAudioOutGuid(GlobalNamespace::GlobalNamespace__OVRPlugin__GUID value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__GUID, "_nativeAudioOutGuid", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__GUID>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__GUID GlobalNamespace::OVRPlugin::__get__nativeAudioOutGuid()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__GUID, "_nativeAudioOutGuid", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set__cachedAudioOutGuid(System::Guid value)  {
::cordl_internals::setStaticField<System::Guid, "_cachedAudioOutGuid", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<System::Guid>(value));
}
 System::Guid GlobalNamespace::OVRPlugin::__get__cachedAudioOutGuid()  {
return ::cordl_internals::getStaticField<System::Guid, "_cachedAudioOutGuid", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set__cachedAudioOutString(::StringW value)  {
::cordl_internals::setStaticField<::StringW, "_cachedAudioOutString", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<::StringW>(value));
}
 ::StringW GlobalNamespace::OVRPlugin::__get__cachedAudioOutString()  {
return ::cordl_internals::getStaticField<::StringW, "_cachedAudioOutString", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set__nativeAudioInGuid(GlobalNamespace::GlobalNamespace__OVRPlugin__GUID value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__GUID, "_nativeAudioInGuid", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__GUID>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__GUID GlobalNamespace::OVRPlugin::__get__nativeAudioInGuid()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__GUID, "_nativeAudioInGuid", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set__cachedAudioInGuid(System::Guid value)  {
::cordl_internals::setStaticField<System::Guid, "_cachedAudioInGuid", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<System::Guid>(value));
}
 System::Guid GlobalNamespace::OVRPlugin::__get__cachedAudioInGuid()  {
return ::cordl_internals::getStaticField<System::Guid, "_cachedAudioInGuid", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set__cachedAudioInString(::StringW value)  {
::cordl_internals::setStaticField<::StringW, "_cachedAudioInString", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<::StringW>(value));
}
 ::StringW GlobalNamespace::OVRPlugin::__get__cachedAudioInString()  {
return ::cordl_internals::getStaticField<::StringW, "_cachedAudioInString", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set_perfStatWarningPrinted(bool value)  {
::cordl_internals::setStaticField<bool, "perfStatWarningPrinted", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<bool>(value));
}
 bool GlobalNamespace::OVRPlugin::__get_perfStatWarningPrinted()  {
return ::cordl_internals::getStaticField<bool, "perfStatWarningPrinted", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set_resetPerfStatWarningPrinted(bool value)  {
::cordl_internals::setStaticField<bool, "resetPerfStatWarningPrinted", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<bool>(value));
}
 bool GlobalNamespace::OVRPlugin::__get_resetPerfStatWarningPrinted()  {
return ::cordl_internals::getStaticField<bool, "resetPerfStatWarningPrinted", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set__nativeSystemDisplayFrequenciesAvailable(GlobalNamespace::OVRNativeBuffer value)  {
::cordl_internals::setStaticField<GlobalNamespace::OVRNativeBuffer, "_nativeSystemDisplayFrequenciesAvailable", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<GlobalNamespace::OVRNativeBuffer>(value));
}
 GlobalNamespace::OVRNativeBuffer GlobalNamespace::OVRPlugin::__get__nativeSystemDisplayFrequenciesAvailable()  {
return ::cordl_internals::getStaticField<GlobalNamespace::OVRNativeBuffer, "_nativeSystemDisplayFrequenciesAvailable", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set__cachedSystemDisplayFrequenciesAvailable(::ArrayW<float_t> value)  {
::cordl_internals::setStaticField<::ArrayW<float_t>, "_cachedSystemDisplayFrequenciesAvailable", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<::ArrayW<float_t>>(value));
}
 ::ArrayW<float_t> GlobalNamespace::OVRPlugin::__get__cachedSystemDisplayFrequenciesAvailable()  {
return ::cordl_internals::getStaticField<::ArrayW<float_t>, "_cachedSystemDisplayFrequenciesAvailable", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set_cachedHandState(GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal, "cachedHandState", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal GlobalNamespace::OVRPlugin::__get_cachedHandState()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal, "cachedHandState", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set_cachedSkeleton(GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton, "cachedSkeleton", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton GlobalNamespace::OVRPlugin::__get_cachedSkeleton()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton, "cachedSkeleton", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set_cachedSkeleton2(GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal, "cachedSkeleton2", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal GlobalNamespace::OVRPlugin::__get_cachedSkeleton2()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal, "cachedSkeleton2", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set_cachedFaceState(GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal, "cachedFaceState", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal GlobalNamespace::OVRPlugin::__get_cachedFaceState()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal, "cachedFaceState", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set_cachedEyeGazesState(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal value)  {
::cordl_internals::setStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal, "cachedEyeGazesState", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal>(value));
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal GlobalNamespace::OVRPlugin::__get_cachedEyeGazesState()  {
return ::cordl_internals::getStaticField<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal, "cachedEyeGazesState", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 void GlobalNamespace::OVRPlugin::__set__versionZero(System::Version value)  {
::cordl_internals::setStaticField<System::Version, "_versionZero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>(std::forward<System::Version>(value));
}
 System::Version GlobalNamespace::OVRPlugin::__get__versionZero()  {
return ::cordl_internals::getStaticField<System::Version, "_versionZero", ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get>();
}
 System::Version GlobalNamespace::OVRPlugin::get_version()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_version",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<System::Version, false>(nullptr, ___internal_method);
}
 System::Version GlobalNamespace::OVRPlugin::get_nativeSDKVersion()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_nativeSDKVersion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<System::Version, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::IsSuccess(GlobalNamespace::GlobalNamespace__OVRPlugin__Result result)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsSuccess",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Result>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, result);
}
 void GlobalNamespace::OVRPlugin::SetLogCallback2(GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType logCallback)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetLogCallback2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, logCallback);
}
 bool GlobalNamespace::OVRPlugin::IsPassthroughShape(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape shape)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsPassthroughShape",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, shape);
}
 bool GlobalNamespace::OVRPlugin::IsPositionValid(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsPositionValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::IsOrientationValid(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsOrientationValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::IsPositionTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsPositionTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::IsOrientationTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsOrientationTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::get_initialized()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_initialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi GlobalNamespace::OVRPlugin::get_nativeXrApi()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_nativeXrApi",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_chromatic()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_chromatic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_chromatic(bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_chromatic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::get_monoscopic()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_monoscopic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_monoscopic(bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_monoscopic",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::get_rotation()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_rotation",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_rotation(bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_rotation",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::get_position()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_position",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_position(bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_position",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::get_useIPDInPositionTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_useIPDInPositionTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_useIPDInPositionTracking(bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_useIPDInPositionTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::get_positionSupported()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_positionSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_positionTracked()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_positionTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_powerSaving()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_powerSaving",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_hmdPresent()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_hmdPresent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_userPresent()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_userPresent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_headphonesPresent()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_headphonesPresent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 int32_t GlobalNamespace::OVRPlugin::get_recommendedMSAALevel()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_recommendedMSAALevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<int32_t, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion GlobalNamespace::OVRPlugin::get_systemRegion()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_systemRegion",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion, false>(nullptr, ___internal_method);
}
 ::StringW GlobalNamespace::OVRPlugin::get_audioOutId()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_audioOutId",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(nullptr, ___internal_method);
}
 ::StringW GlobalNamespace::OVRPlugin::get_audioInId()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_audioInId",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_hasVrFocus()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_hasVrFocus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_hasInputFocus()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_hasInputFocus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_shouldQuit()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_shouldQuit",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_shouldRecenter()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_shouldRecenter",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 ::StringW GlobalNamespace::OVRPlugin::get_productName()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_productName",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(nullptr, ___internal_method);
}
 ::StringW GlobalNamespace::OVRPlugin::get_latency()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_latency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::StringW, false>(nullptr, ___internal_method);
}
 float_t GlobalNamespace::OVRPlugin::get_eyeDepth()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_eyeDepth",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_eyeDepth(float_t value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_eyeDepth",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 float_t GlobalNamespace::OVRPlugin::get_eyeHeight()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_eyeHeight",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_eyeHeight(float_t value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_eyeHeight",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 float_t GlobalNamespace::OVRPlugin::get_batteryLevel()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_batteryLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 float_t GlobalNamespace::OVRPlugin::get_batteryTemperature()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_batteryTemperature",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel GlobalNamespace::OVRPlugin::get_suggestedCpuPerfLevel()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_suggestedCpuPerfLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_suggestedCpuPerfLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_suggestedCpuPerfLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel GlobalNamespace::OVRPlugin::get_suggestedGpuPerfLevel()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_suggestedGpuPerfLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_suggestedGpuPerfLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_suggestedGpuPerfLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 int32_t GlobalNamespace::OVRPlugin::get_cpuLevel()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_cpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<int32_t, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_cpuLevel(int32_t value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_cpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 int32_t GlobalNamespace::OVRPlugin::get_gpuLevel()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_gpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<int32_t, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_gpuLevel(int32_t value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_gpuLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 int32_t GlobalNamespace::OVRPlugin::get_vsyncCount()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_vsyncCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<int32_t, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_vsyncCount(int32_t value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_vsyncCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 float_t GlobalNamespace::OVRPlugin::get_systemVolume()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_systemVolume",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 float_t GlobalNamespace::OVRPlugin::get_ipd()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_ipd",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_ipd(float_t value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_ipd",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::get_occlusionMesh()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_occlusionMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_occlusionMesh(bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_occlusionMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus GlobalNamespace::OVRPlugin::get_batteryStatus()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_batteryStatus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf GlobalNamespace::OVRPlugin::GetEyeFrustum(GlobalNamespace::GlobalNamespace__OVRPlugin__Eye eyeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetEyeFrustum",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Eye>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf, false>(nullptr, ___internal_method, eyeId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei GlobalNamespace::OVRPlugin::GetEyeTextureSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Eye eyeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetEyeTextureSize",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Eye>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, false>(nullptr, ___internal_method, eyeId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::OVRPlugin::GetTrackerPose(GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker trackerId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetTrackerPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, false>(nullptr, ___internal_method, trackerId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf GlobalNamespace::OVRPlugin::GetTrackerFrustum(GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker trackerId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetTrackerFrustum",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf, false>(nullptr, ___internal_method, trackerId);
}
 bool GlobalNamespace::OVRPlugin::ShowUI(GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI ui)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "ShowUI",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, ui);
}
/// @param layerIndex: int32_t (default: 0)
/// @param shape: GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape (default: 0)
/// @param overrideTextureRectMatrix: bool (default: false)
/// @param textureRectMatrix: GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf (default: {})
/// @param overridePerLayerColorScaleAndOffset: bool (default: false)
/// @param colorScale: UnityEngine::Vector4 (default: {})
/// @param colorOffset: UnityEngine::Vector4 (default: {})
/// @param expensiveSuperSample: bool (default: false)
/// @param bicubic: bool (default: false)
/// @param efficientSuperSample: bool (default: false)
/// @param efficientSharpen: bool (default: false)
/// @param expensiveSharpen: bool (default: false)
/// @param hidden: bool (default: false)
/// @param secureContent: bool (default: false)
 bool GlobalNamespace::OVRPlugin::EnqueueSubmitLayer(bool onTop, bool headLocked, bool noDepthBufferTesting, ::cordl_internals::intptr_t leftTexture, ::cordl_internals::intptr_t rightTexture, int32_t layerId, int32_t frameIndex, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef pose, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f scale, int32_t layerIndex, GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape shape, bool overrideTextureRectMatrix, GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf textureRectMatrix, bool overridePerLayerColorScaleAndOffset, UnityEngine::Vector4 colorScale, UnityEngine::Vector4 colorOffset, bool expensiveSuperSample, bool bicubic, bool efficientSuperSample, bool efficientSharpen, bool expensiveSharpen, bool hidden, bool secureContent)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "EnqueueSubmitLayer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Vector4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Vector4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, onTop, headLocked, noDepthBufferTesting, leftTexture, rightTexture, layerId, frameIndex, pose, scale, layerIndex, shape, overrideTextureRectMatrix, textureRectMatrix, overridePerLayerColorScaleAndOffset, colorScale, colorOffset, expensiveSuperSample, bicubic, efficientSuperSample, efficientSharpen, expensiveSharpen, hidden, secureContent);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc GlobalNamespace::OVRPlugin::CalculateLayerDesc(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape shape, GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout layout, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei textureSize, int32_t mipLevels, int32_t sampleCount, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat format, int32_t layerFlags)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "CalculateLayerDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc, false>(nullptr, ___internal_method, shape, layout, textureSize, mipLevels, sampleCount, format, layerFlags);
}
 bool GlobalNamespace::OVRPlugin::EnqueueSetupLayer(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc desc, int32_t compositionDepth, ::cordl_internals::intptr_t layerID)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "EnqueueSetupLayer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, desc, compositionDepth, layerID);
}
 bool GlobalNamespace::OVRPlugin::EnqueueDestroyLayer(::cordl_internals::intptr_t layerID)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "EnqueueDestroyLayer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, layerID);
}
 ::cordl_internals::intptr_t GlobalNamespace::OVRPlugin::GetLayerTexture(int32_t layerId, int32_t stage, GlobalNamespace::GlobalNamespace__OVRPlugin__Eye eyeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetLayerTexture",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Eye>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<::cordl_internals::intptr_t, false>(nullptr, ___internal_method, layerId, stage, eyeId);
}
 int32_t GlobalNamespace::OVRPlugin::GetLayerTextureStageCount(int32_t layerId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetLayerTextureStageCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<int32_t, false>(nullptr, ___internal_method, layerId);
}
 ::cordl_internals::intptr_t GlobalNamespace::OVRPlugin::GetLayerAndroidSurfaceObject(int32_t layerId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetLayerAndroidSurfaceObject",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<::cordl_internals::intptr_t, false>(nullptr, ___internal_method, layerId);
}
 bool GlobalNamespace::OVRPlugin::UpdateNodePhysicsPoses(int32_t frameIndex, double_t predictionSeconds)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "UpdateNodePhysicsPoses",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, frameIndex, predictionSeconds);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::OVRPlugin::GetNodePose(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodePose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, false>(nullptr, ___internal_method, nodeId, stepId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::OVRPlugin::GetNodeVelocity(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodeVelocity",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, false>(nullptr, ___internal_method, nodeId, stepId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::OVRPlugin::GetNodeAngularVelocity(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodeAngularVelocity",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, false>(nullptr, ___internal_method, nodeId, stepId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::OVRPlugin::GetNodeAcceleration(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodeAcceleration",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, false>(nullptr, ___internal_method, nodeId, stepId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::OVRPlugin::GetNodeAngularAcceleration(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodeAngularAcceleration",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, false>(nullptr, ___internal_method, nodeId, stepId);
}
 bool GlobalNamespace::OVRPlugin::GetNodePresent(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodePresent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, nodeId);
}
 bool GlobalNamespace::OVRPlugin::GetNodeOrientationTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodeOrientationTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, nodeId);
}
 bool GlobalNamespace::OVRPlugin::GetNodeOrientationValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodeOrientationValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, nodeId);
}
 bool GlobalNamespace::OVRPlugin::GetNodePositionTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodePositionTracked",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, nodeId);
}
 bool GlobalNamespace::OVRPlugin::GetNodePositionValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodePositionValid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, nodeId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef GlobalNamespace::OVRPlugin::GetNodePoseStateRaw(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodePoseStateRaw",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef, false>(nullptr, ___internal_method, nodeId, stepId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef GlobalNamespace::OVRPlugin::GetNodePoseStateAtTime(double_t time, GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodePoseStateAtTime",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef, false>(nullptr, ___internal_method, time, nodeId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef GlobalNamespace::OVRPlugin::GetNodePoseStateImmediate(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodePoseStateImmediate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef, false>(nullptr, ___internal_method, nodeId);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::OVRPlugin::GetCurrentTrackingTransformPose()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetCurrentTrackingTransformPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::OVRPlugin::GetTrackingTransformRawPose()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetTrackingTransformRawPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::OVRPlugin::GetTrackingTransformRelativePose(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin trackingOrigin)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetTrackingTransformRelativePose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, false>(nullptr, ___internal_method, trackingOrigin);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState GlobalNamespace::OVRPlugin::GetControllerState(uint32_t controllerMask)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetControllerState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState, false>(nullptr, ___internal_method, controllerMask);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2 GlobalNamespace::OVRPlugin::GetControllerState2(uint32_t controllerMask)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetControllerState2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2, false>(nullptr, ___internal_method, controllerMask);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4 GlobalNamespace::OVRPlugin::GetControllerState4(uint32_t controllerMask)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetControllerState4",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4, false>(nullptr, ___internal_method, controllerMask);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5 GlobalNamespace::OVRPlugin::GetControllerState5(uint32_t controllerMask)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetControllerState5",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5, false>(nullptr, ___internal_method, controllerMask);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile GlobalNamespace::OVRPlugin::GetCurrentInteractionProfile(GlobalNamespace::GlobalNamespace__OVRPlugin__Hand hand)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetCurrentInteractionProfile",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Hand>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile, false>(nullptr, ___internal_method, hand);
}
 bool GlobalNamespace::OVRPlugin::SetControllerVibration(uint32_t controllerMask, float_t frequency, float_t amplitude)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetControllerVibration",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, controllerMask, frequency, amplitude);
}
 bool GlobalNamespace::OVRPlugin::SetControllerLocalizedVibration(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation hapticsLocationMask, float_t frequency, float_t amplitude)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetControllerLocalizedVibration",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, controllerMask, hapticsLocationMask, frequency, amplitude);
}
 bool GlobalNamespace::OVRPlugin::SetControllerHapticsAmplitudeEnvelope(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration hapticsVibration)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetControllerHapticsAmplitudeEnvelope",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, controllerMask, hapticsVibration);
}
 bool GlobalNamespace::OVRPlugin::SetControllerHapticsPcm(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration hapticsVibration)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetControllerHapticsPcm",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, controllerMask, hapticsVibration);
}
 bool GlobalNamespace::OVRPlugin::GetControllerSampleRateHz(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controllerMask, ByRef<float_t> sampleRateHz)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetControllerSampleRateHz",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<float_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, controllerMask, sampleRateHz);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc GlobalNamespace::OVRPlugin::GetControllerHapticsDesc(uint32_t controllerMask)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetControllerHapticsDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc, false>(nullptr, ___internal_method, controllerMask);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState GlobalNamespace::OVRPlugin::GetControllerHapticsState(uint32_t controllerMask)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetControllerHapticsState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState, false>(nullptr, ___internal_method, controllerMask);
}
 bool GlobalNamespace::OVRPlugin::SetControllerHaptics(uint32_t controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer hapticsBuffer)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetControllerHaptics",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, controllerMask, hapticsBuffer);
}
 float_t GlobalNamespace::OVRPlugin::GetEyeRecommendedResolutionScale()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetEyeRecommendedResolutionScale",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 float_t GlobalNamespace::OVRPlugin::GetAppCpuStartToGpuEndTime()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetAppCpuStartToGpuEndTime",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::GetBoundaryConfigured()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetBoundaryConfigured",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult GlobalNamespace::OVRPlugin::TestBoundaryNode(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "TestBoundaryNode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult, false>(nullptr, ___internal_method, nodeId, boundaryType);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult GlobalNamespace::OVRPlugin::TestBoundaryPoint(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f point, GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "TestBoundaryPoint",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult, false>(nullptr, ___internal_method, point, boundaryType);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry GlobalNamespace::OVRPlugin::GetBoundaryGeometry(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetBoundaryGeometry",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry, false>(nullptr, ___internal_method, boundaryType);
}
 bool GlobalNamespace::OVRPlugin::GetBoundaryGeometry2(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType, ::cordl_internals::intptr_t points, ByRef<int32_t> pointsCount)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetBoundaryGeometry2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::cordl_internals::intptr_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, boundaryType, points, pointsCount);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats GlobalNamespace::OVRPlugin::GetAppPerfStats()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetAppPerfStats",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::ResetAppPerfStats()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "ResetAppPerfStats",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 float_t GlobalNamespace::OVRPlugin::GetAppFramerate()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetAppFramerate",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::SetHandNodePoseStateLatency(double_t latencyInSeconds)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetHandNodePoseStateLatency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, latencyInSeconds);
}
 double_t GlobalNamespace::OVRPlugin::GetHandNodePoseStateLatency()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetHandNodePoseStateLatency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<double_t, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat GlobalNamespace::OVRPlugin::GetDesiredEyeTextureFormat()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetDesiredEyeTextureFormat",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::SetDesiredEyeTextureFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetDesiredEyeTextureFormat",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::InitializeMixedReality()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "InitializeMixedReality",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::ShutdownMixedReality()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "ShutdownMixedReality",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::IsMixedRealityInitialized()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsMixedRealityInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 int32_t GlobalNamespace::OVRPlugin::GetExternalCameraCount()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetExternalCameraCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<int32_t, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::UpdateExternalCamera()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "UpdateExternalCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::GetMixedRealityCameraInfo(int32_t cameraId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics> cameraExtrinsics, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics> cameraIntrinsics)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetMixedRealityCameraInfo",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, cameraId, cameraExtrinsics, cameraIntrinsics);
}
 bool GlobalNamespace::OVRPlugin::OverrideExternalCameraFov(int32_t cameraId, bool useOverriddenFov, GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf fov)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "OverrideExternalCameraFov",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, cameraId, useOverriddenFov, fov);
}
 bool GlobalNamespace::OVRPlugin::GetUseOverriddenExternalCameraFov(int32_t cameraId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetUseOverriddenExternalCameraFov",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, cameraId);
}
 bool GlobalNamespace::OVRPlugin::OverrideExternalCameraStaticPose(int32_t cameraId, bool useOverriddenPose, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef poseInStageOrigin)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "OverrideExternalCameraStaticPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, cameraId, useOverriddenPose, poseInStageOrigin);
}
 bool GlobalNamespace::OVRPlugin::GetUseOverriddenExternalCameraStaticPose(int32_t cameraId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetUseOverriddenExternalCameraStaticPose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, cameraId);
}
 bool GlobalNamespace::OVRPlugin::ResetDefaultExternalCamera()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "ResetDefaultExternalCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::SetDefaultExternalCamera(::StringW cameraName, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics> cameraIntrinsics, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics> cameraExtrinsics)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetDefaultExternalCamera",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, cameraName, cameraIntrinsics, cameraExtrinsics);
}
 bool GlobalNamespace::OVRPlugin::SetExternalCameraProperties(::StringW cameraName, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics> cameraIntrinsics, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics> cameraExtrinsics)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetExternalCameraProperties",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, cameraName, cameraIntrinsics, cameraExtrinsics);
}
 bool GlobalNamespace::OVRPlugin::IsInsightPassthroughSupported()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsInsightPassthroughSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::InitializeInsightPassthrough()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "InitializeInsightPassthrough",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::ShutdownInsightPassthrough()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "ShutdownInsightPassthrough",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::IsInsightPassthroughInitialized()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsInsightPassthroughInitialized",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::OVRPlugin::GetInsightPassthroughInitializationState()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetInsightPassthroughInitializationState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::CreateInsightTriangleMesh(int32_t layerId, ::ArrayW<UnityEngine::Vector3> vertices, ::ArrayW<int32_t> triangles, ByRef<uint64_t> meshHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "CreateInsightTriangleMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<UnityEngine::Vector3>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<int32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, layerId, vertices, triangles, meshHandle);
}
 bool GlobalNamespace::OVRPlugin::DestroyInsightTriangleMesh(uint64_t meshHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "DestroyInsightTriangleMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, meshHandle);
}
 bool GlobalNamespace::OVRPlugin::AddInsightPassthroughSurfaceGeometry(int32_t layerId, uint64_t meshHandle, UnityEngine::Matrix4x4 T_world_model, ByRef<uint64_t> geometryInstanceHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "AddInsightPassthroughSurfaceGeometry",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Matrix4x4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, layerId, meshHandle, T_world_model, geometryInstanceHandle);
}
 bool GlobalNamespace::OVRPlugin::DestroyInsightPassthroughGeometryInstance(uint64_t geometryInstanceHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "DestroyInsightPassthroughGeometryInstance",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, geometryInstanceHandle);
}
 bool GlobalNamespace::OVRPlugin::UpdateInsightPassthroughGeometryTransform(uint64_t geometryInstanceHandle, UnityEngine::Matrix4x4 transform)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "UpdateInsightPassthroughGeometryTransform",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Matrix4x4>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, geometryInstanceHandle, transform);
}
 bool GlobalNamespace::OVRPlugin::SetInsightPassthroughStyle(int32_t layerId, GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle style)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetInsightPassthroughStyle",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, layerId, style);
}
 bool GlobalNamespace::OVRPlugin::SetInsightPassthroughKeyboardHandsIntensity(int32_t layerId, GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity intensity)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetInsightPassthroughKeyboardHandsIntensity",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, layerId, intensity);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags GlobalNamespace::OVRPlugin::GetPassthroughCapabilityFlags()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetPassthroughCapabilityFlags",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GlobalNamespace::OVRPlugin::GetBoundaryDimensions(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetBoundaryDimensions",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, false>(nullptr, ___internal_method, boundaryType);
}
 bool GlobalNamespace::OVRPlugin::GetBoundaryVisible()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetBoundaryVisible",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::SetBoundaryVisible(bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetBoundaryVisible",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset GlobalNamespace::OVRPlugin::GetSystemHeadsetType()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSystemHeadsetType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Controller GlobalNamespace::OVRPlugin::GetActiveController()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetActiveController",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Controller GlobalNamespace::OVRPlugin::GetConnectedControllers()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetConnectedControllers",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Controller, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool GlobalNamespace::OVRPlugin::ToBool(bool b)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "ToBool",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, false>(nullptr, ___internal_method, b);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin GlobalNamespace::OVRPlugin::GetTrackingOriginType()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetTrackingOriginType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::SetTrackingOriginType(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin originType)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetTrackingOriginType",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, originType);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::OVRPlugin::GetTrackingCalibratedOrigin()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetTrackingCalibratedOrigin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::SetTrackingCalibratedOrigin()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetTrackingCalibratedOrigin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::RecenterTrackingOrigin(GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags flags)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "RecenterTrackingOrigin",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, flags);
}
 bool GlobalNamespace::OVRPlugin::get_foveatedRenderingSupported()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_foveatedRenderingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_eyeTrackedFoveatedRenderingSupported()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_eyeTrackedFoveatedRenderingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_eyeTrackedFoveatedRenderingEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_eyeTrackedFoveatedRenderingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_eyeTrackedFoveatedRenderingEnabled(bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_eyeTrackedFoveatedRenderingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::get_fixedFoveatedRenderingSupported()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_fixedFoveatedRenderingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel GlobalNamespace::OVRPlugin::get_foveatedRenderingLevel()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_foveatedRenderingLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_foveatedRenderingLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_foveatedRenderingLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel GlobalNamespace::OVRPlugin::get_fixedFoveatedRenderingLevel()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_fixedFoveatedRenderingLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_fixedFoveatedRenderingLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_fixedFoveatedRenderingLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::get_useDynamicFoveatedRendering()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_useDynamicFoveatedRendering",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_useDynamicFoveatedRendering(bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_useDynamicFoveatedRendering",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::get_useDynamicFixedFoveatedRendering()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_useDynamicFixedFoveatedRendering",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_useDynamicFixedFoveatedRendering(bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_useDynamicFixedFoveatedRendering",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::get_tiledMultiResSupported()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_tiledMultiResSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel GlobalNamespace::OVRPlugin::get_tiledMultiResLevel()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_tiledMultiResLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_tiledMultiResLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_tiledMultiResLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::get_gpuUtilSupported()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_gpuUtilSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 float_t GlobalNamespace::OVRPlugin::get_gpuUtilLevel()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_gpuUtilLevel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 ::ArrayW<float_t> GlobalNamespace::OVRPlugin::get_systemDisplayFrequenciesAvailable()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_systemDisplayFrequenciesAvailable",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::ArrayW<float_t>, false>(nullptr, ___internal_method);
}
 float_t GlobalNamespace::OVRPlugin::get_systemDisplayFrequency()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_systemDisplayFrequency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_systemDisplayFrequency(float_t value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_systemDisplayFrequency",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<float_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::get_eyeFovPremultipliedAlphaModeEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_eyeFovPremultipliedAlphaModeEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_eyeFovPremultipliedAlphaModeEnabled(bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_eyeFovPremultipliedAlphaModeEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 bool GlobalNamespace::OVRPlugin::GetNodeFrustum2(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2> frustum)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNodeFrustum2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Node>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, nodeId, frustum);
}
 bool GlobalNamespace::OVRPlugin::get_AsymmetricFovEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_AsymmetricFovEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_EyeTextureArrayEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_EyeTextureArrayEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_localDimmingSupported()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_localDimmingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_localDimming()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_localDimming",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 void GlobalNamespace::OVRPlugin::set_localDimming(bool value)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "set_localDimming",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(nullptr, ___internal_method, value);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness GlobalNamespace::OVRPlugin::GetDominantHand()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetDominantHand",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness, false>(nullptr, ___internal_method);
}
/// @param param: ::StringW (default: u"")
/// @param source: ::StringW (default: u"")
 bool GlobalNamespace::OVRPlugin::SendEvent(::StringW name, ::StringW param, ::StringW source)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SendEvent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, name, param, source);
}
 bool GlobalNamespace::OVRPlugin::SetHeadPoseModifier(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> relativeRotation, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> relativeTranslation)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetHeadPoseModifier",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, relativeRotation, relativeTranslation);
}
 bool GlobalNamespace::OVRPlugin::GetHeadPoseModifier(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> relativeRotation, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> relativeTranslation)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetHeadPoseModifier",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, relativeRotation, relativeTranslation);
}
 bool GlobalNamespace::OVRPlugin::IsPerfMetricsSupported(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics perfMetrics)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "IsPerfMetricsSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, perfMetrics);
}
 System::Nullable_1<float_t> GlobalNamespace::OVRPlugin::GetPerfMetricsFloat(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics perfMetrics)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetPerfMetricsFloat",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<System::Nullable_1<float_t>, false>(nullptr, ___internal_method, perfMetrics);
}
 System::Nullable_1<int32_t> GlobalNamespace::OVRPlugin::GetPerfMetricsInt(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics perfMetrics)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetPerfMetricsInt",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<System::Nullable_1<int32_t>, false>(nullptr, ___internal_method, perfMetrics);
}
 double_t GlobalNamespace::OVRPlugin::GetTimeInSeconds()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetTimeInSeconds",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<double_t, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::SetColorScaleAndOffset(UnityEngine::Vector4 colorScale, UnityEngine::Vector4 colorOffset, bool applyToAllLayers)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetColorScaleAndOffset",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Vector4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<UnityEngine::Vector4>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, colorScale, colorOffset, applyToAllLayers);
}
/// @param param: ::StringW (default: u"")
 bool GlobalNamespace::OVRPlugin::AddCustomMetadata(::StringW name, ::StringW param)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "AddCustomMetadata",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, name, param);
}
 bool GlobalNamespace::OVRPlugin::SetDeveloperMode(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool active)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetDeveloperMode",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, active);
}
 float_t GlobalNamespace::OVRPlugin::GetAdaptiveGPUPerformanceScale()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetAdaptiveGPUPerformanceScale",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<float_t, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::GetHandTrackingEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetHandTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::GetHandState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, GlobalNamespace::GlobalNamespace__OVRPlugin__Hand hand, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__HandState> handState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetHandState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Hand>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__HandState>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, stepId, hand, handState);
}
 bool GlobalNamespace::OVRPlugin::GetSkeleton(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType skeletonType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton> skeleton)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSkeleton",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, skeletonType, skeleton);
}
 bool GlobalNamespace::OVRPlugin::GetSkeleton2(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType skeletonType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2> skeleton)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSkeleton2",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, skeletonType, skeleton);
}
 bool GlobalNamespace::OVRPlugin::get_bodyTrackingSupported()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_bodyTrackingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_bodyTrackingEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_bodyTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::GetBodyState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState> bodyState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetBodyState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, stepId, bodyState);
}
 bool GlobalNamespace::OVRPlugin::GetMesh(GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType meshType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh> mesh)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetMesh",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, meshType, mesh);
}
 bool GlobalNamespace::OVRPlugin::StartKeyboardTracking(uint64_t trackedKeyboardId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StartKeyboardTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, trackedKeyboardId);
}
 bool GlobalNamespace::OVRPlugin::StopKeyboardTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StopKeyboardTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::GetKeyboardState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState> keyboardState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetKeyboardState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, stepId, keyboardState);
}
 bool GlobalNamespace::OVRPlugin::GetSystemKeyboardDescription(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags keyboardQueryFlags, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription> keyboardDescription)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSystemKeyboardDescription",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, keyboardQueryFlags, keyboardDescription);
}
 bool GlobalNamespace::OVRPlugin::get_faceTrackingEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_faceTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_faceTrackingSupported()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_faceTrackingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::GetFaceState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState> faceState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetFaceState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, stepId, frameIndex, faceState);
}
 bool GlobalNamespace::OVRPlugin::get_eyeTrackingEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_eyeTrackingEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::get_eyeTrackingSupported()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "get_eyeTrackingSupported",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::GetEyeGazesState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesState> eyeGazesState)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetEyeGazesState",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Step>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<int32_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesState>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, stepId, frameIndex, eyeGazesState);
}
 bool GlobalNamespace::OVRPlugin::StartEyeTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StartEyeTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::StopEyeTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StopEyeTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::StartFaceTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StartFaceTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::StopFaceTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StopFaceTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::StartBodyTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StartBodyTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::StopBodyTracking()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "StopBodyTracking",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 int32_t GlobalNamespace::OVRPlugin::GetLocalTrackingSpaceRecenterCount()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetLocalTrackingSpaceRecenterCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<int32_t, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::GetSystemHmd3DofModeEnabled()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSystemHmd3DofModeEnabled",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::SetClientColorDesc(GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace colorSpace)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetClientColorDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, colorSpace);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace GlobalNamespace::OVRPlugin::GetHmdColorDesc()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetHmdColorDesc",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::PollEvent(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer> eventDataBuffer)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "PollEvent",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, eventDataBuffer);
}
 uint64_t GlobalNamespace::OVRPlugin::GetNativeOpenXRInstance()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNativeOpenXRInstance",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<uint64_t, false>(nullptr, ___internal_method);
}
 uint64_t GlobalNamespace::OVRPlugin::GetNativeOpenXRSession()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetNativeOpenXRSession",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<uint64_t, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::SetKeyboardOverlayUV(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f uv)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetKeyboardOverlayUV",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, uv);
}
 bool GlobalNamespace::OVRPlugin::CreateSpatialAnchor(GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo createInfo, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "CreateSpatialAnchor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, createInfo, requestId);
}
 bool GlobalNamespace::OVRPlugin::SetSpaceComponentStatus(uint64_t space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType componentType, bool enable, double_t timeout, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SetSpaceComponentStatus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<bool>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<double_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, componentType, enable, timeout, requestId);
}
 bool GlobalNamespace::OVRPlugin::GetSpaceComponentStatus(uint64_t space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType componentType, ByRef<bool> enabled, ByRef<bool> changePending)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceComponentStatus",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<bool>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<bool>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, componentType, enabled, changePending);
}
 bool GlobalNamespace::OVRPlugin::EnumerateSpaceSupportedComponents(uint64_t space, ByRef<uint32_t> numSupportedComponents, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType> supportedComponents)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "EnumerateSpaceSupportedComponents",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint32_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, numSupportedComponents, supportedComponents);
}
 bool GlobalNamespace::OVRPlugin::SaveSpace(uint64_t space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation location, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode mode, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SaveSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, location, mode, requestId);
}
 bool GlobalNamespace::OVRPlugin::EraseSpace(uint64_t space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation location, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "EraseSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, location, requestId);
}
 bool GlobalNamespace::OVRPlugin::GetSpaceUuid(uint64_t space, ByRef<System::Guid> uuid)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceUuid",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<System::Guid>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, uuid);
}
 bool GlobalNamespace::OVRPlugin::QuerySpaces(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo queryInfo, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "QuerySpaces",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, queryInfo, requestId);
}
 bool GlobalNamespace::OVRPlugin::RetrieveSpaceQueryResults(uint64_t requestId, ByRef<Unity::Collections::NativeArray_1<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult>> results, Unity::Collections::Allocator allocator)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "RetrieveSpaceQueryResults",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<Unity::Collections::NativeArray_1<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult>>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<Unity::Collections::Allocator>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, requestId, results, allocator);
}
 bool GlobalNamespace::OVRPlugin::RetrieveSpaceQueryResults(uint64_t requestId, ByRef<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult>> results)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "RetrieveSpaceQueryResults",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult>>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, requestId, results);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::OVRPlugin::SaveSpaceList(Unity::Collections::NativeArray_1<uint64_t> spaces, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation location, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "SaveSpaceList",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<Unity::Collections::NativeArray_1<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, spaces, location, requestId);
}
 bool GlobalNamespace::OVRPlugin::GetSpaceUserId(uint64_t spaceUserHandle, ByRef<uint64_t> spaceUserId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceUserId",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, spaceUserHandle, spaceUserId);
}
 bool GlobalNamespace::OVRPlugin::CreateSpaceUser(uint64_t spaceUserId, ByRef<uint64_t> spaceUserHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "CreateSpaceUser",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, spaceUserId, spaceUserHandle);
}
 bool GlobalNamespace::OVRPlugin::DestroySpaceUser(uint64_t spaceUserHandle)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "DestroySpaceUser",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, spaceUserHandle);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Result GlobalNamespace::OVRPlugin::ShareSpaces(Unity::Collections::NativeArray_1<uint64_t> spaces, Unity::Collections::NativeArray_1<uint64_t> userHandles, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "ShareSpaces",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<Unity::Collections::NativeArray_1<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<Unity::Collections::NativeArray_1<uint64_t>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Result, false>(nullptr, ___internal_method, spaces, userHandles, requestId);
}
 bool GlobalNamespace::OVRPlugin::TryLocateSpace(uint64_t space, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin baseOrigin, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> pose)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "TryLocateSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, baseOrigin, pose);
}
 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GlobalNamespace::OVRPlugin::LocateSpace(uint64_t space, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin baseOrigin)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "LocateSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, false>(nullptr, ___internal_method, space, baseOrigin);
}
 bool GlobalNamespace::OVRPlugin::TryLocateSpace(uint64_t space, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin baseOrigin, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> pose, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags> locationFlags)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "TryLocateSpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef>>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, baseOrigin, pose, locationFlags);
}
 bool GlobalNamespace::OVRPlugin::DestroySpace(uint64_t space)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "DestroySpace",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space);
}
 bool GlobalNamespace::OVRPlugin::GetSpaceContainer(uint64_t space, ByRef<::ArrayW<System::Guid>> containerUuids)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceContainer",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::ArrayW<System::Guid>>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, containerUuids);
}
 bool GlobalNamespace::OVRPlugin::GetSpaceBoundingBox2D(uint64_t space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf> rect)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceBoundingBox2D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, rect);
}
 bool GlobalNamespace::OVRPlugin::GetSpaceBoundingBox3D(uint64_t space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf> bounds)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceBoundingBox3D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, bounds);
}
 bool GlobalNamespace::OVRPlugin::GetSpaceSemanticLabels(uint64_t space, ByRef<::StringW> labels)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceSemanticLabels",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::StringW>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, labels);
}
 bool GlobalNamespace::OVRPlugin::GetSpaceRoomLayout(uint64_t space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayout> roomLayout)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceRoomLayout",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayout>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, roomLayout);
}
 bool GlobalNamespace::OVRPlugin::GetSpaceBoundary2DCount(uint64_t space, ByRef<int32_t> count)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceBoundary2DCount",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<int32_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, count);
}
 bool GlobalNamespace::OVRPlugin::GetSpaceBoundary2D(uint64_t space, Unity::Collections::NativeArray_1<UnityEngine::Vector2> boundary)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceBoundary2D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<Unity::Collections::NativeArray_1<UnityEngine::Vector2>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, boundary);
}
 Unity::Collections::NativeArray_1<UnityEngine::Vector2> GlobalNamespace::OVRPlugin::GetSpaceBoundary2D(uint64_t space, Unity::Collections::Allocator allocator)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceBoundary2D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<Unity::Collections::Allocator>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<Unity::Collections::NativeArray_1<UnityEngine::Vector2>, false>(nullptr, ___internal_method, space, allocator);
}
 bool GlobalNamespace::OVRPlugin::GetSpaceBoundary2D(uint64_t space, ByRef<::ArrayW<UnityEngine::Vector2>> boundary)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetSpaceBoundary2D",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<::ArrayW<UnityEngine::Vector2>>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, space, boundary);
}
 bool GlobalNamespace::OVRPlugin::RequestSceneCapture(::StringW requestString, ByRef<uint64_t> requestId)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "RequestSceneCapture",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<uint64_t>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, requestString, requestId);
}
 ::ArrayW<::StringW> GlobalNamespace::OVRPlugin::GetRenderModelPaths()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetRenderModelPaths",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<::ArrayW<::StringW>, false>(nullptr, ___internal_method);
}
 bool GlobalNamespace::OVRPlugin::GetRenderModelProperties(::StringW modelPath, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties> modelProperties)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "GetRenderModelProperties",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::StringW>::get(), ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<bool, false>(nullptr, ___internal_method, modelPath, modelProperties);
}
 ::ArrayW<uint8_t> GlobalNamespace::OVRPlugin::LoadRenderModel(uint64_t modelKey)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::OVRPlugin>::get(),
                            "LoadRenderModel",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<uint64_t>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<::ArrayW<uint8_t>, false>(nullptr, ___internal_method, modelKey);
}
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>._ctor
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>::*)(::ArrayW<System::Guid>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>::_ctor)> {
  constexpr static std::size_t size = 0xffffffffffffffff;
  constexpr static std::size_t addrs = 0x0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<System::Guid>>::get()}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>.Dispose
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<void (GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>::*)()>(&GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>::Dispose)> {
  constexpr static std::size_t size = 0xffffffffffffffff;
  constexpr static std::size_t addrs = 0x0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>>::get(),
                            "Dispose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
    return ___internal_method;
  }
};
//  Writing Method size for method: GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>.op_Implicit___cordl_internals__intptr_t
template<>

struct ::il2cpp_utils::il2cpp_type_check::MetadataGetter<static_cast<::cordl_internals::intptr_t (*)(GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>)>(&GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>::op_Implicit___cordl_internals__intptr_t)> {
  constexpr static std::size_t size = 0xffffffffffffffff;
  constexpr static std::size_t addrs = 0x0;

  inline static const ::MethodInfo* methodInfo() {
    static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>>::get(),
                            "op_Implicit",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>>::get()}
                        )));
    return ___internal_method;
  }
};
/// @brief Convert operator to System::IDisposable
constexpr  GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>::operator System::IDisposable() const {
return System::IDisposable(::cordl_internals::Box(this).convert());
}
// Ctor Parameters [CppParam { name: "_handle", ty: "System::Runtime::InteropServices::GCHandle", modifiers: "", def_value: Some("{}") }]
constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>::GlobalNamespace__OVRPlugin__PinnedArray_1(System::Runtime::InteropServices::GCHandle _handle) noexcept : ::bs_hook::ValueTypeWrapper() {this->_handle = _handle;
}
constexpr void GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>::__set__handle(System::Runtime::InteropServices::GCHandle value)  {
::cordl_internals::setInstanceField<System::Runtime::InteropServices::GCHandle, 0x0>(this->__instance, std::forward<System::Runtime::InteropServices::GCHandle>(value));
}
constexpr System::Runtime::InteropServices::GCHandle GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>::__get__handle() const {
return ::cordl_internals::getInstanceField<System::Runtime::InteropServices::GCHandle, 0x0>(this->__instance);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>::_ctor(::ArrayW<System::Guid> array)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>>::get(),
                            ".ctor",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<::ArrayW<System::Guid>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method, array);
}
 void GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>::Dispose()  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>>::get(),
                            "Dispose",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{}
                        )));
return ::cordl_internals::RunMethodRethrow<void, false>(const_cast<void*>(reinterpret_cast<const void*>(__instance.data())), ___internal_method);
}
 ::cordl_internals::intptr_t GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>::op_Implicit___cordl_internals__intptr_t(GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid> pinnedArray)  {
static auto* ___internal_method = THROW_UNLESS((::il2cpp_utils::FindMethod(
                            ::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>>::get(),
                            "op_Implicit",
                            std::vector<Il2CppClass*>{},
                            ::std::vector<const Il2CppType*>{::il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_type<GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>>::get()}
                        )));
return ::cordl_internals::RunMethodRethrow<::cordl_internals::intptr_t, false>(nullptr, ___internal_method, pinnedArray);
}
