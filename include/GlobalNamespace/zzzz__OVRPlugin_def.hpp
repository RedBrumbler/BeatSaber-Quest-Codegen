#pragma once
#include "../cordl_internals/cordl_internals.hpp"
#include "System/zzzz__MulticastDelegate_def.hpp"
#include "beatsaber-hook/shared/utils/base-wrapper-type.hpp"
#include "beatsaber-hook/shared/utils/byref.hpp"
#include "beatsaber-hook/shared/utils/typedefs-array.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
#include <cmath>
#include <cstddef>
#include <cstdint>
namespace System {
class AsyncCallback;
}
namespace System {
class IAsyncResult;
}
namespace UnityEngine {
class Texture2D;
}
namespace UnityEngine {
class RenderTexture;
}
namespace System {
class Version;
}
namespace UnityEngine {
struct Vector4;
}
namespace UnityEngine {
struct Matrix4x4;
}
namespace System {
struct Guid;
}
namespace UnityEngine {
struct Vector3;
}
namespace GlobalNamespace {
class OVRNativeBuffer;
}
namespace Unity::Collections {
struct Allocator;
}
namespace UnityEngine {
struct Vector2;
}
namespace System {
template<typename T>
struct Nullable_1;
}
namespace Unity::Collections {
template<typename T>
struct NativeArray_1;
}
namespace System::Runtime::InteropServices {
struct GCHandle;
}
namespace System {
class IDisposable;
}
namespace System {
template<typename T>
class IEquatable_1;
}
namespace UnityEngine {
struct Rect;
}
// Forward declare root types
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__BatteryStatus;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__BlendFactor;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__BoneId;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Bool;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__BoundaryType;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__CameraAnchorType;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__CameraDevice;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__CameraStatus;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__ColorSpace;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Controller;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__EventType;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Eye;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__EyeTextureFormat;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__FaceConstants;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__FaceExpression;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__FaceRegionConfidence;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__FeatureType;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__FoveatedRenderingLevel;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Hand;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__HandFinger;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__HandFingerPinch;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__HandStatus;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Handedness;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__HapticsConstants;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__HapticsLocation;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__InteractionProfile;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__LayerFlags;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__LayerLayout;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__LogLevel;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Media__InputVideoBufferType;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Media__MrcActivationMode;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Media__PlatformCameraMode;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__MeshConstants;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__MeshType;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Node;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__OverlayFlag;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__OverlayShape;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__PerfMetrics;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__PlatformUI;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__RecenterFlags;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__RenderModelFlags;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Result;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SkeletonConstants;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SkeletonType;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpaceComponentType;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpaceLocationFlags;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpaceQueryActionType;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpaceQueryFilterType;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpaceQueryType;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpaceStorageLocation;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Step;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SystemHeadset;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SystemRegion;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__TiledMultiResLevel;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__TrackedKeyboardFlags;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Tracker;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__TrackingConfidence;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__TrackingOrigin;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__XrApi;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__GUID;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__Ktx;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__LogCallback2DelegateType;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__Media;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__Mesh;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_0_1_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_0_1_1;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_0_1_2;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_0_1_3;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_0_5_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_0_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_10_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_11_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_12_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_15_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_16_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_17_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_18_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_19_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_1_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_21_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_28_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_29_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_2_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_30_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_31_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_32_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_34_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_35_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_36_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_37_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_38_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_39_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_3_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_40_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_41_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_42_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_43_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_44_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_45_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_46_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_47_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_48_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_49_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_50_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_51_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_52_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_53_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_54_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_55_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_55_1;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_56_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_57_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_58_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_59_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_5_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_60_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_61_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_62_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_63_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_64_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_65_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_66_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_67_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_68_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_69_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_6_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_70_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_71_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_72_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_73_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_74_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_75_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_76_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_78_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_79_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_7_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_81_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_82_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_8_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__OVRP_1_9_0;
}
namespace GlobalNamespace {
class GlobalNamespace__OVRPlugin__UnityOpenXR;
}
namespace GlobalNamespace {
class OVRPlugin;
}
namespace GlobalNamespace {
template<typename T>
struct GlobalNamespace__OVRPlugin__PinnedArray_1;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__AppPerfFrameStats;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__AppPerfStats;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__BodyJointLocation;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__BodyState;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__BodyStateInternal;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Bone;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__BoneCapsule;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__BoundaryGeometry;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__BoundaryTestResult;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Boundsf;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__CameraExtrinsics;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__CameraIntrinsics;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Colorf;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__ControllerState;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__ControllerState2;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__ControllerState4;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__ControllerState5;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__EventDataBuffer;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__EyeGazeState;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__EyeGazesState;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__EyeGazesStateInternal;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__FaceExpressionStatus;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__FaceState;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__FaceStateInternal;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Fovf;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Frustumf;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Frustumf2;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__HandState;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__HandStateInternal;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__HapticsBuffer;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__HapticsDesc;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__HapticsPcmVibration;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__HapticsState;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__InsightPassthroughStyle;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__KeyboardDescription;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__KeyboardState;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__LayerDesc;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__LayerDescInternal;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__LayerSubmit;
}
namespace GlobalNamespace {
template<>
struct GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid>;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__PoseStatef;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Posef;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Quatf;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Rectf;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Recti;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__RenderModelProperties;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__RoomLayout;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__RoomLayoutInternal;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Size3f;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Sizef;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Sizei;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Skeleton;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Skeleton2;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Skeleton2Internal;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpaceContainerInternal;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpaceFilterInfoIds;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpaceLocationf;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpaceQueryInfo;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpaceQueryResult;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__TextureRectMatrixf;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Vector2f;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Vector2i;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Vector3f;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Vector4f;
}
namespace GlobalNamespace {
struct GlobalNamespace__OVRPlugin__Vector4s;
}
// Type: ::GUID
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8597))
// CS Name: OVRPlugin::GUID
class CORDL_TYPE GlobalNamespace__OVRPlugin__GUID : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x20};

virtual ~GlobalNamespace__OVRPlugin__GUID() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__GUID", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__GUID(GlobalNamespace__OVRPlugin__GUID const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__GUID", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__GUID(GlobalNamespace__OVRPlugin__GUID&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__GUID(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__GUID& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__GUID& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__GUID& operator=(GlobalNamespace__OVRPlugin__GUID&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__GUID& operator=(GlobalNamespace__OVRPlugin__GUID const& o) noexcept = default;
                


// Fields

 int32_t __declspec(property(get=__get_a, put=__set_a))  a;

constexpr void __set_a(int32_t value) ;

constexpr int32_t __get_a() const;

 int16_t __declspec(property(get=__get_b, put=__set_b))  b;

constexpr void __set_b(int16_t value) ;

constexpr int16_t __get_b() const;

 int16_t __declspec(property(get=__get_c, put=__set_c))  c;

constexpr void __set_c(int16_t value) ;

constexpr int16_t __get_c() const;

 uint8_t __declspec(property(get=__get_d0, put=__set_d0))  d0;

constexpr void __set_d0(uint8_t value) ;

constexpr uint8_t __get_d0() const;

 uint8_t __declspec(property(get=__get_d1, put=__set_d1))  d1;

constexpr void __set_d1(uint8_t value) ;

constexpr uint8_t __get_d1() const;

 uint8_t __declspec(property(get=__get_d2, put=__set_d2))  d2;

constexpr void __set_d2(uint8_t value) ;

constexpr uint8_t __get_d2() const;

 uint8_t __declspec(property(get=__get_d3, put=__set_d3))  d3;

constexpr void __set_d3(uint8_t value) ;

constexpr uint8_t __get_d3() const;

 uint8_t __declspec(property(get=__get_d4, put=__set_d4))  d4;

constexpr void __set_d4(uint8_t value) ;

constexpr uint8_t __get_d4() const;

 uint8_t __declspec(property(get=__get_d5, put=__set_d5))  d5;

constexpr void __set_d5(uint8_t value) ;

constexpr uint8_t __get_d5() const;

 uint8_t __declspec(property(get=__get_d6, put=__set_d6))  d6;

constexpr void __set_d6(uint8_t value) ;

constexpr uint8_t __get_d6() const;

 uint8_t __declspec(property(get=__get_d7, put=__set_d7))  d7;

constexpr void __set_d7(uint8_t value) ;

constexpr uint8_t __get_d7() const;


// Methods

// Ctor Parameters []
explicit GlobalNamespace__OVRPlugin__GUID() ;

/// @brief Method .ctor addr 0x26209b8 size 0x8 virtual false final false
 void _ctor() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Bool
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8598))
// CS Name: OVRPlugin::Bool
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Bool : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Bool(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Bool(GlobalNamespace__OVRPlugin__Bool const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Bool(GlobalNamespace__OVRPlugin__Bool&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Bool& operator=(GlobalNamespace__OVRPlugin__Bool const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Bool& operator=(GlobalNamespace__OVRPlugin__Bool&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Bool(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__Bool_Unwrapped : int32_t {
__False = 0,
__True = 1,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__Bool_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__Bool_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field False offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool const False;

/// @brief Field True offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool const True;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Result
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8599))
// CS Name: OVRPlugin::Result
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Result : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Result(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Result(GlobalNamespace__OVRPlugin__Result const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Result(GlobalNamespace__OVRPlugin__Result&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Result& operator=(GlobalNamespace__OVRPlugin__Result const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Result& operator=(GlobalNamespace__OVRPlugin__Result&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Result(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__Result_Unwrapped : int32_t {
__Success = 0,
__Success_EventUnavailable = 1,
__Success_Pending = 2,
__Failure = -1000,
__Failure_InvalidParameter = -1001,
__Failure_NotInitialized = -1002,
__Failure_InvalidOperation = -1003,
__Failure_Unsupported = -1004,
__Failure_NotYetImplemented = -1005,
__Failure_OperationFailed = -1006,
__Failure_InsufficientSize = -1007,
__Failure_DataIsInvalid = -1008,
__Failure_DeprecatedOperation = -1009,
__Failure_ErrorLimitReached = -1010,
__Failure_ErrorInitializationFailed = -1011,
__Failure_SpaceCloudStorageDisabled = -2000,
__Failure_SpaceMappingInsufficient = -2001,
__Failure_SpaceLocalizationFailed = -2002,
__Failure_SpaceNetworkTimeout = -2003,
__Failure_SpaceNetworkRequestFailed = -2004,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__Result_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__Result_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Success offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Success;

/// @brief Field Success_EventUnavailable offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Success_EventUnavailable;

/// @brief Field Success_Pending offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Success_Pending;

/// @brief Field Failure offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure;

/// @brief Field Failure_InvalidParameter offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_InvalidParameter;

/// @brief Field Failure_NotInitialized offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_NotInitialized;

/// @brief Field Failure_InvalidOperation offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_InvalidOperation;

/// @brief Field Failure_Unsupported offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_Unsupported;

/// @brief Field Failure_NotYetImplemented offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_NotYetImplemented;

/// @brief Field Failure_OperationFailed offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_OperationFailed;

/// @brief Field Failure_InsufficientSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_InsufficientSize;

/// @brief Field Failure_DataIsInvalid offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_DataIsInvalid;

/// @brief Field Failure_DeprecatedOperation offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_DeprecatedOperation;

/// @brief Field Failure_ErrorLimitReached offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_ErrorLimitReached;

/// @brief Field Failure_ErrorInitializationFailed offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_ErrorInitializationFailed;

/// @brief Field Failure_SpaceCloudStorageDisabled offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_SpaceCloudStorageDisabled;

/// @brief Field Failure_SpaceMappingInsufficient offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_SpaceMappingInsufficient;

/// @brief Field Failure_SpaceLocalizationFailed offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_SpaceLocalizationFailed;

/// @brief Field Failure_SpaceNetworkTimeout offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_SpaceNetworkTimeout;

/// @brief Field Failure_SpaceNetworkRequestFailed offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result const Failure_SpaceNetworkRequestFailed;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::LogLevel
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8600))
// CS Name: OVRPlugin::LogLevel
struct CORDL_TYPE GlobalNamespace__OVRPlugin__LogLevel : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__LogLevel(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__LogLevel(GlobalNamespace__OVRPlugin__LogLevel const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__LogLevel(GlobalNamespace__OVRPlugin__LogLevel&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__LogLevel& operator=(GlobalNamespace__OVRPlugin__LogLevel const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__LogLevel& operator=(GlobalNamespace__OVRPlugin__LogLevel&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__LogLevel(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__LogLevel_Unwrapped : int32_t {
__Debug = 0,
__Info = 1,
__Error = 2,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__LogLevel_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__LogLevel_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Debug offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel const Debug;

/// @brief Field Info offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel const Info;

/// @brief Field Error offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel const Error;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::LogCallback2DelegateType
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2610))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8601))
// CS Name: OVRPlugin::LogCallback2DelegateType
class CORDL_TYPE GlobalNamespace__OVRPlugin__LogCallback2DelegateType : public System::MulticastDelegate {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x80};

virtual ~GlobalNamespace__OVRPlugin__LogCallback2DelegateType() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__LogCallback2DelegateType", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__LogCallback2DelegateType(GlobalNamespace__OVRPlugin__LogCallback2DelegateType const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__LogCallback2DelegateType", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__LogCallback2DelegateType(GlobalNamespace__OVRPlugin__LogCallback2DelegateType&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__LogCallback2DelegateType(void* ptr) noexcept : System::MulticastDelegate(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__LogCallback2DelegateType& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__LogCallback2DelegateType& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__LogCallback2DelegateType& operator=(GlobalNamespace__OVRPlugin__LogCallback2DelegateType&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__LogCallback2DelegateType& operator=(GlobalNamespace__OVRPlugin__LogCallback2DelegateType const& o) noexcept = default;
                


// Methods

// Ctor Parameters [CppParam { name: "object", ty: "::bs_hook::Il2CppWrapperType", modifiers: "", def_value: None }, CppParam { name: "method", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: None }]
explicit GlobalNamespace__OVRPlugin__LogCallback2DelegateType(::bs_hook::Il2CppWrapperType object, ::cordl_internals::intptr_t method) ;

/// @brief Method .ctor addr 0x26209c0 size 0xc4 virtual false final false
 void _ctor(::bs_hook::Il2CppWrapperType object, ::cordl_internals::intptr_t method) ;

/// @brief Method Invoke addr 0x2620a84 size 0x14 virtual true final false
 void Invoke(GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel logLevel, ::cordl_internals::intptr_t message, int32_t size) ;

/// @brief Method BeginInvoke addr 0x2620a98 size 0xe4 virtual true final false
 System::IAsyncResult BeginInvoke(GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel logLevel, ::cordl_internals::intptr_t message, int32_t size, System::AsyncCallback callback, ::bs_hook::Il2CppWrapperType object) ;

/// @brief Method EndInvoke addr 0x2620b7c size 0xc virtual true final false
 void EndInvoke(System::IAsyncResult result) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::CameraStatus
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8602))
// CS Name: OVRPlugin::CameraStatus
struct CORDL_TYPE GlobalNamespace__OVRPlugin__CameraStatus : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__CameraStatus(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__CameraStatus(GlobalNamespace__OVRPlugin__CameraStatus const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraStatus(GlobalNamespace__OVRPlugin__CameraStatus&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraStatus& operator=(GlobalNamespace__OVRPlugin__CameraStatus const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__CameraStatus& operator=(GlobalNamespace__OVRPlugin__CameraStatus&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__CameraStatus(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__CameraStatus_Unwrapped : int32_t {
__CameraStatus_None = 0,
__CameraStatus_Connected = 1,
__CameraStatus_Calibrating = 2,
__CameraStatus_CalibrationFailed = 3,
__CameraStatus_Calibrated = 4,
__CameraStatus_ThirdPerson = 5,
__CameraStatus_EnumSize = 2147483647,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__CameraStatus_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__CameraStatus_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field CameraStatus_None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus const CameraStatus_None;

/// @brief Field CameraStatus_Connected offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus const CameraStatus_Connected;

/// @brief Field CameraStatus_Calibrating offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus const CameraStatus_Calibrating;

/// @brief Field CameraStatus_CalibrationFailed offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus const CameraStatus_CalibrationFailed;

/// @brief Field CameraStatus_Calibrated offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus const CameraStatus_Calibrated;

/// @brief Field CameraStatus_ThirdPerson offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus const CameraStatus_ThirdPerson;

/// @brief Field CameraStatus_EnumSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus const CameraStatus_EnumSize;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::CameraAnchorType
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8603))
// CS Name: OVRPlugin::CameraAnchorType
struct CORDL_TYPE GlobalNamespace__OVRPlugin__CameraAnchorType : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__CameraAnchorType(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__CameraAnchorType(GlobalNamespace__OVRPlugin__CameraAnchorType const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraAnchorType(GlobalNamespace__OVRPlugin__CameraAnchorType&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraAnchorType& operator=(GlobalNamespace__OVRPlugin__CameraAnchorType const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__CameraAnchorType& operator=(GlobalNamespace__OVRPlugin__CameraAnchorType&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__CameraAnchorType(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__CameraAnchorType_Unwrapped : int32_t {
__CameraAnchorType_PreDefined = 0,
__CameraAnchorType_Custom = 1,
__CameraAnchorType_Count = 2,
__CameraAnchorType_EnumSize = 2147483647,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__CameraAnchorType_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__CameraAnchorType_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field CameraAnchorType_PreDefined offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType const CameraAnchorType_PreDefined;

/// @brief Field CameraAnchorType_Custom offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType const CameraAnchorType_Custom;

/// @brief Field CameraAnchorType_Count offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType const CameraAnchorType_Count;

/// @brief Field CameraAnchorType_EnumSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType const CameraAnchorType_EnumSize;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::XrApi
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8604))
// CS Name: OVRPlugin::XrApi
struct CORDL_TYPE GlobalNamespace__OVRPlugin__XrApi : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__XrApi(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__XrApi(GlobalNamespace__OVRPlugin__XrApi const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__XrApi(GlobalNamespace__OVRPlugin__XrApi&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__XrApi& operator=(GlobalNamespace__OVRPlugin__XrApi const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__XrApi& operator=(GlobalNamespace__OVRPlugin__XrApi&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__XrApi(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__XrApi_Unwrapped : int32_t {
__Unknown = 0,
__CAPI = 1,
__VRAPI = 2,
__OpenXR = 3,
__EnumSize = 2147483647,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__XrApi_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__XrApi_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Unknown offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi const Unknown;

/// @brief Field CAPI offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi const CAPI;

/// @brief Field VRAPI offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi const VRAPI;

/// @brief Field OpenXR offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi const OpenXR;

/// @brief Field EnumSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi const EnumSize;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Eye
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8605))
// CS Name: OVRPlugin::Eye
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Eye : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Eye(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Eye(GlobalNamespace__OVRPlugin__Eye const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Eye(GlobalNamespace__OVRPlugin__Eye&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Eye& operator=(GlobalNamespace__OVRPlugin__Eye const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Eye& operator=(GlobalNamespace__OVRPlugin__Eye&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Eye(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__Eye_Unwrapped : int32_t {
__None = -1,
__Left = 0,
__Right = 1,
__Count = 2,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__Eye_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__Eye_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Eye const None;

/// @brief Field Left offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Eye const Left;

/// @brief Field Right offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Eye const Right;

/// @brief Field Count offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Eye const Count;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Tracker
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8606))
// CS Name: OVRPlugin::Tracker
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Tracker : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Tracker(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Tracker(GlobalNamespace__OVRPlugin__Tracker const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Tracker(GlobalNamespace__OVRPlugin__Tracker&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Tracker& operator=(GlobalNamespace__OVRPlugin__Tracker const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Tracker& operator=(GlobalNamespace__OVRPlugin__Tracker&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Tracker(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__Tracker_Unwrapped : int32_t {
__None = -1,
__Zero = 0,
__One = 1,
__Two = 2,
__Three = 3,
__Count = 4,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__Tracker_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__Tracker_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker const None;

/// @brief Field Zero offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker const Zero;

/// @brief Field One offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker const One;

/// @brief Field Two offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker const Two;

/// @brief Field Three offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker const Three;

/// @brief Field Count offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker const Count;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Node
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8607))
// CS Name: OVRPlugin::Node
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Node : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Node(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Node(GlobalNamespace__OVRPlugin__Node const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Node(GlobalNamespace__OVRPlugin__Node&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Node& operator=(GlobalNamespace__OVRPlugin__Node const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Node& operator=(GlobalNamespace__OVRPlugin__Node&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Node(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__Node_Unwrapped : int32_t {
__None = -1,
__EyeLeft = 0,
__EyeRight = 1,
__EyeCenter = 2,
__HandLeft = 3,
__HandRight = 4,
__TrackerZero = 5,
__TrackerOne = 6,
__TrackerTwo = 7,
__TrackerThree = 8,
__Head = 9,
__DeviceObjectZero = 10,
__TrackedKeyboard = 11,
__Count = 12,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__Node_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__Node_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Node const None;

/// @brief Field EyeLeft offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Node const EyeLeft;

/// @brief Field EyeRight offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Node const EyeRight;

/// @brief Field EyeCenter offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Node const EyeCenter;

/// @brief Field HandLeft offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Node const HandLeft;

/// @brief Field HandRight offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Node const HandRight;

/// @brief Field TrackerZero offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Node const TrackerZero;

/// @brief Field TrackerOne offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Node const TrackerOne;

/// @brief Field TrackerTwo offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Node const TrackerTwo;

/// @brief Field TrackerThree offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Node const TrackerThree;

/// @brief Field Head offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Node const Head;

/// @brief Field DeviceObjectZero offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Node const DeviceObjectZero;

/// @brief Field TrackedKeyboard offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Node const TrackedKeyboard;

/// @brief Field Count offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Node const Count;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Controller
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8608))
// CS Name: OVRPlugin::Controller
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Controller : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Controller(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Controller(GlobalNamespace__OVRPlugin__Controller const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Controller(GlobalNamespace__OVRPlugin__Controller&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Controller& operator=(GlobalNamespace__OVRPlugin__Controller const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Controller& operator=(GlobalNamespace__OVRPlugin__Controller&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Controller(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__Controller_Unwrapped : int32_t {
__None = 0,
__LTouch = 1,
__RTouch = 2,
__Touch = 3,
__Remote = 4,
__Gamepad = 16,
__LHand = 32,
__RHand = 64,
__Hands = 96,
__Active = -2147483648,
__All = -1,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__Controller_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__Controller_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller const None;

/// @brief Field LTouch offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller const LTouch;

/// @brief Field RTouch offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller const RTouch;

/// @brief Field Touch offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller const Touch;

/// @brief Field Remote offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller const Remote;

/// @brief Field Gamepad offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller const Gamepad;

/// @brief Field LHand offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller const LHand;

/// @brief Field RHand offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller const RHand;

/// @brief Field Hands offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller const Hands;

/// @brief Field Active offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller const Active;

/// @brief Field All offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller const All;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::InteractionProfile
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8609))
// CS Name: OVRPlugin::InteractionProfile
struct CORDL_TYPE GlobalNamespace__OVRPlugin__InteractionProfile : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__InteractionProfile(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__InteractionProfile(GlobalNamespace__OVRPlugin__InteractionProfile const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__InteractionProfile(GlobalNamespace__OVRPlugin__InteractionProfile&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__InteractionProfile& operator=(GlobalNamespace__OVRPlugin__InteractionProfile const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__InteractionProfile& operator=(GlobalNamespace__OVRPlugin__InteractionProfile&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__InteractionProfile(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__InteractionProfile_Unwrapped : int32_t {
__None = 0,
__Touch = 1,
__TouchPro = 2,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__InteractionProfile_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__InteractionProfile_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile const None;

/// @brief Field Touch offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile const Touch;

/// @brief Field TouchPro offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile const TouchPro;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Handedness
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8610))
// CS Name: OVRPlugin::Handedness
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Handedness : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Handedness(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Handedness(GlobalNamespace__OVRPlugin__Handedness const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Handedness(GlobalNamespace__OVRPlugin__Handedness&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Handedness& operator=(GlobalNamespace__OVRPlugin__Handedness const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Handedness& operator=(GlobalNamespace__OVRPlugin__Handedness&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Handedness(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__Handedness_Unwrapped : int32_t {
__Unsupported = 0,
__LeftHanded = 1,
__RightHanded = 2,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__Handedness_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__Handedness_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Unsupported offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness const Unsupported;

/// @brief Field LeftHanded offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness const LeftHanded;

/// @brief Field RightHanded offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness const RightHanded;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::TrackingOrigin
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8611))
// CS Name: OVRPlugin::TrackingOrigin
struct CORDL_TYPE GlobalNamespace__OVRPlugin__TrackingOrigin : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__TrackingOrigin(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__TrackingOrigin(GlobalNamespace__OVRPlugin__TrackingOrigin const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__TrackingOrigin(GlobalNamespace__OVRPlugin__TrackingOrigin&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__TrackingOrigin& operator=(GlobalNamespace__OVRPlugin__TrackingOrigin const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__TrackingOrigin& operator=(GlobalNamespace__OVRPlugin__TrackingOrigin&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__TrackingOrigin(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__TrackingOrigin_Unwrapped : int32_t {
__EyeLevel = 0,
__FloorLevel = 1,
__Stage = 2,
__View = 4,
__Count = 5,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__TrackingOrigin_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__TrackingOrigin_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field EyeLevel offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin const EyeLevel;

/// @brief Field FloorLevel offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin const FloorLevel;

/// @brief Field Stage offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin const Stage;

/// @brief Field View offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin const View;

/// @brief Field Count offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin const Count;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::RecenterFlags
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8612))
// CS Name: OVRPlugin::RecenterFlags
struct CORDL_TYPE GlobalNamespace__OVRPlugin__RecenterFlags : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__RecenterFlags(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__RecenterFlags(GlobalNamespace__OVRPlugin__RecenterFlags const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__RecenterFlags(GlobalNamespace__OVRPlugin__RecenterFlags&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__RecenterFlags& operator=(GlobalNamespace__OVRPlugin__RecenterFlags const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__RecenterFlags& operator=(GlobalNamespace__OVRPlugin__RecenterFlags&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__RecenterFlags(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__RecenterFlags_Unwrapped : int32_t {
__Default = 0,
__IgnoreAll = -2147483648,
__Count = -2147483647,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__RecenterFlags_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__RecenterFlags_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Default offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags const Default;

/// @brief Field IgnoreAll offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags const IgnoreAll;

/// @brief Field Count offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags const Count;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::BatteryStatus
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8613))
// CS Name: OVRPlugin::BatteryStatus
struct CORDL_TYPE GlobalNamespace__OVRPlugin__BatteryStatus : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__BatteryStatus(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__BatteryStatus(GlobalNamespace__OVRPlugin__BatteryStatus const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BatteryStatus(GlobalNamespace__OVRPlugin__BatteryStatus&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BatteryStatus& operator=(GlobalNamespace__OVRPlugin__BatteryStatus const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__BatteryStatus& operator=(GlobalNamespace__OVRPlugin__BatteryStatus&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__BatteryStatus(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__BatteryStatus_Unwrapped : int32_t {
__Charging = 0,
__Discharging = 1,
__Full = 2,
__NotCharging = 3,
__Unknown = 4,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__BatteryStatus_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__BatteryStatus_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Charging offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus const Charging;

/// @brief Field Discharging offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus const Discharging;

/// @brief Field Full offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus const Full;

/// @brief Field NotCharging offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus const NotCharging;

/// @brief Field Unknown offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus const Unknown;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::EyeTextureFormat
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8614))
// CS Name: OVRPlugin::EyeTextureFormat
struct CORDL_TYPE GlobalNamespace__OVRPlugin__EyeTextureFormat : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__EyeTextureFormat(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__EyeTextureFormat(GlobalNamespace__OVRPlugin__EyeTextureFormat const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__EyeTextureFormat(GlobalNamespace__OVRPlugin__EyeTextureFormat&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__EyeTextureFormat& operator=(GlobalNamespace__OVRPlugin__EyeTextureFormat const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__EyeTextureFormat& operator=(GlobalNamespace__OVRPlugin__EyeTextureFormat&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__EyeTextureFormat(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__EyeTextureFormat_Unwrapped : int32_t {
__Default = 0,
__R8G8B8A8_sRGB = 0,
__R8G8B8A8 = 1,
__R16G16B16A16_FP = 2,
__R11G11B10_FP = 3,
__B8G8R8A8_sRGB = 4,
__B8G8R8A8 = 5,
__R5G6B5 = 11,
__EnumSize = 2147483647,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__EyeTextureFormat_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__EyeTextureFormat_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Default offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat const Default;

/// @brief Field R8G8B8A8_sRGB offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat const R8G8B8A8_sRGB;

/// @brief Field R8G8B8A8 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat const R8G8B8A8;

/// @brief Field R16G16B16A16_FP offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat const R16G16B16A16_FP;

/// @brief Field R11G11B10_FP offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat const R11G11B10_FP;

/// @brief Field B8G8R8A8_sRGB offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat const B8G8R8A8_sRGB;

/// @brief Field B8G8R8A8 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat const B8G8R8A8;

/// @brief Field R5G6B5 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat const R5G6B5;

/// @brief Field EnumSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat const EnumSize;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::PlatformUI
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8615))
// CS Name: OVRPlugin::PlatformUI
struct CORDL_TYPE GlobalNamespace__OVRPlugin__PlatformUI : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__PlatformUI(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__PlatformUI(GlobalNamespace__OVRPlugin__PlatformUI const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__PlatformUI(GlobalNamespace__OVRPlugin__PlatformUI&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__PlatformUI& operator=(GlobalNamespace__OVRPlugin__PlatformUI const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__PlatformUI& operator=(GlobalNamespace__OVRPlugin__PlatformUI&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__PlatformUI(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__PlatformUI_Unwrapped : int32_t {
__None = -1,
__ConfirmQuit = 1,
__GlobalMenuTutorial = 2,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__PlatformUI_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__PlatformUI_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI const None;

/// @brief Field ConfirmQuit offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI const ConfirmQuit;

/// @brief Field GlobalMenuTutorial offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI const GlobalMenuTutorial;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SystemRegion
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8616))
// CS Name: OVRPlugin::SystemRegion
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SystemRegion : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SystemRegion(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SystemRegion(GlobalNamespace__OVRPlugin__SystemRegion const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SystemRegion(GlobalNamespace__OVRPlugin__SystemRegion&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SystemRegion& operator=(GlobalNamespace__OVRPlugin__SystemRegion const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SystemRegion& operator=(GlobalNamespace__OVRPlugin__SystemRegion&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SystemRegion(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__SystemRegion_Unwrapped : int32_t {
__Unspecified = 0,
__Japan = 1,
__China = 2,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__SystemRegion_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__SystemRegion_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Unspecified offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion const Unspecified;

/// @brief Field Japan offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion const Japan;

/// @brief Field China offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion const China;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SystemHeadset
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8617))
// CS Name: OVRPlugin::SystemHeadset
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SystemHeadset : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SystemHeadset(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SystemHeadset(GlobalNamespace__OVRPlugin__SystemHeadset const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SystemHeadset(GlobalNamespace__OVRPlugin__SystemHeadset&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SystemHeadset& operator=(GlobalNamespace__OVRPlugin__SystemHeadset const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SystemHeadset& operator=(GlobalNamespace__OVRPlugin__SystemHeadset&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SystemHeadset(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__SystemHeadset_Unwrapped : int32_t {
__None = 0,
__Oculus_Quest = 8,
__Oculus_Quest_2 = 9,
__Meta_Quest_Pro = 10,
__Placeholder_11 = 11,
__Placeholder_12 = 12,
__Placeholder_13 = 13,
__Placeholder_14 = 14,
__Rift_DK1 = 4096,
__Rift_DK2 = 4097,
__Rift_CV1 = 4098,
__Rift_CB = 4099,
__Rift_S = 4100,
__Oculus_Link_Quest = 4101,
__Oculus_Link_Quest_2 = 4102,
__Meta_Link_Quest_Pro = 4103,
__PC_Placeholder_4104 = 4104,
__PC_Placeholder_4105 = 4105,
__PC_Placeholder_4106 = 4106,
__PC_Placeholder_4107 = 4107,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__SystemHeadset_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__SystemHeadset_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const None;

/// @brief Field Oculus_Quest offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Oculus_Quest;

/// @brief Field Oculus_Quest_2 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Oculus_Quest_2;

/// @brief Field Meta_Quest_Pro offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Meta_Quest_Pro;

/// @brief Field Placeholder_11 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Placeholder_11;

/// @brief Field Placeholder_12 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Placeholder_12;

/// @brief Field Placeholder_13 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Placeholder_13;

/// @brief Field Placeholder_14 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Placeholder_14;

/// @brief Field Rift_DK1 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Rift_DK1;

/// @brief Field Rift_DK2 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Rift_DK2;

/// @brief Field Rift_CV1 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Rift_CV1;

/// @brief Field Rift_CB offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Rift_CB;

/// @brief Field Rift_S offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Rift_S;

/// @brief Field Oculus_Link_Quest offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Oculus_Link_Quest;

/// @brief Field Oculus_Link_Quest_2 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Oculus_Link_Quest_2;

/// @brief Field Meta_Link_Quest_Pro offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const Meta_Link_Quest_Pro;

/// @brief Field PC_Placeholder_4104 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const PC_Placeholder_4104;

/// @brief Field PC_Placeholder_4105 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const PC_Placeholder_4105;

/// @brief Field PC_Placeholder_4106 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const PC_Placeholder_4106;

/// @brief Field PC_Placeholder_4107 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset const PC_Placeholder_4107;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OverlayShape
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8618))
// CS Name: OVRPlugin::OverlayShape
struct CORDL_TYPE GlobalNamespace__OVRPlugin__OverlayShape : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OverlayShape(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__OverlayShape(GlobalNamespace__OVRPlugin__OverlayShape const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__OverlayShape(GlobalNamespace__OVRPlugin__OverlayShape&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__OverlayShape& operator=(GlobalNamespace__OVRPlugin__OverlayShape const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__OverlayShape& operator=(GlobalNamespace__OVRPlugin__OverlayShape&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OverlayShape(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__OverlayShape_Unwrapped : int32_t {
__Quad = 0,
__Cylinder = 1,
__Cubemap = 2,
__OffcenterCubemap = 4,
__Equirect = 5,
__ReconstructionPassthrough = 7,
__SurfaceProjectedPassthrough = 8,
__Fisheye = 9,
__KeyboardHandsPassthrough = 10,
__KeyboardMaskedHandsPassthrough = 11,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__OverlayShape_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__OverlayShape_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Quad offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape const Quad;

/// @brief Field Cylinder offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape const Cylinder;

/// @brief Field Cubemap offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape const Cubemap;

/// @brief Field OffcenterCubemap offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape const OffcenterCubemap;

/// @brief Field Equirect offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape const Equirect;

/// @brief Field ReconstructionPassthrough offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape const ReconstructionPassthrough;

/// @brief Field SurfaceProjectedPassthrough offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape const SurfaceProjectedPassthrough;

/// @brief Field Fisheye offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape const Fisheye;

/// @brief Field KeyboardHandsPassthrough offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape const KeyboardHandsPassthrough;

/// @brief Field KeyboardMaskedHandsPassthrough offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape const KeyboardMaskedHandsPassthrough;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Step
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8619))
// CS Name: OVRPlugin::Step
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Step : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Step(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Step(GlobalNamespace__OVRPlugin__Step const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Step(GlobalNamespace__OVRPlugin__Step&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Step& operator=(GlobalNamespace__OVRPlugin__Step const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Step& operator=(GlobalNamespace__OVRPlugin__Step&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Step(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__Step_Unwrapped : int32_t {
__Render = -1,
__Physics = 0,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__Step_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__Step_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Render offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Step const Render;

/// @brief Field Physics offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Step const Physics;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::CameraDevice
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8620))
// CS Name: OVRPlugin::CameraDevice
struct CORDL_TYPE GlobalNamespace__OVRPlugin__CameraDevice : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__CameraDevice(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__CameraDevice(GlobalNamespace__OVRPlugin__CameraDevice const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraDevice(GlobalNamespace__OVRPlugin__CameraDevice&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraDevice& operator=(GlobalNamespace__OVRPlugin__CameraDevice const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__CameraDevice& operator=(GlobalNamespace__OVRPlugin__CameraDevice&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__CameraDevice(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__CameraDevice_Unwrapped : int32_t {
__None = 0,
__WebCamera0 = 100,
__WebCamera1 = 101,
__ZEDCamera = 300,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__CameraDevice_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__CameraDevice_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice const None;

/// @brief Field WebCamera0 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice const WebCamera0;

/// @brief Field WebCamera1 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice const WebCamera1;

/// @brief Field ZEDCamera offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice const ZEDCamera;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::CameraDeviceDepthSensingMode
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8621))
// CS Name: OVRPlugin::CameraDeviceDepthSensingMode
struct CORDL_TYPE GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode(GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode(GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode& operator=(GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode& operator=(GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode_Unwrapped : int32_t {
__Standard = 0,
__Fill = 1,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Standard offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode const Standard;

/// @brief Field Fill offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode const Fill;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::CameraDeviceDepthQuality
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8622))
// CS Name: OVRPlugin::CameraDeviceDepthQuality
struct CORDL_TYPE GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality(GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality(GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality& operator=(GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality& operator=(GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality_Unwrapped : int32_t {
__Low = 0,
__Medium = 1,
__High = 2,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Low offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality const Low;

/// @brief Field Medium offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality const Medium;

/// @brief Field High offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality const High;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::FoveatedRenderingLevel
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8623))
// CS Name: OVRPlugin::FoveatedRenderingLevel
struct CORDL_TYPE GlobalNamespace__OVRPlugin__FoveatedRenderingLevel : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__FoveatedRenderingLevel(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__FoveatedRenderingLevel(GlobalNamespace__OVRPlugin__FoveatedRenderingLevel const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FoveatedRenderingLevel(GlobalNamespace__OVRPlugin__FoveatedRenderingLevel&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FoveatedRenderingLevel& operator=(GlobalNamespace__OVRPlugin__FoveatedRenderingLevel const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__FoveatedRenderingLevel& operator=(GlobalNamespace__OVRPlugin__FoveatedRenderingLevel&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__FoveatedRenderingLevel(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__FoveatedRenderingLevel_Unwrapped : int32_t {
__Off = 0,
__Low = 1,
__Medium = 2,
__High = 3,
__HighTop = 4,
__EnumSize = 2147483647,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__FoveatedRenderingLevel_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__FoveatedRenderingLevel_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Off offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel const Off;

/// @brief Field Low offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel const Low;

/// @brief Field Medium offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel const Medium;

/// @brief Field High offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel const High;

/// @brief Field HighTop offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel const HighTop;

/// @brief Field EnumSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel const EnumSize;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::FixedFoveatedRenderingLevel
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8624))
// CS Name: OVRPlugin::FixedFoveatedRenderingLevel
struct CORDL_TYPE GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel(GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel(GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel& operator=(GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel& operator=(GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel_Unwrapped : int32_t {
__Off = 0,
__Low = 1,
__Medium = 2,
__High = 3,
__HighTop = 4,
__EnumSize = 2147483647,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Off offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel const Off;

/// @brief Field Low offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel const Low;

/// @brief Field Medium offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel const Medium;

/// @brief Field High offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel const High;

/// @brief Field HighTop offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel const HighTop;

/// @brief Field EnumSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel const EnumSize;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::TiledMultiResLevel
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8625))
// CS Name: OVRPlugin::TiledMultiResLevel
struct CORDL_TYPE GlobalNamespace__OVRPlugin__TiledMultiResLevel : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__TiledMultiResLevel(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__TiledMultiResLevel(GlobalNamespace__OVRPlugin__TiledMultiResLevel const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__TiledMultiResLevel(GlobalNamespace__OVRPlugin__TiledMultiResLevel&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__TiledMultiResLevel& operator=(GlobalNamespace__OVRPlugin__TiledMultiResLevel const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__TiledMultiResLevel& operator=(GlobalNamespace__OVRPlugin__TiledMultiResLevel&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__TiledMultiResLevel(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__TiledMultiResLevel_Unwrapped : int32_t {
__Off = 0,
__LMSLow = 1,
__LMSMedium = 2,
__LMSHigh = 3,
__LMSHighTop = 4,
__EnumSize = 2147483647,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__TiledMultiResLevel_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__TiledMultiResLevel_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Off offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel const Off;

/// @brief Field LMSLow offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel const LMSLow;

/// @brief Field LMSMedium offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel const LMSMedium;

/// @brief Field LMSHigh offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel const LMSHigh;

/// @brief Field LMSHighTop offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel const LMSHighTop;

/// @brief Field EnumSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel const EnumSize;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::PerfMetrics
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8626))
// CS Name: OVRPlugin::PerfMetrics
struct CORDL_TYPE GlobalNamespace__OVRPlugin__PerfMetrics : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__PerfMetrics(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__PerfMetrics(GlobalNamespace__OVRPlugin__PerfMetrics const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__PerfMetrics(GlobalNamespace__OVRPlugin__PerfMetrics&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__PerfMetrics& operator=(GlobalNamespace__OVRPlugin__PerfMetrics const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__PerfMetrics& operator=(GlobalNamespace__OVRPlugin__PerfMetrics&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__PerfMetrics(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__PerfMetrics_Unwrapped : int32_t {
__App_CpuTime_Float = 0,
__App_GpuTime_Float = 1,
__Compositor_CpuTime_Float = 3,
__Compositor_GpuTime_Float = 4,
__Compositor_DroppedFrameCount_Int = 5,
__System_GpuUtilPercentage_Float = 7,
__System_CpuUtilAveragePercentage_Float = 8,
__System_CpuUtilWorstPercentage_Float = 9,
__Device_CpuClockFrequencyInMHz_Float = 10,
__Device_GpuClockFrequencyInMHz_Float = 11,
__Device_CpuClockLevel_Int = 12,
__Device_GpuClockLevel_Int = 13,
__Compositor_SpaceWarp_Mode_Int = 14,
__Device_CpuCore0UtilPercentage_Float = 32,
__Device_CpuCore1UtilPercentage_Float = 33,
__Device_CpuCore2UtilPercentage_Float = 34,
__Device_CpuCore3UtilPercentage_Float = 35,
__Device_CpuCore4UtilPercentage_Float = 36,
__Device_CpuCore5UtilPercentage_Float = 37,
__Device_CpuCore6UtilPercentage_Float = 38,
__Device_CpuCore7UtilPercentage_Float = 39,
__Count = 40,
__EnumSize = 2147483647,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__PerfMetrics_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__PerfMetrics_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field App_CpuTime_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const App_CpuTime_Float;

/// @brief Field App_GpuTime_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const App_GpuTime_Float;

/// @brief Field Compositor_CpuTime_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Compositor_CpuTime_Float;

/// @brief Field Compositor_GpuTime_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Compositor_GpuTime_Float;

/// @brief Field Compositor_DroppedFrameCount_Int offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Compositor_DroppedFrameCount_Int;

/// @brief Field System_GpuUtilPercentage_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const System_GpuUtilPercentage_Float;

/// @brief Field System_CpuUtilAveragePercentage_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const System_CpuUtilAveragePercentage_Float;

/// @brief Field System_CpuUtilWorstPercentage_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const System_CpuUtilWorstPercentage_Float;

/// @brief Field Device_CpuClockFrequencyInMHz_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Device_CpuClockFrequencyInMHz_Float;

/// @brief Field Device_GpuClockFrequencyInMHz_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Device_GpuClockFrequencyInMHz_Float;

/// @brief Field Device_CpuClockLevel_Int offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Device_CpuClockLevel_Int;

/// @brief Field Device_GpuClockLevel_Int offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Device_GpuClockLevel_Int;

/// @brief Field Compositor_SpaceWarp_Mode_Int offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Compositor_SpaceWarp_Mode_Int;

/// @brief Field Device_CpuCore0UtilPercentage_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Device_CpuCore0UtilPercentage_Float;

/// @brief Field Device_CpuCore1UtilPercentage_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Device_CpuCore1UtilPercentage_Float;

/// @brief Field Device_CpuCore2UtilPercentage_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Device_CpuCore2UtilPercentage_Float;

/// @brief Field Device_CpuCore3UtilPercentage_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Device_CpuCore3UtilPercentage_Float;

/// @brief Field Device_CpuCore4UtilPercentage_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Device_CpuCore4UtilPercentage_Float;

/// @brief Field Device_CpuCore5UtilPercentage_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Device_CpuCore5UtilPercentage_Float;

/// @brief Field Device_CpuCore6UtilPercentage_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Device_CpuCore6UtilPercentage_Float;

/// @brief Field Device_CpuCore7UtilPercentage_Float offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Device_CpuCore7UtilPercentage_Float;

/// @brief Field Count offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const Count;

/// @brief Field EnumSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics const EnumSize;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::ProcessorPerformanceLevel
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8627))
// CS Name: OVRPlugin::ProcessorPerformanceLevel
struct CORDL_TYPE GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel(GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel(GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel& operator=(GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel& operator=(GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel_Unwrapped : int32_t {
__PowerSavings = 0,
__SustainedLow = 1,
__SustainedHigh = 2,
__Boost = 3,
__EnumSize = 2147483647,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field PowerSavings offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel const PowerSavings;

/// @brief Field SustainedLow offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel const SustainedLow;

/// @brief Field SustainedHigh offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel const SustainedHigh;

/// @brief Field Boost offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel const Boost;

/// @brief Field EnumSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel const EnumSize;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::FeatureType
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8628))
// CS Name: OVRPlugin::FeatureType
struct CORDL_TYPE GlobalNamespace__OVRPlugin__FeatureType : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__FeatureType(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__FeatureType(GlobalNamespace__OVRPlugin__FeatureType const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FeatureType(GlobalNamespace__OVRPlugin__FeatureType&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FeatureType& operator=(GlobalNamespace__OVRPlugin__FeatureType const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__FeatureType& operator=(GlobalNamespace__OVRPlugin__FeatureType&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__FeatureType(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__FeatureType_Unwrapped : int32_t {
__HandTracking = 0,
__KeyboardTracking = 1,
__EyeTracking = 2,
__FaceTracking = 3,
__BodyTracking = 4,
__Passthrough = 5,
__GazeBasedFoveatedRendering = 6,
__Count = 7,
__EnumSize = 2147483647,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__FeatureType_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__FeatureType_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field HandTracking offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType const HandTracking;

/// @brief Field KeyboardTracking offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType const KeyboardTracking;

/// @brief Field EyeTracking offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType const EyeTracking;

/// @brief Field FaceTracking offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType const FaceTracking;

/// @brief Field BodyTracking offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType const BodyTracking;

/// @brief Field Passthrough offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType const Passthrough;

/// @brief Field GazeBasedFoveatedRendering offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType const GazeBasedFoveatedRendering;

/// @brief Field Count offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType const Count;

/// @brief Field EnumSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType const EnumSize;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::CameraDeviceIntrinsicsParameters
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8629))
// CS Name: OVRPlugin::CameraDeviceIntrinsicsParameters
struct CORDL_TYPE GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "fx", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "fy", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "cx", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "cy", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "disto0", ty: "double_t", modifiers: "", def_value: None }, CppParam { name: "disto1", ty: "double_t", modifiers: "", def_value: None }, CppParam { name: "disto2", ty: "double_t", modifiers: "", def_value: None }, CppParam { name: "disto3", ty: "double_t", modifiers: "", def_value: None }, CppParam { name: "disto4", ty: "double_t", modifiers: "", def_value: None }, CppParam { name: "v_fov", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "h_fov", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "d_fov", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "w", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "h", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters(float_t fx, float_t fy, float_t cx, float_t cy, double_t disto0, double_t disto1, double_t disto2, double_t disto3, double_t disto4, float_t v_fov, float_t h_fov, float_t d_fov, int32_t w, int32_t h) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters(GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters(GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters& operator=(GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters& operator=(GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x50};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 float_t __declspec(property(get=__get_fx, put=__set_fx))  fx;

constexpr void __set_fx(float_t value) ;

constexpr float_t __get_fx() const;

 float_t __declspec(property(get=__get_fy, put=__set_fy))  fy;

constexpr void __set_fy(float_t value) ;

constexpr float_t __get_fy() const;

 float_t __declspec(property(get=__get_cx, put=__set_cx))  cx;

constexpr void __set_cx(float_t value) ;

constexpr float_t __get_cx() const;

 float_t __declspec(property(get=__get_cy, put=__set_cy))  cy;

constexpr void __set_cy(float_t value) ;

constexpr float_t __get_cy() const;

 double_t __declspec(property(get=__get_disto0, put=__set_disto0))  disto0;

constexpr void __set_disto0(double_t value) ;

constexpr double_t __get_disto0() const;

 double_t __declspec(property(get=__get_disto1, put=__set_disto1))  disto1;

constexpr void __set_disto1(double_t value) ;

constexpr double_t __get_disto1() const;

 double_t __declspec(property(get=__get_disto2, put=__set_disto2))  disto2;

constexpr void __set_disto2(double_t value) ;

constexpr double_t __get_disto2() const;

 double_t __declspec(property(get=__get_disto3, put=__set_disto3))  disto3;

constexpr void __set_disto3(double_t value) ;

constexpr double_t __get_disto3() const;

 double_t __declspec(property(get=__get_disto4, put=__set_disto4))  disto4;

constexpr void __set_disto4(double_t value) ;

constexpr double_t __get_disto4() const;

 float_t __declspec(property(get=__get_v_fov, put=__set_v_fov))  v_fov;

constexpr void __set_v_fov(float_t value) ;

constexpr float_t __get_v_fov() const;

 float_t __declspec(property(get=__get_h_fov, put=__set_h_fov))  h_fov;

constexpr void __set_h_fov(float_t value) ;

constexpr float_t __get_h_fov() const;

 float_t __declspec(property(get=__get_d_fov, put=__set_d_fov))  d_fov;

constexpr void __set_d_fov(float_t value) ;

constexpr float_t __get_d_fov() const;

 int32_t __declspec(property(get=__get_w, put=__set_w))  w;

constexpr void __set_w(int32_t value) ;

constexpr int32_t __get_w() const;

 int32_t __declspec(property(get=__get_h, put=__set_h))  h;

constexpr void __set_h(int32_t value) ;

constexpr int32_t __get_h() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OverlayFlag
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8630))
// CS Name: OVRPlugin::OverlayFlag
struct CORDL_TYPE GlobalNamespace__OVRPlugin__OverlayFlag : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OverlayFlag(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__OverlayFlag(GlobalNamespace__OVRPlugin__OverlayFlag const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__OverlayFlag(GlobalNamespace__OVRPlugin__OverlayFlag&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__OverlayFlag& operator=(GlobalNamespace__OVRPlugin__OverlayFlag const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__OverlayFlag& operator=(GlobalNamespace__OVRPlugin__OverlayFlag&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OverlayFlag(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__OverlayFlag_Unwrapped : int32_t {
__None = 0,
__OnTop = 1,
__HeadLocked = 2,
__NoDepth = 4,
__ExpensiveSuperSample = 8,
__EfficientSuperSample = 16,
__EfficientSharpen = 32,
__BicubicFiltering = 64,
__ExpensiveSharpen = 128,
__SecureContent = 256,
__ShapeFlag_Quad = 0,
__ShapeFlag_Cylinder = 16,
__ShapeFlag_Cubemap = 32,
__ShapeFlag_OffcenterCubemap = 64,
__ShapeFlagRangeMask = 240,
__Hidden = 512,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__OverlayFlag_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__OverlayFlag_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const None;

/// @brief Field OnTop offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const OnTop;

/// @brief Field HeadLocked offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const HeadLocked;

/// @brief Field NoDepth offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const NoDepth;

/// @brief Field ExpensiveSuperSample offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const ExpensiveSuperSample;

/// @brief Field EfficientSuperSample offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const EfficientSuperSample;

/// @brief Field EfficientSharpen offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const EfficientSharpen;

/// @brief Field BicubicFiltering offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const BicubicFiltering;

/// @brief Field ExpensiveSharpen offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const ExpensiveSharpen;

/// @brief Field SecureContent offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const SecureContent;

/// @brief Field ShapeFlag_Quad offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const ShapeFlag_Quad;

/// @brief Field ShapeFlag_Cylinder offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const ShapeFlag_Cylinder;

/// @brief Field ShapeFlag_Cubemap offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const ShapeFlag_Cubemap;

/// @brief Field ShapeFlag_OffcenterCubemap offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const ShapeFlag_OffcenterCubemap;

/// @brief Field ShapeFlagRangeMask offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const ShapeFlagRangeMask;

/// @brief Field Hidden offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag const Hidden;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Vector2f
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8631))
// CS Name: OVRPlugin::Vector2f
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Vector2f : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "x", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "y", ty: "float_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Vector2f(float_t x, float_t y) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Vector2f(GlobalNamespace__OVRPlugin__Vector2f const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Vector2f(GlobalNamespace__OVRPlugin__Vector2f&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Vector2f& operator=(GlobalNamespace__OVRPlugin__Vector2f const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Vector2f& operator=(GlobalNamespace__OVRPlugin__Vector2f&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x8};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Vector2f(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 float_t __declspec(property(get=__get_x, put=__set_x))  x;

constexpr void __set_x(float_t value) ;

constexpr float_t __get_x() const;

 float_t __declspec(property(get=__get_y, put=__set_y))  y;

constexpr void __set_y(float_t value) ;

constexpr float_t __get_y() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Vector3f
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8632))
// CS Name: OVRPlugin::Vector3f
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Vector3f : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "x", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "y", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "z", ty: "float_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Vector3f(float_t x, float_t y, float_t z) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Vector3f(GlobalNamespace__OVRPlugin__Vector3f const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Vector3f(GlobalNamespace__OVRPlugin__Vector3f&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Vector3f& operator=(GlobalNamespace__OVRPlugin__Vector3f const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Vector3f& operator=(GlobalNamespace__OVRPlugin__Vector3f&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0xc};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Vector3f(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 float_t __declspec(property(get=__get_x, put=__set_x))  x;

constexpr void __set_x(float_t value) ;

constexpr float_t __get_x() const;

 float_t __declspec(property(get=__get_y, put=__set_y))  y;

constexpr void __set_y(float_t value) ;

constexpr float_t __get_y() const;

 float_t __declspec(property(get=__get_z, put=__set_z))  z;

constexpr void __set_z(float_t value) ;

constexpr float_t __get_z() const;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __declspec(property(get=__get_zero, put=__set_zero))  zero;

static void __set_zero(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __get_zero() ;


// Methods

/// @brief Method ToString addr 0x2620b88 size 0xfc virtual true final false
 ::StringW ToString() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Vector4f
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8633))
// CS Name: OVRPlugin::Vector4f
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Vector4f : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "x", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "y", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "z", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "w", ty: "float_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Vector4f(float_t x, float_t y, float_t z, float_t w) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Vector4f(GlobalNamespace__OVRPlugin__Vector4f const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Vector4f(GlobalNamespace__OVRPlugin__Vector4f&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Vector4f& operator=(GlobalNamespace__OVRPlugin__Vector4f const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Vector4f& operator=(GlobalNamespace__OVRPlugin__Vector4f&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Vector4f(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 float_t __declspec(property(get=__get_x, put=__set_x))  x;

constexpr void __set_x(float_t value) ;

constexpr float_t __get_x() const;

 float_t __declspec(property(get=__get_y, put=__set_y))  y;

constexpr void __set_y(float_t value) ;

constexpr float_t __get_y() const;

 float_t __declspec(property(get=__get_z, put=__set_z))  z;

constexpr void __set_z(float_t value) ;

constexpr float_t __get_z() const;

 float_t __declspec(property(get=__get_w, put=__set_w))  w;

constexpr void __set_w(float_t value) ;

constexpr float_t __get_w() const;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f __declspec(property(get=__get_zero, put=__set_zero))  zero;

static void __set_zero(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f __get_zero() ;


// Methods

/// @brief Method ToString addr 0x2620cd0 size 0x1e4 virtual true final false
 ::StringW ToString() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Vector4s
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8634))
// CS Name: OVRPlugin::Vector4s
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Vector4s : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "x", ty: "int16_t", modifiers: "", def_value: None }, CppParam { name: "y", ty: "int16_t", modifiers: "", def_value: None }, CppParam { name: "z", ty: "int16_t", modifiers: "", def_value: None }, CppParam { name: "w", ty: "int16_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Vector4s(int16_t x, int16_t y, int16_t z, int16_t w) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Vector4s(GlobalNamespace__OVRPlugin__Vector4s const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Vector4s(GlobalNamespace__OVRPlugin__Vector4s&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Vector4s& operator=(GlobalNamespace__OVRPlugin__Vector4s const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Vector4s& operator=(GlobalNamespace__OVRPlugin__Vector4s&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x8};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Vector4s(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 int16_t __declspec(property(get=__get_x, put=__set_x))  x;

constexpr void __set_x(int16_t value) ;

constexpr int16_t __get_x() const;

 int16_t __declspec(property(get=__get_y, put=__set_y))  y;

constexpr void __set_y(int16_t value) ;

constexpr int16_t __get_y() const;

 int16_t __declspec(property(get=__get_z, put=__set_z))  z;

constexpr void __set_z(int16_t value) ;

constexpr int16_t __get_z() const;

 int16_t __declspec(property(get=__get_w, put=__set_w))  w;

constexpr void __set_w(int16_t value) ;

constexpr int16_t __get_w() const;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s __declspec(property(get=__get_zero, put=__set_zero))  zero;

static void __set_zero(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s __get_zero() ;


// Methods

/// @brief Method ToString addr 0x2620efc size 0x1e4 virtual true final false
 ::StringW ToString() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Quatf
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8635))
// CS Name: OVRPlugin::Quatf
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Quatf : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "x", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "y", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "z", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "w", ty: "float_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Quatf(float_t x, float_t y, float_t z, float_t w) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Quatf(GlobalNamespace__OVRPlugin__Quatf const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Quatf(GlobalNamespace__OVRPlugin__Quatf&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Quatf& operator=(GlobalNamespace__OVRPlugin__Quatf const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Quatf& operator=(GlobalNamespace__OVRPlugin__Quatf&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Quatf(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 float_t __declspec(property(get=__get_x, put=__set_x))  x;

constexpr void __set_x(float_t value) ;

constexpr float_t __get_x() const;

 float_t __declspec(property(get=__get_y, put=__set_y))  y;

constexpr void __set_y(float_t value) ;

constexpr float_t __get_y() const;

 float_t __declspec(property(get=__get_z, put=__set_z))  z;

constexpr void __set_z(float_t value) ;

constexpr float_t __get_z() const;

 float_t __declspec(property(get=__get_w, put=__set_w))  w;

constexpr void __set_w(float_t value) ;

constexpr float_t __get_w() const;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_identity, put=__set_identity))  identity;

static void __set_identity(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_identity() ;


// Methods

/// @brief Method ToString addr 0x2621128 size 0x1e4 virtual true final false
 ::StringW ToString() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Posef
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8636))
// CS Name: OVRPlugin::Posef
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Posef : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Orientation", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "Position", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Posef(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf Orientation, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f Position) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Posef(GlobalNamespace__OVRPlugin__Posef const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Posef(GlobalNamespace__OVRPlugin__Posef&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Posef& operator=(GlobalNamespace__OVRPlugin__Posef const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Posef& operator=(GlobalNamespace__OVRPlugin__Posef&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x1c};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Posef(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_Orientation, put=__set_Orientation))  Orientation;

constexpr void __set_Orientation(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_Orientation() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __declspec(property(get=__get_Position, put=__set_Position))  Position;

constexpr void __set_Position(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __get_Position() const;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __declspec(property(get=__get_identity, put=__set_identity))  identity;

static void __set_identity(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __get_identity() ;


// Methods

/// @brief Method ToString addr 0x262135c size 0xf4 virtual true final false
 ::StringW ToString() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::TextureRectMatrixf
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8637))
// CS Name: OVRPlugin::TextureRectMatrixf
struct CORDL_TYPE GlobalNamespace__OVRPlugin__TextureRectMatrixf : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "leftRect", ty: "UnityEngine::Rect", modifiers: "", def_value: None }, CppParam { name: "rightRect", ty: "UnityEngine::Rect", modifiers: "", def_value: None }, CppParam { name: "leftScaleBias", ty: "UnityEngine::Vector4", modifiers: "", def_value: None }, CppParam { name: "rightScaleBias", ty: "UnityEngine::Vector4", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__TextureRectMatrixf(UnityEngine::Rect leftRect, UnityEngine::Rect rightRect, UnityEngine::Vector4 leftScaleBias, UnityEngine::Vector4 rightScaleBias) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__TextureRectMatrixf(GlobalNamespace__OVRPlugin__TextureRectMatrixf const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__TextureRectMatrixf(GlobalNamespace__OVRPlugin__TextureRectMatrixf&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__TextureRectMatrixf& operator=(GlobalNamespace__OVRPlugin__TextureRectMatrixf const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__TextureRectMatrixf& operator=(GlobalNamespace__OVRPlugin__TextureRectMatrixf&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x40};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__TextureRectMatrixf(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 UnityEngine::Rect __declspec(property(get=__get_leftRect, put=__set_leftRect))  leftRect;

constexpr void __set_leftRect(UnityEngine::Rect value) ;

constexpr UnityEngine::Rect __get_leftRect() const;

 UnityEngine::Rect __declspec(property(get=__get_rightRect, put=__set_rightRect))  rightRect;

constexpr void __set_rightRect(UnityEngine::Rect value) ;

constexpr UnityEngine::Rect __get_rightRect() const;

 UnityEngine::Vector4 __declspec(property(get=__get_leftScaleBias, put=__set_leftScaleBias))  leftScaleBias;

constexpr void __set_leftScaleBias(UnityEngine::Vector4 value) ;

constexpr UnityEngine::Vector4 __get_leftScaleBias() const;

 UnityEngine::Vector4 __declspec(property(get=__get_rightScaleBias, put=__set_rightScaleBias))  rightScaleBias;

constexpr void __set_rightScaleBias(UnityEngine::Vector4 value) ;

constexpr UnityEngine::Vector4 __get_rightScaleBias() const;

static GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf __declspec(property(get=__get_zero, put=__set_zero))  zero;

static void __set_zero(GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf __get_zero() ;


// Methods

/// @brief Method ToString addr 0x2621528 size 0x1f8 virtual true final false
 ::StringW ToString() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::PoseStatef
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8638))
// CS Name: OVRPlugin::PoseStatef
struct CORDL_TYPE GlobalNamespace__OVRPlugin__PoseStatef : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Pose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: None }, CppParam { name: "Velocity", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: None }, CppParam { name: "Acceleration", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: None }, CppParam { name: "AngularVelocity", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: None }, CppParam { name: "AngularAcceleration", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: None }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__PoseStatef(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef Pose, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f Velocity, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f Acceleration, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f AngularVelocity, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f AngularAcceleration, double_t Time) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__PoseStatef(GlobalNamespace__OVRPlugin__PoseStatef const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__PoseStatef(GlobalNamespace__OVRPlugin__PoseStatef&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__PoseStatef& operator=(GlobalNamespace__OVRPlugin__PoseStatef const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__PoseStatef& operator=(GlobalNamespace__OVRPlugin__PoseStatef&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x58};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__PoseStatef(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __declspec(property(get=__get_Pose, put=__set_Pose))  Pose;

constexpr void __set_Pose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __get_Pose() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __declspec(property(get=__get_Velocity, put=__set_Velocity))  Velocity;

constexpr void __set_Velocity(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __get_Velocity() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __declspec(property(get=__get_Acceleration, put=__set_Acceleration))  Acceleration;

constexpr void __set_Acceleration(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __get_Acceleration() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __declspec(property(get=__get_AngularVelocity, put=__set_AngularVelocity))  AngularVelocity;

constexpr void __set_AngularVelocity(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __get_AngularVelocity() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __declspec(property(get=__get_AngularAcceleration, put=__set_AngularAcceleration))  AngularAcceleration;

constexpr void __set_AngularAcceleration(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __get_AngularAcceleration() const;

 double_t __declspec(property(get=__get_Time, put=__set_Time))  Time;

constexpr void __set_Time(double_t value) ;

constexpr double_t __get_Time() const;

static GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef __declspec(property(get=__get_identity, put=__set_identity))  identity;

static void __set_identity(GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef __get_identity() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::HapticsLocation
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8639))
// CS Name: OVRPlugin::HapticsLocation
struct CORDL_TYPE GlobalNamespace__OVRPlugin__HapticsLocation : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__HapticsLocation(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__HapticsLocation(GlobalNamespace__OVRPlugin__HapticsLocation const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HapticsLocation(GlobalNamespace__OVRPlugin__HapticsLocation&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HapticsLocation& operator=(GlobalNamespace__OVRPlugin__HapticsLocation const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__HapticsLocation& operator=(GlobalNamespace__OVRPlugin__HapticsLocation&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__HapticsLocation(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__HapticsLocation_Unwrapped : int32_t {
__None = 0,
__Hand = 1,
__Thumb = 2,
__Index = 4,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__HapticsLocation_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__HapticsLocation_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation const None;

/// @brief Field Hand offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation const Hand;

/// @brief Field Thumb offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation const Thumb;

/// @brief Field Index offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation const Index;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::ControllerState5
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8640))
// CS Name: OVRPlugin::ControllerState5
struct CORDL_TYPE GlobalNamespace__OVRPlugin__ControllerState5 : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "ConnectedControllers", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Buttons", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Touches", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "NearTouches", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "LIndexTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "RIndexTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "LHandTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "RHandTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "LThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }, CppParam { name: "RThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }, CppParam { name: "LTouchpad", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }, CppParam { name: "RTouchpad", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }, CppParam { name: "LBatteryPercentRemaining", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "RBatteryPercentRemaining", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "LRecenterCount", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "RRecenterCount", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "LThumbRestForce", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "RThumbRestForce", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "LStylusForce", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "RStylusForce", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "LIndexTriggerCurl", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "RIndexTriggerCurl", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "LIndexTriggerSlide", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "RIndexTriggerSlide", ty: "float_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__ControllerState5(uint32_t ConnectedControllers, uint32_t Buttons, uint32_t Touches, uint32_t NearTouches, float_t LIndexTrigger, float_t RIndexTrigger, float_t LHandTrigger, float_t RHandTrigger, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f LThumbstick, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f RThumbstick, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f LTouchpad, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f RTouchpad, uint8_t LBatteryPercentRemaining, uint8_t RBatteryPercentRemaining, uint8_t LRecenterCount, uint8_t RRecenterCount, float_t LThumbRestForce, float_t RThumbRestForce, float_t LStylusForce, float_t RStylusForce, float_t LIndexTriggerCurl, float_t RIndexTriggerCurl, float_t LIndexTriggerSlide, float_t RIndexTriggerSlide) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__ControllerState5(GlobalNamespace__OVRPlugin__ControllerState5 const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__ControllerState5(GlobalNamespace__OVRPlugin__ControllerState5&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__ControllerState5& operator=(GlobalNamespace__OVRPlugin__ControllerState5 const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__ControllerState5& operator=(GlobalNamespace__OVRPlugin__ControllerState5&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x64};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__ControllerState5(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 uint32_t __declspec(property(get=__get_ConnectedControllers, put=__set_ConnectedControllers))  ConnectedControllers;

constexpr void __set_ConnectedControllers(uint32_t value) ;

constexpr uint32_t __get_ConnectedControllers() const;

 uint32_t __declspec(property(get=__get_Buttons, put=__set_Buttons))  Buttons;

constexpr void __set_Buttons(uint32_t value) ;

constexpr uint32_t __get_Buttons() const;

 uint32_t __declspec(property(get=__get_Touches, put=__set_Touches))  Touches;

constexpr void __set_Touches(uint32_t value) ;

constexpr uint32_t __get_Touches() const;

 uint32_t __declspec(property(get=__get_NearTouches, put=__set_NearTouches))  NearTouches;

constexpr void __set_NearTouches(uint32_t value) ;

constexpr uint32_t __get_NearTouches() const;

 float_t __declspec(property(get=__get_LIndexTrigger, put=__set_LIndexTrigger))  LIndexTrigger;

constexpr void __set_LIndexTrigger(float_t value) ;

constexpr float_t __get_LIndexTrigger() const;

 float_t __declspec(property(get=__get_RIndexTrigger, put=__set_RIndexTrigger))  RIndexTrigger;

constexpr void __set_RIndexTrigger(float_t value) ;

constexpr float_t __get_RIndexTrigger() const;

 float_t __declspec(property(get=__get_LHandTrigger, put=__set_LHandTrigger))  LHandTrigger;

constexpr void __set_LHandTrigger(float_t value) ;

constexpr float_t __get_LHandTrigger() const;

 float_t __declspec(property(get=__get_RHandTrigger, put=__set_RHandTrigger))  RHandTrigger;

constexpr void __set_RHandTrigger(float_t value) ;

constexpr float_t __get_RHandTrigger() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_LThumbstick, put=__set_LThumbstick))  LThumbstick;

constexpr void __set_LThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_LThumbstick() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_RThumbstick, put=__set_RThumbstick))  RThumbstick;

constexpr void __set_RThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_RThumbstick() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_LTouchpad, put=__set_LTouchpad))  LTouchpad;

constexpr void __set_LTouchpad(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_LTouchpad() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_RTouchpad, put=__set_RTouchpad))  RTouchpad;

constexpr void __set_RTouchpad(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_RTouchpad() const;

 uint8_t __declspec(property(get=__get_LBatteryPercentRemaining, put=__set_LBatteryPercentRemaining))  LBatteryPercentRemaining;

constexpr void __set_LBatteryPercentRemaining(uint8_t value) ;

constexpr uint8_t __get_LBatteryPercentRemaining() const;

 uint8_t __declspec(property(get=__get_RBatteryPercentRemaining, put=__set_RBatteryPercentRemaining))  RBatteryPercentRemaining;

constexpr void __set_RBatteryPercentRemaining(uint8_t value) ;

constexpr uint8_t __get_RBatteryPercentRemaining() const;

 uint8_t __declspec(property(get=__get_LRecenterCount, put=__set_LRecenterCount))  LRecenterCount;

constexpr void __set_LRecenterCount(uint8_t value) ;

constexpr uint8_t __get_LRecenterCount() const;

 uint8_t __declspec(property(get=__get_RRecenterCount, put=__set_RRecenterCount))  RRecenterCount;

constexpr void __set_RRecenterCount(uint8_t value) ;

constexpr uint8_t __get_RRecenterCount() const;

 float_t __declspec(property(get=__get_LThumbRestForce, put=__set_LThumbRestForce))  LThumbRestForce;

constexpr void __set_LThumbRestForce(float_t value) ;

constexpr float_t __get_LThumbRestForce() const;

 float_t __declspec(property(get=__get_RThumbRestForce, put=__set_RThumbRestForce))  RThumbRestForce;

constexpr void __set_RThumbRestForce(float_t value) ;

constexpr float_t __get_RThumbRestForce() const;

 float_t __declspec(property(get=__get_LStylusForce, put=__set_LStylusForce))  LStylusForce;

constexpr void __set_LStylusForce(float_t value) ;

constexpr float_t __get_LStylusForce() const;

 float_t __declspec(property(get=__get_RStylusForce, put=__set_RStylusForce))  RStylusForce;

constexpr void __set_RStylusForce(float_t value) ;

constexpr float_t __get_RStylusForce() const;

 float_t __declspec(property(get=__get_LIndexTriggerCurl, put=__set_LIndexTriggerCurl))  LIndexTriggerCurl;

constexpr void __set_LIndexTriggerCurl(float_t value) ;

constexpr float_t __get_LIndexTriggerCurl() const;

 float_t __declspec(property(get=__get_RIndexTriggerCurl, put=__set_RIndexTriggerCurl))  RIndexTriggerCurl;

constexpr void __set_RIndexTriggerCurl(float_t value) ;

constexpr float_t __get_RIndexTriggerCurl() const;

 float_t __declspec(property(get=__get_LIndexTriggerSlide, put=__set_LIndexTriggerSlide))  LIndexTriggerSlide;

constexpr void __set_LIndexTriggerSlide(float_t value) ;

constexpr float_t __get_LIndexTriggerSlide() const;

 float_t __declspec(property(get=__get_RIndexTriggerSlide, put=__set_RIndexTriggerSlide))  RIndexTriggerSlide;

constexpr void __set_RIndexTriggerSlide(float_t value) ;

constexpr float_t __get_RIndexTriggerSlide() const;


// Methods

/// @brief Method .ctor addr 0x26218f8 size 0x90 virtual false final false
 void _ctor(GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4 cs) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::ControllerState4
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8641))
// CS Name: OVRPlugin::ControllerState4
struct CORDL_TYPE GlobalNamespace__OVRPlugin__ControllerState4 : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "ConnectedControllers", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Buttons", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Touches", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "NearTouches", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "LIndexTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "RIndexTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "LHandTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "RHandTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "LThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }, CppParam { name: "RThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }, CppParam { name: "LTouchpad", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }, CppParam { name: "RTouchpad", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }, CppParam { name: "LBatteryPercentRemaining", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "RBatteryPercentRemaining", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "LRecenterCount", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "RRecenterCount", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_27", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_26", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_25", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_24", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_23", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_22", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_21", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_20", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_19", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_18", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_17", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_16", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_15", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_14", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_13", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_12", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_11", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_10", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_09", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_08", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_07", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_06", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_05", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_04", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_03", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_02", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_01", ty: "uint8_t", modifiers: "", def_value: None }, CppParam { name: "Reserved_00", ty: "uint8_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__ControllerState4(uint32_t ConnectedControllers, uint32_t Buttons, uint32_t Touches, uint32_t NearTouches, float_t LIndexTrigger, float_t RIndexTrigger, float_t LHandTrigger, float_t RHandTrigger, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f LThumbstick, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f RThumbstick, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f LTouchpad, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f RTouchpad, uint8_t LBatteryPercentRemaining, uint8_t RBatteryPercentRemaining, uint8_t LRecenterCount, uint8_t RRecenterCount, uint8_t Reserved_27, uint8_t Reserved_26, uint8_t Reserved_25, uint8_t Reserved_24, uint8_t Reserved_23, uint8_t Reserved_22, uint8_t Reserved_21, uint8_t Reserved_20, uint8_t Reserved_19, uint8_t Reserved_18, uint8_t Reserved_17, uint8_t Reserved_16, uint8_t Reserved_15, uint8_t Reserved_14, uint8_t Reserved_13, uint8_t Reserved_12, uint8_t Reserved_11, uint8_t Reserved_10, uint8_t Reserved_09, uint8_t Reserved_08, uint8_t Reserved_07, uint8_t Reserved_06, uint8_t Reserved_05, uint8_t Reserved_04, uint8_t Reserved_03, uint8_t Reserved_02, uint8_t Reserved_01, uint8_t Reserved_00) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__ControllerState4(GlobalNamespace__OVRPlugin__ControllerState4 const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__ControllerState4(GlobalNamespace__OVRPlugin__ControllerState4&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__ControllerState4& operator=(GlobalNamespace__OVRPlugin__ControllerState4 const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__ControllerState4& operator=(GlobalNamespace__OVRPlugin__ControllerState4&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x60};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__ControllerState4(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 uint32_t __declspec(property(get=__get_ConnectedControllers, put=__set_ConnectedControllers))  ConnectedControllers;

constexpr void __set_ConnectedControllers(uint32_t value) ;

constexpr uint32_t __get_ConnectedControllers() const;

 uint32_t __declspec(property(get=__get_Buttons, put=__set_Buttons))  Buttons;

constexpr void __set_Buttons(uint32_t value) ;

constexpr uint32_t __get_Buttons() const;

 uint32_t __declspec(property(get=__get_Touches, put=__set_Touches))  Touches;

constexpr void __set_Touches(uint32_t value) ;

constexpr uint32_t __get_Touches() const;

 uint32_t __declspec(property(get=__get_NearTouches, put=__set_NearTouches))  NearTouches;

constexpr void __set_NearTouches(uint32_t value) ;

constexpr uint32_t __get_NearTouches() const;

 float_t __declspec(property(get=__get_LIndexTrigger, put=__set_LIndexTrigger))  LIndexTrigger;

constexpr void __set_LIndexTrigger(float_t value) ;

constexpr float_t __get_LIndexTrigger() const;

 float_t __declspec(property(get=__get_RIndexTrigger, put=__set_RIndexTrigger))  RIndexTrigger;

constexpr void __set_RIndexTrigger(float_t value) ;

constexpr float_t __get_RIndexTrigger() const;

 float_t __declspec(property(get=__get_LHandTrigger, put=__set_LHandTrigger))  LHandTrigger;

constexpr void __set_LHandTrigger(float_t value) ;

constexpr float_t __get_LHandTrigger() const;

 float_t __declspec(property(get=__get_RHandTrigger, put=__set_RHandTrigger))  RHandTrigger;

constexpr void __set_RHandTrigger(float_t value) ;

constexpr float_t __get_RHandTrigger() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_LThumbstick, put=__set_LThumbstick))  LThumbstick;

constexpr void __set_LThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_LThumbstick() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_RThumbstick, put=__set_RThumbstick))  RThumbstick;

constexpr void __set_RThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_RThumbstick() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_LTouchpad, put=__set_LTouchpad))  LTouchpad;

constexpr void __set_LTouchpad(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_LTouchpad() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_RTouchpad, put=__set_RTouchpad))  RTouchpad;

constexpr void __set_RTouchpad(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_RTouchpad() const;

 uint8_t __declspec(property(get=__get_LBatteryPercentRemaining, put=__set_LBatteryPercentRemaining))  LBatteryPercentRemaining;

constexpr void __set_LBatteryPercentRemaining(uint8_t value) ;

constexpr uint8_t __get_LBatteryPercentRemaining() const;

 uint8_t __declspec(property(get=__get_RBatteryPercentRemaining, put=__set_RBatteryPercentRemaining))  RBatteryPercentRemaining;

constexpr void __set_RBatteryPercentRemaining(uint8_t value) ;

constexpr uint8_t __get_RBatteryPercentRemaining() const;

 uint8_t __declspec(property(get=__get_LRecenterCount, put=__set_LRecenterCount))  LRecenterCount;

constexpr void __set_LRecenterCount(uint8_t value) ;

constexpr uint8_t __get_LRecenterCount() const;

 uint8_t __declspec(property(get=__get_RRecenterCount, put=__set_RRecenterCount))  RRecenterCount;

constexpr void __set_RRecenterCount(uint8_t value) ;

constexpr uint8_t __get_RRecenterCount() const;

 uint8_t __declspec(property(get=__get_Reserved_27, put=__set_Reserved_27))  Reserved_27;

constexpr void __set_Reserved_27(uint8_t value) ;

constexpr uint8_t __get_Reserved_27() const;

 uint8_t __declspec(property(get=__get_Reserved_26, put=__set_Reserved_26))  Reserved_26;

constexpr void __set_Reserved_26(uint8_t value) ;

constexpr uint8_t __get_Reserved_26() const;

 uint8_t __declspec(property(get=__get_Reserved_25, put=__set_Reserved_25))  Reserved_25;

constexpr void __set_Reserved_25(uint8_t value) ;

constexpr uint8_t __get_Reserved_25() const;

 uint8_t __declspec(property(get=__get_Reserved_24, put=__set_Reserved_24))  Reserved_24;

constexpr void __set_Reserved_24(uint8_t value) ;

constexpr uint8_t __get_Reserved_24() const;

 uint8_t __declspec(property(get=__get_Reserved_23, put=__set_Reserved_23))  Reserved_23;

constexpr void __set_Reserved_23(uint8_t value) ;

constexpr uint8_t __get_Reserved_23() const;

 uint8_t __declspec(property(get=__get_Reserved_22, put=__set_Reserved_22))  Reserved_22;

constexpr void __set_Reserved_22(uint8_t value) ;

constexpr uint8_t __get_Reserved_22() const;

 uint8_t __declspec(property(get=__get_Reserved_21, put=__set_Reserved_21))  Reserved_21;

constexpr void __set_Reserved_21(uint8_t value) ;

constexpr uint8_t __get_Reserved_21() const;

 uint8_t __declspec(property(get=__get_Reserved_20, put=__set_Reserved_20))  Reserved_20;

constexpr void __set_Reserved_20(uint8_t value) ;

constexpr uint8_t __get_Reserved_20() const;

 uint8_t __declspec(property(get=__get_Reserved_19, put=__set_Reserved_19))  Reserved_19;

constexpr void __set_Reserved_19(uint8_t value) ;

constexpr uint8_t __get_Reserved_19() const;

 uint8_t __declspec(property(get=__get_Reserved_18, put=__set_Reserved_18))  Reserved_18;

constexpr void __set_Reserved_18(uint8_t value) ;

constexpr uint8_t __get_Reserved_18() const;

 uint8_t __declspec(property(get=__get_Reserved_17, put=__set_Reserved_17))  Reserved_17;

constexpr void __set_Reserved_17(uint8_t value) ;

constexpr uint8_t __get_Reserved_17() const;

 uint8_t __declspec(property(get=__get_Reserved_16, put=__set_Reserved_16))  Reserved_16;

constexpr void __set_Reserved_16(uint8_t value) ;

constexpr uint8_t __get_Reserved_16() const;

 uint8_t __declspec(property(get=__get_Reserved_15, put=__set_Reserved_15))  Reserved_15;

constexpr void __set_Reserved_15(uint8_t value) ;

constexpr uint8_t __get_Reserved_15() const;

 uint8_t __declspec(property(get=__get_Reserved_14, put=__set_Reserved_14))  Reserved_14;

constexpr void __set_Reserved_14(uint8_t value) ;

constexpr uint8_t __get_Reserved_14() const;

 uint8_t __declspec(property(get=__get_Reserved_13, put=__set_Reserved_13))  Reserved_13;

constexpr void __set_Reserved_13(uint8_t value) ;

constexpr uint8_t __get_Reserved_13() const;

 uint8_t __declspec(property(get=__get_Reserved_12, put=__set_Reserved_12))  Reserved_12;

constexpr void __set_Reserved_12(uint8_t value) ;

constexpr uint8_t __get_Reserved_12() const;

 uint8_t __declspec(property(get=__get_Reserved_11, put=__set_Reserved_11))  Reserved_11;

constexpr void __set_Reserved_11(uint8_t value) ;

constexpr uint8_t __get_Reserved_11() const;

 uint8_t __declspec(property(get=__get_Reserved_10, put=__set_Reserved_10))  Reserved_10;

constexpr void __set_Reserved_10(uint8_t value) ;

constexpr uint8_t __get_Reserved_10() const;

 uint8_t __declspec(property(get=__get_Reserved_09, put=__set_Reserved_09))  Reserved_09;

constexpr void __set_Reserved_09(uint8_t value) ;

constexpr uint8_t __get_Reserved_09() const;

 uint8_t __declspec(property(get=__get_Reserved_08, put=__set_Reserved_08))  Reserved_08;

constexpr void __set_Reserved_08(uint8_t value) ;

constexpr uint8_t __get_Reserved_08() const;

 uint8_t __declspec(property(get=__get_Reserved_07, put=__set_Reserved_07))  Reserved_07;

constexpr void __set_Reserved_07(uint8_t value) ;

constexpr uint8_t __get_Reserved_07() const;

 uint8_t __declspec(property(get=__get_Reserved_06, put=__set_Reserved_06))  Reserved_06;

constexpr void __set_Reserved_06(uint8_t value) ;

constexpr uint8_t __get_Reserved_06() const;

 uint8_t __declspec(property(get=__get_Reserved_05, put=__set_Reserved_05))  Reserved_05;

constexpr void __set_Reserved_05(uint8_t value) ;

constexpr uint8_t __get_Reserved_05() const;

 uint8_t __declspec(property(get=__get_Reserved_04, put=__set_Reserved_04))  Reserved_04;

constexpr void __set_Reserved_04(uint8_t value) ;

constexpr uint8_t __get_Reserved_04() const;

 uint8_t __declspec(property(get=__get_Reserved_03, put=__set_Reserved_03))  Reserved_03;

constexpr void __set_Reserved_03(uint8_t value) ;

constexpr uint8_t __get_Reserved_03() const;

 uint8_t __declspec(property(get=__get_Reserved_02, put=__set_Reserved_02))  Reserved_02;

constexpr void __set_Reserved_02(uint8_t value) ;

constexpr uint8_t __get_Reserved_02() const;

 uint8_t __declspec(property(get=__get_Reserved_01, put=__set_Reserved_01))  Reserved_01;

constexpr void __set_Reserved_01(uint8_t value) ;

constexpr uint8_t __get_Reserved_01() const;

 uint8_t __declspec(property(get=__get_Reserved_00, put=__set_Reserved_00))  Reserved_00;

constexpr void __set_Reserved_00(uint8_t value) ;

constexpr uint8_t __get_Reserved_00() const;


// Methods

/// @brief Method .ctor addr 0x2621988 size 0x6c virtual false final false
 void _ctor(GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2 cs) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::ControllerState2
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8642))
// CS Name: OVRPlugin::ControllerState2
struct CORDL_TYPE GlobalNamespace__OVRPlugin__ControllerState2 : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "ConnectedControllers", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Buttons", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Touches", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "NearTouches", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "LIndexTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "RIndexTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "LHandTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "RHandTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "LThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }, CppParam { name: "RThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }, CppParam { name: "LTouchpad", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }, CppParam { name: "RTouchpad", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__ControllerState2(uint32_t ConnectedControllers, uint32_t Buttons, uint32_t Touches, uint32_t NearTouches, float_t LIndexTrigger, float_t RIndexTrigger, float_t LHandTrigger, float_t RHandTrigger, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f LThumbstick, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f RThumbstick, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f LTouchpad, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f RTouchpad) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__ControllerState2(GlobalNamespace__OVRPlugin__ControllerState2 const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__ControllerState2(GlobalNamespace__OVRPlugin__ControllerState2&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__ControllerState2& operator=(GlobalNamespace__OVRPlugin__ControllerState2 const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__ControllerState2& operator=(GlobalNamespace__OVRPlugin__ControllerState2&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x40};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__ControllerState2(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 uint32_t __declspec(property(get=__get_ConnectedControllers, put=__set_ConnectedControllers))  ConnectedControllers;

constexpr void __set_ConnectedControllers(uint32_t value) ;

constexpr uint32_t __get_ConnectedControllers() const;

 uint32_t __declspec(property(get=__get_Buttons, put=__set_Buttons))  Buttons;

constexpr void __set_Buttons(uint32_t value) ;

constexpr uint32_t __get_Buttons() const;

 uint32_t __declspec(property(get=__get_Touches, put=__set_Touches))  Touches;

constexpr void __set_Touches(uint32_t value) ;

constexpr uint32_t __get_Touches() const;

 uint32_t __declspec(property(get=__get_NearTouches, put=__set_NearTouches))  NearTouches;

constexpr void __set_NearTouches(uint32_t value) ;

constexpr uint32_t __get_NearTouches() const;

 float_t __declspec(property(get=__get_LIndexTrigger, put=__set_LIndexTrigger))  LIndexTrigger;

constexpr void __set_LIndexTrigger(float_t value) ;

constexpr float_t __get_LIndexTrigger() const;

 float_t __declspec(property(get=__get_RIndexTrigger, put=__set_RIndexTrigger))  RIndexTrigger;

constexpr void __set_RIndexTrigger(float_t value) ;

constexpr float_t __get_RIndexTrigger() const;

 float_t __declspec(property(get=__get_LHandTrigger, put=__set_LHandTrigger))  LHandTrigger;

constexpr void __set_LHandTrigger(float_t value) ;

constexpr float_t __get_LHandTrigger() const;

 float_t __declspec(property(get=__get_RHandTrigger, put=__set_RHandTrigger))  RHandTrigger;

constexpr void __set_RHandTrigger(float_t value) ;

constexpr float_t __get_RHandTrigger() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_LThumbstick, put=__set_LThumbstick))  LThumbstick;

constexpr void __set_LThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_LThumbstick() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_RThumbstick, put=__set_RThumbstick))  RThumbstick;

constexpr void __set_RThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_RThumbstick() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_LTouchpad, put=__set_LTouchpad))  LTouchpad;

constexpr void __set_LTouchpad(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_LTouchpad() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_RTouchpad, put=__set_RTouchpad))  RTouchpad;

constexpr void __set_RTouchpad(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_RTouchpad() const;


// Methods

/// @brief Method .ctor addr 0x26219f4 size 0x58 virtual false final false
 void _ctor(GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState cs) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::ControllerState
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8643))
// CS Name: OVRPlugin::ControllerState
struct CORDL_TYPE GlobalNamespace__OVRPlugin__ControllerState : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "ConnectedControllers", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Buttons", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Touches", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "NearTouches", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "LIndexTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "RIndexTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "LHandTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "RHandTrigger", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "LThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }, CppParam { name: "RThumbstick", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__ControllerState(uint32_t ConnectedControllers, uint32_t Buttons, uint32_t Touches, uint32_t NearTouches, float_t LIndexTrigger, float_t RIndexTrigger, float_t LHandTrigger, float_t RHandTrigger, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f LThumbstick, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f RThumbstick) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__ControllerState(GlobalNamespace__OVRPlugin__ControllerState const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__ControllerState(GlobalNamespace__OVRPlugin__ControllerState&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__ControllerState& operator=(GlobalNamespace__OVRPlugin__ControllerState const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__ControllerState& operator=(GlobalNamespace__OVRPlugin__ControllerState&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x30};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__ControllerState(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 uint32_t __declspec(property(get=__get_ConnectedControllers, put=__set_ConnectedControllers))  ConnectedControllers;

constexpr void __set_ConnectedControllers(uint32_t value) ;

constexpr uint32_t __get_ConnectedControllers() const;

 uint32_t __declspec(property(get=__get_Buttons, put=__set_Buttons))  Buttons;

constexpr void __set_Buttons(uint32_t value) ;

constexpr uint32_t __get_Buttons() const;

 uint32_t __declspec(property(get=__get_Touches, put=__set_Touches))  Touches;

constexpr void __set_Touches(uint32_t value) ;

constexpr uint32_t __get_Touches() const;

 uint32_t __declspec(property(get=__get_NearTouches, put=__set_NearTouches))  NearTouches;

constexpr void __set_NearTouches(uint32_t value) ;

constexpr uint32_t __get_NearTouches() const;

 float_t __declspec(property(get=__get_LIndexTrigger, put=__set_LIndexTrigger))  LIndexTrigger;

constexpr void __set_LIndexTrigger(float_t value) ;

constexpr float_t __get_LIndexTrigger() const;

 float_t __declspec(property(get=__get_RIndexTrigger, put=__set_RIndexTrigger))  RIndexTrigger;

constexpr void __set_RIndexTrigger(float_t value) ;

constexpr float_t __get_RIndexTrigger() const;

 float_t __declspec(property(get=__get_LHandTrigger, put=__set_LHandTrigger))  LHandTrigger;

constexpr void __set_LHandTrigger(float_t value) ;

constexpr float_t __get_LHandTrigger() const;

 float_t __declspec(property(get=__get_RHandTrigger, put=__set_RHandTrigger))  RHandTrigger;

constexpr void __set_RHandTrigger(float_t value) ;

constexpr float_t __get_RHandTrigger() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_LThumbstick, put=__set_LThumbstick))  LThumbstick;

constexpr void __set_LThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_LThumbstick() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_RThumbstick, put=__set_RThumbstick))  RThumbstick;

constexpr void __set_RThumbstick(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_RThumbstick() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::HapticsBuffer
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8644))
// CS Name: OVRPlugin::HapticsBuffer
struct CORDL_TYPE GlobalNamespace__OVRPlugin__HapticsBuffer : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Samples", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: None }, CppParam { name: "SamplesCount", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__HapticsBuffer(::cordl_internals::intptr_t Samples, int32_t SamplesCount) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__HapticsBuffer(GlobalNamespace__OVRPlugin__HapticsBuffer const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HapticsBuffer(GlobalNamespace__OVRPlugin__HapticsBuffer&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HapticsBuffer& operator=(GlobalNamespace__OVRPlugin__HapticsBuffer const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__HapticsBuffer& operator=(GlobalNamespace__OVRPlugin__HapticsBuffer&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__HapticsBuffer(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 ::cordl_internals::intptr_t __declspec(property(get=__get_Samples, put=__set_Samples))  Samples;

constexpr void __set_Samples(::cordl_internals::intptr_t value) ;

constexpr ::cordl_internals::intptr_t __get_Samples() const;

 int32_t __declspec(property(get=__get_SamplesCount, put=__set_SamplesCount))  SamplesCount;

constexpr void __set_SamplesCount(int32_t value) ;

constexpr int32_t __get_SamplesCount() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::HapticsState
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8645))
// CS Name: OVRPlugin::HapticsState
struct CORDL_TYPE GlobalNamespace__OVRPlugin__HapticsState : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "SamplesAvailable", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "SamplesQueued", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__HapticsState(int32_t SamplesAvailable, int32_t SamplesQueued) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__HapticsState(GlobalNamespace__OVRPlugin__HapticsState const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HapticsState(GlobalNamespace__OVRPlugin__HapticsState&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HapticsState& operator=(GlobalNamespace__OVRPlugin__HapticsState const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__HapticsState& operator=(GlobalNamespace__OVRPlugin__HapticsState&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x8};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__HapticsState(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 int32_t __declspec(property(get=__get_SamplesAvailable, put=__set_SamplesAvailable))  SamplesAvailable;

constexpr void __set_SamplesAvailable(int32_t value) ;

constexpr int32_t __get_SamplesAvailable() const;

 int32_t __declspec(property(get=__get_SamplesQueued, put=__set_SamplesQueued))  SamplesQueued;

constexpr void __set_SamplesQueued(int32_t value) ;

constexpr int32_t __get_SamplesQueued() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::HapticsDesc
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8646))
// CS Name: OVRPlugin::HapticsDesc
struct CORDL_TYPE GlobalNamespace__OVRPlugin__HapticsDesc : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "SampleRateHz", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "SampleSizeInBytes", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "MinimumSafeSamplesQueued", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "MinimumBufferSamplesCount", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "OptimalBufferSamplesCount", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "MaximumBufferSamplesCount", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__HapticsDesc(int32_t SampleRateHz, int32_t SampleSizeInBytes, int32_t MinimumSafeSamplesQueued, int32_t MinimumBufferSamplesCount, int32_t OptimalBufferSamplesCount, int32_t MaximumBufferSamplesCount) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__HapticsDesc(GlobalNamespace__OVRPlugin__HapticsDesc const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HapticsDesc(GlobalNamespace__OVRPlugin__HapticsDesc&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HapticsDesc& operator=(GlobalNamespace__OVRPlugin__HapticsDesc const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__HapticsDesc& operator=(GlobalNamespace__OVRPlugin__HapticsDesc&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x18};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__HapticsDesc(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 int32_t __declspec(property(get=__get_SampleRateHz, put=__set_SampleRateHz))  SampleRateHz;

constexpr void __set_SampleRateHz(int32_t value) ;

constexpr int32_t __get_SampleRateHz() const;

 int32_t __declspec(property(get=__get_SampleSizeInBytes, put=__set_SampleSizeInBytes))  SampleSizeInBytes;

constexpr void __set_SampleSizeInBytes(int32_t value) ;

constexpr int32_t __get_SampleSizeInBytes() const;

 int32_t __declspec(property(get=__get_MinimumSafeSamplesQueued, put=__set_MinimumSafeSamplesQueued))  MinimumSafeSamplesQueued;

constexpr void __set_MinimumSafeSamplesQueued(int32_t value) ;

constexpr int32_t __get_MinimumSafeSamplesQueued() const;

 int32_t __declspec(property(get=__get_MinimumBufferSamplesCount, put=__set_MinimumBufferSamplesCount))  MinimumBufferSamplesCount;

constexpr void __set_MinimumBufferSamplesCount(int32_t value) ;

constexpr int32_t __get_MinimumBufferSamplesCount() const;

 int32_t __declspec(property(get=__get_OptimalBufferSamplesCount, put=__set_OptimalBufferSamplesCount))  OptimalBufferSamplesCount;

constexpr void __set_OptimalBufferSamplesCount(int32_t value) ;

constexpr int32_t __get_OptimalBufferSamplesCount() const;

 int32_t __declspec(property(get=__get_MaximumBufferSamplesCount, put=__set_MaximumBufferSamplesCount))  MaximumBufferSamplesCount;

constexpr void __set_MaximumBufferSamplesCount(int32_t value) ;

constexpr int32_t __get_MaximumBufferSamplesCount() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::HapticsAmplitudeEnvelopeVibration
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8647))
// CS Name: OVRPlugin::HapticsAmplitudeEnvelopeVibration
struct CORDL_TYPE GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Duration", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "AmplitudeCount", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Amplitudes", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration(float_t Duration, uint32_t AmplitudeCount, ::cordl_internals::intptr_t Amplitudes) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration(GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration(GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration& operator=(GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration& operator=(GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 float_t __declspec(property(get=__get_Duration, put=__set_Duration))  Duration;

constexpr void __set_Duration(float_t value) ;

constexpr float_t __get_Duration() const;

 uint32_t __declspec(property(get=__get_AmplitudeCount, put=__set_AmplitudeCount))  AmplitudeCount;

constexpr void __set_AmplitudeCount(uint32_t value) ;

constexpr uint32_t __get_AmplitudeCount() const;

 ::cordl_internals::intptr_t __declspec(property(get=__get_Amplitudes, put=__set_Amplitudes))  Amplitudes;

constexpr void __set_Amplitudes(::cordl_internals::intptr_t value) ;

constexpr ::cordl_internals::intptr_t __get_Amplitudes() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::HapticsPcmVibration
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8648))
// CS Name: OVRPlugin::HapticsPcmVibration
struct CORDL_TYPE GlobalNamespace__OVRPlugin__HapticsPcmVibration : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "BufferSize", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Buffer", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: None }, CppParam { name: "SampleRateHz", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "Append", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: None }, CppParam { name: "SamplesConsumed", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__HapticsPcmVibration(uint32_t BufferSize, ::cordl_internals::intptr_t Buffer, float_t SampleRateHz, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool Append, ::cordl_internals::intptr_t SamplesConsumed) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__HapticsPcmVibration(GlobalNamespace__OVRPlugin__HapticsPcmVibration const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HapticsPcmVibration(GlobalNamespace__OVRPlugin__HapticsPcmVibration&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HapticsPcmVibration& operator=(GlobalNamespace__OVRPlugin__HapticsPcmVibration const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__HapticsPcmVibration& operator=(GlobalNamespace__OVRPlugin__HapticsPcmVibration&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x20};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__HapticsPcmVibration(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 uint32_t __declspec(property(get=__get_BufferSize, put=__set_BufferSize))  BufferSize;

constexpr void __set_BufferSize(uint32_t value) ;

constexpr uint32_t __get_BufferSize() const;

 ::cordl_internals::intptr_t __declspec(property(get=__get_Buffer, put=__set_Buffer))  Buffer;

constexpr void __set_Buffer(::cordl_internals::intptr_t value) ;

constexpr ::cordl_internals::intptr_t __get_Buffer() const;

 float_t __declspec(property(get=__get_SampleRateHz, put=__set_SampleRateHz))  SampleRateHz;

constexpr void __set_SampleRateHz(float_t value) ;

constexpr float_t __get_SampleRateHz() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __declspec(property(get=__get_Append, put=__set_Append))  Append;

constexpr void __set_Append(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __get_Append() const;

 ::cordl_internals::intptr_t __declspec(property(get=__get_SamplesConsumed, put=__set_SamplesConsumed))  SamplesConsumed;

constexpr void __set_SamplesConsumed(::cordl_internals::intptr_t value) ;

constexpr ::cordl_internals::intptr_t __get_SamplesConsumed() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::HapticsConstants
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8649))
// CS Name: OVRPlugin::HapticsConstants
struct CORDL_TYPE GlobalNamespace__OVRPlugin__HapticsConstants : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__HapticsConstants(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__HapticsConstants(GlobalNamespace__OVRPlugin__HapticsConstants const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HapticsConstants(GlobalNamespace__OVRPlugin__HapticsConstants&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HapticsConstants& operator=(GlobalNamespace__OVRPlugin__HapticsConstants const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__HapticsConstants& operator=(GlobalNamespace__OVRPlugin__HapticsConstants&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__HapticsConstants(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__HapticsConstants_Unwrapped : int32_t {
__MaxSamples = 4000,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__HapticsConstants_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__HapticsConstants_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field MaxSamples offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsConstants const MaxSamples;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::AppPerfFrameStats
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8650))
// CS Name: OVRPlugin::AppPerfFrameStats
struct CORDL_TYPE GlobalNamespace__OVRPlugin__AppPerfFrameStats : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "HmdVsyncIndex", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "AppFrameIndex", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "AppDroppedFrameCount", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "AppMotionToPhotonLatency", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "AppQueueAheadTime", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "AppCpuElapsedTime", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "AppGpuElapsedTime", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "CompositorFrameIndex", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "CompositorDroppedFrameCount", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "CompositorLatency", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "CompositorCpuElapsedTime", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "CompositorGpuElapsedTime", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "CompositorCpuStartToGpuEndElapsedTime", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "CompositorGpuEndToVsyncElapsedTime", ty: "float_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__AppPerfFrameStats(int32_t HmdVsyncIndex, int32_t AppFrameIndex, int32_t AppDroppedFrameCount, float_t AppMotionToPhotonLatency, float_t AppQueueAheadTime, float_t AppCpuElapsedTime, float_t AppGpuElapsedTime, int32_t CompositorFrameIndex, int32_t CompositorDroppedFrameCount, float_t CompositorLatency, float_t CompositorCpuElapsedTime, float_t CompositorGpuElapsedTime, float_t CompositorCpuStartToGpuEndElapsedTime, float_t CompositorGpuEndToVsyncElapsedTime) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__AppPerfFrameStats(GlobalNamespace__OVRPlugin__AppPerfFrameStats const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__AppPerfFrameStats(GlobalNamespace__OVRPlugin__AppPerfFrameStats&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__AppPerfFrameStats& operator=(GlobalNamespace__OVRPlugin__AppPerfFrameStats const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__AppPerfFrameStats& operator=(GlobalNamespace__OVRPlugin__AppPerfFrameStats&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x38};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__AppPerfFrameStats(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 int32_t __declspec(property(get=__get_HmdVsyncIndex, put=__set_HmdVsyncIndex))  HmdVsyncIndex;

constexpr void __set_HmdVsyncIndex(int32_t value) ;

constexpr int32_t __get_HmdVsyncIndex() const;

 int32_t __declspec(property(get=__get_AppFrameIndex, put=__set_AppFrameIndex))  AppFrameIndex;

constexpr void __set_AppFrameIndex(int32_t value) ;

constexpr int32_t __get_AppFrameIndex() const;

 int32_t __declspec(property(get=__get_AppDroppedFrameCount, put=__set_AppDroppedFrameCount))  AppDroppedFrameCount;

constexpr void __set_AppDroppedFrameCount(int32_t value) ;

constexpr int32_t __get_AppDroppedFrameCount() const;

 float_t __declspec(property(get=__get_AppMotionToPhotonLatency, put=__set_AppMotionToPhotonLatency))  AppMotionToPhotonLatency;

constexpr void __set_AppMotionToPhotonLatency(float_t value) ;

constexpr float_t __get_AppMotionToPhotonLatency() const;

 float_t __declspec(property(get=__get_AppQueueAheadTime, put=__set_AppQueueAheadTime))  AppQueueAheadTime;

constexpr void __set_AppQueueAheadTime(float_t value) ;

constexpr float_t __get_AppQueueAheadTime() const;

 float_t __declspec(property(get=__get_AppCpuElapsedTime, put=__set_AppCpuElapsedTime))  AppCpuElapsedTime;

constexpr void __set_AppCpuElapsedTime(float_t value) ;

constexpr float_t __get_AppCpuElapsedTime() const;

 float_t __declspec(property(get=__get_AppGpuElapsedTime, put=__set_AppGpuElapsedTime))  AppGpuElapsedTime;

constexpr void __set_AppGpuElapsedTime(float_t value) ;

constexpr float_t __get_AppGpuElapsedTime() const;

 int32_t __declspec(property(get=__get_CompositorFrameIndex, put=__set_CompositorFrameIndex))  CompositorFrameIndex;

constexpr void __set_CompositorFrameIndex(int32_t value) ;

constexpr int32_t __get_CompositorFrameIndex() const;

 int32_t __declspec(property(get=__get_CompositorDroppedFrameCount, put=__set_CompositorDroppedFrameCount))  CompositorDroppedFrameCount;

constexpr void __set_CompositorDroppedFrameCount(int32_t value) ;

constexpr int32_t __get_CompositorDroppedFrameCount() const;

 float_t __declspec(property(get=__get_CompositorLatency, put=__set_CompositorLatency))  CompositorLatency;

constexpr void __set_CompositorLatency(float_t value) ;

constexpr float_t __get_CompositorLatency() const;

 float_t __declspec(property(get=__get_CompositorCpuElapsedTime, put=__set_CompositorCpuElapsedTime))  CompositorCpuElapsedTime;

constexpr void __set_CompositorCpuElapsedTime(float_t value) ;

constexpr float_t __get_CompositorCpuElapsedTime() const;

 float_t __declspec(property(get=__get_CompositorGpuElapsedTime, put=__set_CompositorGpuElapsedTime))  CompositorGpuElapsedTime;

constexpr void __set_CompositorGpuElapsedTime(float_t value) ;

constexpr float_t __get_CompositorGpuElapsedTime() const;

 float_t __declspec(property(get=__get_CompositorCpuStartToGpuEndElapsedTime, put=__set_CompositorCpuStartToGpuEndElapsedTime))  CompositorCpuStartToGpuEndElapsedTime;

constexpr void __set_CompositorCpuStartToGpuEndElapsedTime(float_t value) ;

constexpr float_t __get_CompositorCpuStartToGpuEndElapsedTime() const;

 float_t __declspec(property(get=__get_CompositorGpuEndToVsyncElapsedTime, put=__set_CompositorGpuEndToVsyncElapsedTime))  CompositorGpuEndToVsyncElapsedTime;

constexpr void __set_CompositorGpuEndToVsyncElapsedTime(float_t value) ;

constexpr float_t __get_CompositorGpuEndToVsyncElapsedTime() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::AppPerfStats
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8651))
// CS Name: OVRPlugin::AppPerfStats
struct CORDL_TYPE GlobalNamespace__OVRPlugin__AppPerfStats : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "FrameStats", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats>", modifiers: "", def_value: None }, CppParam { name: "FrameStatsCount", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "AnyFrameStatsDropped", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: None }, CppParam { name: "AdaptiveGpuPerformanceScale", ty: "float_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__AppPerfStats(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats> FrameStats, int32_t FrameStatsCount, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool AnyFrameStatsDropped, float_t AdaptiveGpuPerformanceScale) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__AppPerfStats(GlobalNamespace__OVRPlugin__AppPerfStats const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__AppPerfStats(GlobalNamespace__OVRPlugin__AppPerfStats&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__AppPerfStats& operator=(GlobalNamespace__OVRPlugin__AppPerfStats const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__AppPerfStats& operator=(GlobalNamespace__OVRPlugin__AppPerfStats&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x18};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__AppPerfStats(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats> __declspec(property(get=__get_FrameStats, put=__set_FrameStats))  FrameStats;

constexpr void __set_FrameStats(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats> __get_FrameStats() const;

 int32_t __declspec(property(get=__get_FrameStatsCount, put=__set_FrameStatsCount))  FrameStatsCount;

constexpr void __set_FrameStatsCount(int32_t value) ;

constexpr int32_t __get_FrameStatsCount() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __declspec(property(get=__get_AnyFrameStatsDropped, put=__set_AnyFrameStatsDropped))  AnyFrameStatsDropped;

constexpr void __set_AnyFrameStatsDropped(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __get_AnyFrameStatsDropped() const;

 float_t __declspec(property(get=__get_AdaptiveGpuPerformanceScale, put=__set_AdaptiveGpuPerformanceScale))  AdaptiveGpuPerformanceScale;

constexpr void __set_AdaptiveGpuPerformanceScale(float_t value) ;

constexpr float_t __get_AdaptiveGpuPerformanceScale() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Sizei
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8652))
// CS Name: OVRPlugin::Sizei
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Sizei : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
/// @brief Convert operator to System::IEquatable_1<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>
constexpr operator  System::IEquatable_1<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei>() const;

// Ctor Parameters [CppParam { name: "w", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "h", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Sizei(int32_t w, int32_t h) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Sizei(GlobalNamespace__OVRPlugin__Sizei const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Sizei(GlobalNamespace__OVRPlugin__Sizei&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Sizei& operator=(GlobalNamespace__OVRPlugin__Sizei const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Sizei& operator=(GlobalNamespace__OVRPlugin__Sizei&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x8};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Sizei(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 int32_t __declspec(property(get=__get_w, put=__set_w))  w;

constexpr void __set_w(int32_t value) ;

constexpr int32_t __get_w() const;

 int32_t __declspec(property(get=__get_h, put=__set_h))  h;

constexpr void __set_h(int32_t value) ;

constexpr int32_t __get_h() const;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __declspec(property(get=__get_zero, put=__set_zero))  zero;

static void __set_zero(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __get_zero() ;


// Methods

/// @brief Method Equals addr 0x2621a4c size 0x28 virtual true final true
 bool Equals(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei other) ;

/// @brief Method Equals addr 0x2621a74 size 0x88 virtual true final false
 bool Equals(::bs_hook::Il2CppWrapperType obj) ;

/// @brief Method GetHashCode addr 0x2621afc size 0x14 virtual true final false
 int32_t GetHashCode() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Sizef
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8653))
// CS Name: OVRPlugin::Sizef
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Sizef : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "w", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "h", ty: "float_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Sizef(float_t w, float_t h) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Sizef(GlobalNamespace__OVRPlugin__Sizef const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Sizef(GlobalNamespace__OVRPlugin__Sizef&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Sizef& operator=(GlobalNamespace__OVRPlugin__Sizef const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Sizef& operator=(GlobalNamespace__OVRPlugin__Sizef&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x8};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Sizef(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 float_t __declspec(property(get=__get_w, put=__set_w))  w;

constexpr void __set_w(float_t value) ;

constexpr float_t __get_w() const;

 float_t __declspec(property(get=__get_h, put=__set_h))  h;

constexpr void __set_h(float_t value) ;

constexpr float_t __get_h() const;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef __declspec(property(get=__get_zero, put=__set_zero))  zero;

static void __set_zero(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef __get_zero() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Size3f
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8654))
// CS Name: OVRPlugin::Size3f
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Size3f : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "w", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "h", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "d", ty: "float_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Size3f(float_t w, float_t h, float_t d) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Size3f(GlobalNamespace__OVRPlugin__Size3f const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Size3f(GlobalNamespace__OVRPlugin__Size3f&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Size3f& operator=(GlobalNamespace__OVRPlugin__Size3f const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Size3f& operator=(GlobalNamespace__OVRPlugin__Size3f&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0xc};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Size3f(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 float_t __declspec(property(get=__get_w, put=__set_w))  w;

constexpr void __set_w(float_t value) ;

constexpr float_t __get_w() const;

 float_t __declspec(property(get=__get_h, put=__set_h))  h;

constexpr void __set_h(float_t value) ;

constexpr float_t __get_h() const;

 float_t __declspec(property(get=__get_d, put=__set_d))  d;

constexpr void __set_d(float_t value) ;

constexpr float_t __get_d() const;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f __declspec(property(get=__get_zero, put=__set_zero))  zero;

static void __set_zero(GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f __get_zero() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Vector2i
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8655))
// CS Name: OVRPlugin::Vector2i
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Vector2i : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "x", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "y", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Vector2i(int32_t x, int32_t y) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Vector2i(GlobalNamespace__OVRPlugin__Vector2i const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Vector2i(GlobalNamespace__OVRPlugin__Vector2i&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Vector2i& operator=(GlobalNamespace__OVRPlugin__Vector2i const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Vector2i& operator=(GlobalNamespace__OVRPlugin__Vector2i&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x8};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Vector2i(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 int32_t __declspec(property(get=__get_x, put=__set_x))  x;

constexpr void __set_x(int32_t value) ;

constexpr int32_t __get_x() const;

 int32_t __declspec(property(get=__get_y, put=__set_y))  y;

constexpr void __set_y(int32_t value) ;

constexpr int32_t __get_y() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Recti
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8656))
// CS Name: OVRPlugin::Recti
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Recti : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Pos", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i", modifiers: "", def_value: None }, CppParam { name: "Size", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Recti(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i Pos, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei Size) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Recti(GlobalNamespace__OVRPlugin__Recti const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Recti(GlobalNamespace__OVRPlugin__Recti&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Recti& operator=(GlobalNamespace__OVRPlugin__Recti const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Recti& operator=(GlobalNamespace__OVRPlugin__Recti&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Recti(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i __declspec(property(get=__get_Pos, put=__set_Pos))  Pos;

constexpr void __set_Pos(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i __get_Pos() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __declspec(property(get=__get_Size, put=__set_Size))  Size;

constexpr void __set_Size(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __get_Size() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Rectf
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8657))
// CS Name: OVRPlugin::Rectf
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Rectf : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Pos", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f", modifiers: "", def_value: None }, CppParam { name: "Size", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Rectf(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f Pos, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef Size) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Rectf(GlobalNamespace__OVRPlugin__Rectf const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Rectf(GlobalNamespace__OVRPlugin__Rectf&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Rectf& operator=(GlobalNamespace__OVRPlugin__Rectf const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Rectf& operator=(GlobalNamespace__OVRPlugin__Rectf&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Rectf(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __declspec(property(get=__get_Pos, put=__set_Pos))  Pos;

constexpr void __set_Pos(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f __get_Pos() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef __declspec(property(get=__get_Size, put=__set_Size))  Size;

constexpr void __set_Size(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef __get_Size() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Boundsf
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8658))
// CS Name: OVRPlugin::Boundsf
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Boundsf : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Pos", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: None }, CppParam { name: "Size", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Boundsf(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f Pos, GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f Size) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Boundsf(GlobalNamespace__OVRPlugin__Boundsf const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Boundsf(GlobalNamespace__OVRPlugin__Boundsf&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Boundsf& operator=(GlobalNamespace__OVRPlugin__Boundsf const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Boundsf& operator=(GlobalNamespace__OVRPlugin__Boundsf&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x18};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Boundsf(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __declspec(property(get=__get_Pos, put=__set_Pos))  Pos;

constexpr void __set_Pos(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __get_Pos() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f __declspec(property(get=__get_Size, put=__set_Size))  Size;

constexpr void __set_Size(GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f __get_Size() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Frustumf
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8659))
// CS Name: OVRPlugin::Frustumf
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Frustumf : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "zNear", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "zFar", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "fovX", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "fovY", ty: "float_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Frustumf(float_t zNear, float_t zFar, float_t fovX, float_t fovY) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Frustumf(GlobalNamespace__OVRPlugin__Frustumf const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Frustumf(GlobalNamespace__OVRPlugin__Frustumf&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Frustumf& operator=(GlobalNamespace__OVRPlugin__Frustumf const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Frustumf& operator=(GlobalNamespace__OVRPlugin__Frustumf&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Frustumf(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 float_t __declspec(property(get=__get_zNear, put=__set_zNear))  zNear;

constexpr void __set_zNear(float_t value) ;

constexpr float_t __get_zNear() const;

 float_t __declspec(property(get=__get_zFar, put=__set_zFar))  zFar;

constexpr void __set_zFar(float_t value) ;

constexpr float_t __get_zFar() const;

 float_t __declspec(property(get=__get_fovX, put=__set_fovX))  fovX;

constexpr void __set_fovX(float_t value) ;

constexpr float_t __get_fovX() const;

 float_t __declspec(property(get=__get_fovY, put=__set_fovY))  fovY;

constexpr void __set_fovY(float_t value) ;

constexpr float_t __get_fovY() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Frustumf2
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8660))
// CS Name: OVRPlugin::Frustumf2
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Frustumf2 : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "zNear", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "zFar", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "Fov", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Frustumf2(float_t zNear, float_t zFar, GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf Fov) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Frustumf2(GlobalNamespace__OVRPlugin__Frustumf2 const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Frustumf2(GlobalNamespace__OVRPlugin__Frustumf2&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Frustumf2& operator=(GlobalNamespace__OVRPlugin__Frustumf2 const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Frustumf2& operator=(GlobalNamespace__OVRPlugin__Frustumf2&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x18};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Frustumf2(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 float_t __declspec(property(get=__get_zNear, put=__set_zNear))  zNear;

constexpr void __set_zNear(float_t value) ;

constexpr float_t __get_zNear() const;

 float_t __declspec(property(get=__get_zFar, put=__set_zFar))  zFar;

constexpr void __set_zFar(float_t value) ;

constexpr float_t __get_zFar() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf __declspec(property(get=__get_Fov, put=__set_Fov))  Fov;

constexpr void __set_Fov(GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf __get_Fov() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::BoundaryType
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8661))
// CS Name: OVRPlugin::BoundaryType
struct CORDL_TYPE GlobalNamespace__OVRPlugin__BoundaryType : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__BoundaryType(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__BoundaryType(GlobalNamespace__OVRPlugin__BoundaryType const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BoundaryType(GlobalNamespace__OVRPlugin__BoundaryType&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BoundaryType& operator=(GlobalNamespace__OVRPlugin__BoundaryType const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__BoundaryType& operator=(GlobalNamespace__OVRPlugin__BoundaryType&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__BoundaryType(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__BoundaryType_Unwrapped : int32_t {
__OuterBoundary = 1,
__PlayArea = 256,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__BoundaryType_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__BoundaryType_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field OuterBoundary offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType const OuterBoundary;

/// @brief Field PlayArea offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType const PlayArea;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::BoundaryTestResult
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8662))
// CS Name: OVRPlugin::BoundaryTestResult
struct CORDL_TYPE GlobalNamespace__OVRPlugin__BoundaryTestResult : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "IsTriggering", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: None }, CppParam { name: "ClosestDistance", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ClosestPoint", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: None }, CppParam { name: "ClosestPointNormal", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__BoundaryTestResult(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool IsTriggering, float_t ClosestDistance, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f ClosestPoint, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f ClosestPointNormal) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__BoundaryTestResult(GlobalNamespace__OVRPlugin__BoundaryTestResult const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BoundaryTestResult(GlobalNamespace__OVRPlugin__BoundaryTestResult&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BoundaryTestResult& operator=(GlobalNamespace__OVRPlugin__BoundaryTestResult const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__BoundaryTestResult& operator=(GlobalNamespace__OVRPlugin__BoundaryTestResult&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x20};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__BoundaryTestResult(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __declspec(property(get=__get_IsTriggering, put=__set_IsTriggering))  IsTriggering;

constexpr void __set_IsTriggering(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __get_IsTriggering() const;

 float_t __declspec(property(get=__get_ClosestDistance, put=__set_ClosestDistance))  ClosestDistance;

constexpr void __set_ClosestDistance(float_t value) ;

constexpr float_t __get_ClosestDistance() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __declspec(property(get=__get_ClosestPoint, put=__set_ClosestPoint))  ClosestPoint;

constexpr void __set_ClosestPoint(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __get_ClosestPoint() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __declspec(property(get=__get_ClosestPointNormal, put=__set_ClosestPointNormal))  ClosestPointNormal;

constexpr void __set_ClosestPointNormal(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __get_ClosestPointNormal() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::BoundaryGeometry
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8663))
// CS Name: OVRPlugin::BoundaryGeometry
struct CORDL_TYPE GlobalNamespace__OVRPlugin__BoundaryGeometry : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "BoundaryType", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType", modifiers: "", def_value: None }, CppParam { name: "Points", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f>", modifiers: "", def_value: None }, CppParam { name: "PointsCount", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__BoundaryGeometry(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType BoundaryType, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> Points, int32_t PointsCount) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__BoundaryGeometry(GlobalNamespace__OVRPlugin__BoundaryGeometry const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BoundaryGeometry(GlobalNamespace__OVRPlugin__BoundaryGeometry&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BoundaryGeometry& operator=(GlobalNamespace__OVRPlugin__BoundaryGeometry const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__BoundaryGeometry& operator=(GlobalNamespace__OVRPlugin__BoundaryGeometry&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x18};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__BoundaryGeometry(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType __declspec(property(get=__get_BoundaryType, put=__set_BoundaryType))  BoundaryType;

constexpr void __set_BoundaryType(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType __get_BoundaryType() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> __declspec(property(get=__get_Points, put=__set_Points))  Points;

constexpr void __set_Points(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> __get_Points() const;

 int32_t __declspec(property(get=__get_PointsCount, put=__set_PointsCount))  PointsCount;

constexpr void __set_PointsCount(int32_t value) ;

constexpr int32_t __get_PointsCount() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Colorf
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8664))
// CS Name: OVRPlugin::Colorf
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Colorf : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "r", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "g", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "b", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "a", ty: "float_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Colorf(float_t r, float_t g, float_t b, float_t a) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Colorf(GlobalNamespace__OVRPlugin__Colorf const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Colorf(GlobalNamespace__OVRPlugin__Colorf&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Colorf& operator=(GlobalNamespace__OVRPlugin__Colorf const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Colorf& operator=(GlobalNamespace__OVRPlugin__Colorf&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Colorf(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 float_t __declspec(property(get=__get_r, put=__set_r))  r;

constexpr void __set_r(float_t value) ;

constexpr float_t __get_r() const;

 float_t __declspec(property(get=__get_g, put=__set_g))  g;

constexpr void __set_g(float_t value) ;

constexpr float_t __get_g() const;

 float_t __declspec(property(get=__get_b, put=__set_b))  b;

constexpr void __set_b(float_t value) ;

constexpr float_t __get_b() const;

 float_t __declspec(property(get=__get_a, put=__set_a))  a;

constexpr void __set_a(float_t value) ;

constexpr float_t __get_a() const;


// Methods

/// @brief Method ToString addr 0x2621bec size 0x1e4 virtual true final false
 ::StringW ToString() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Fovf
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8665))
// CS Name: OVRPlugin::Fovf
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Fovf : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "UpTan", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "DownTan", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "LeftTan", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "RightTan", ty: "float_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Fovf(float_t UpTan, float_t DownTan, float_t LeftTan, float_t RightTan) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Fovf(GlobalNamespace__OVRPlugin__Fovf const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Fovf(GlobalNamespace__OVRPlugin__Fovf&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Fovf& operator=(GlobalNamespace__OVRPlugin__Fovf const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Fovf& operator=(GlobalNamespace__OVRPlugin__Fovf&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Fovf(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 float_t __declspec(property(get=__get_UpTan, put=__set_UpTan))  UpTan;

constexpr void __set_UpTan(float_t value) ;

constexpr float_t __get_UpTan() const;

 float_t __declspec(property(get=__get_DownTan, put=__set_DownTan))  DownTan;

constexpr void __set_DownTan(float_t value) ;

constexpr float_t __get_DownTan() const;

 float_t __declspec(property(get=__get_LeftTan, put=__set_LeftTan))  LeftTan;

constexpr void __set_LeftTan(float_t value) ;

constexpr float_t __get_LeftTan() const;

 float_t __declspec(property(get=__get_RightTan, put=__set_RightTan))  RightTan;

constexpr void __set_RightTan(float_t value) ;

constexpr float_t __get_RightTan() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::CameraIntrinsics
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8666))
// CS Name: OVRPlugin::CameraIntrinsics
struct CORDL_TYPE GlobalNamespace__OVRPlugin__CameraIntrinsics : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "IsValid", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: None }, CppParam { name: "LastChangedTimeSeconds", ty: "double_t", modifiers: "", def_value: None }, CppParam { name: "FOVPort", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf", modifiers: "", def_value: None }, CppParam { name: "VirtualNearPlaneDistanceMeters", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "VirtualFarPlaneDistanceMeters", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ImageSensorPixelResolution", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__CameraIntrinsics(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool IsValid, double_t LastChangedTimeSeconds, GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf FOVPort, float_t VirtualNearPlaneDistanceMeters, float_t VirtualFarPlaneDistanceMeters, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei ImageSensorPixelResolution) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__CameraIntrinsics(GlobalNamespace__OVRPlugin__CameraIntrinsics const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraIntrinsics(GlobalNamespace__OVRPlugin__CameraIntrinsics&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraIntrinsics& operator=(GlobalNamespace__OVRPlugin__CameraIntrinsics const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__CameraIntrinsics& operator=(GlobalNamespace__OVRPlugin__CameraIntrinsics&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x30};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__CameraIntrinsics(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __declspec(property(get=__get_IsValid, put=__set_IsValid))  IsValid;

constexpr void __set_IsValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __get_IsValid() const;

 double_t __declspec(property(get=__get_LastChangedTimeSeconds, put=__set_LastChangedTimeSeconds))  LastChangedTimeSeconds;

constexpr void __set_LastChangedTimeSeconds(double_t value) ;

constexpr double_t __get_LastChangedTimeSeconds() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf __declspec(property(get=__get_FOVPort, put=__set_FOVPort))  FOVPort;

constexpr void __set_FOVPort(GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf __get_FOVPort() const;

 float_t __declspec(property(get=__get_VirtualNearPlaneDistanceMeters, put=__set_VirtualNearPlaneDistanceMeters))  VirtualNearPlaneDistanceMeters;

constexpr void __set_VirtualNearPlaneDistanceMeters(float_t value) ;

constexpr float_t __get_VirtualNearPlaneDistanceMeters() const;

 float_t __declspec(property(get=__get_VirtualFarPlaneDistanceMeters, put=__set_VirtualFarPlaneDistanceMeters))  VirtualFarPlaneDistanceMeters;

constexpr void __set_VirtualFarPlaneDistanceMeters(float_t value) ;

constexpr float_t __get_VirtualFarPlaneDistanceMeters() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __declspec(property(get=__get_ImageSensorPixelResolution, put=__set_ImageSensorPixelResolution))  ImageSensorPixelResolution;

constexpr void __set_ImageSensorPixelResolution(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __get_ImageSensorPixelResolution() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::CameraExtrinsics
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8667))
// CS Name: OVRPlugin::CameraExtrinsics
struct CORDL_TYPE GlobalNamespace__OVRPlugin__CameraExtrinsics : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "IsValid", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: None }, CppParam { name: "LastChangedTimeSeconds", ty: "double_t", modifiers: "", def_value: None }, CppParam { name: "CameraStatusData", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus", modifiers: "", def_value: None }, CppParam { name: "AttachedToNode", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Node", modifiers: "", def_value: None }, CppParam { name: "RelativePose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__CameraExtrinsics(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool IsValid, double_t LastChangedTimeSeconds, GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus CameraStatusData, GlobalNamespace::GlobalNamespace__OVRPlugin__Node AttachedToNode, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef RelativePose) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__CameraExtrinsics(GlobalNamespace__OVRPlugin__CameraExtrinsics const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraExtrinsics(GlobalNamespace__OVRPlugin__CameraExtrinsics&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__CameraExtrinsics& operator=(GlobalNamespace__OVRPlugin__CameraExtrinsics const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__CameraExtrinsics& operator=(GlobalNamespace__OVRPlugin__CameraExtrinsics&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x38};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__CameraExtrinsics(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __declspec(property(get=__get_IsValid, put=__set_IsValid))  IsValid;

constexpr void __set_IsValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __get_IsValid() const;

 double_t __declspec(property(get=__get_LastChangedTimeSeconds, put=__set_LastChangedTimeSeconds))  LastChangedTimeSeconds;

constexpr void __set_LastChangedTimeSeconds(double_t value) ;

constexpr double_t __get_LastChangedTimeSeconds() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus __declspec(property(get=__get_CameraStatusData, put=__set_CameraStatusData))  CameraStatusData;

constexpr void __set_CameraStatusData(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus __get_CameraStatusData() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Node __declspec(property(get=__get_AttachedToNode, put=__set_AttachedToNode))  AttachedToNode;

constexpr void __set_AttachedToNode(GlobalNamespace::GlobalNamespace__OVRPlugin__Node value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Node __get_AttachedToNode() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __declspec(property(get=__get_RelativePose, put=__set_RelativePose))  RelativePose;

constexpr void __set_RelativePose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __get_RelativePose() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::LayerLayout
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8668))
// CS Name: OVRPlugin::LayerLayout
struct CORDL_TYPE GlobalNamespace__OVRPlugin__LayerLayout : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__LayerLayout(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__LayerLayout(GlobalNamespace__OVRPlugin__LayerLayout const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__LayerLayout(GlobalNamespace__OVRPlugin__LayerLayout&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__LayerLayout& operator=(GlobalNamespace__OVRPlugin__LayerLayout const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__LayerLayout& operator=(GlobalNamespace__OVRPlugin__LayerLayout&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__LayerLayout(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__LayerLayout_Unwrapped : int32_t {
__Stereo = 0,
__Mono = 1,
__DoubleWide = 2,
__Array = 3,
__EnumSize = 15,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__LayerLayout_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__LayerLayout_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Stereo offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout const Stereo;

/// @brief Field Mono offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout const Mono;

/// @brief Field DoubleWide offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout const DoubleWide;

/// @brief Field Array offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout const Array;

/// @brief Field EnumSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout const EnumSize;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::LayerFlags
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8669))
// CS Name: OVRPlugin::LayerFlags
struct CORDL_TYPE GlobalNamespace__OVRPlugin__LayerFlags : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__LayerFlags(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__LayerFlags(GlobalNamespace__OVRPlugin__LayerFlags const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__LayerFlags(GlobalNamespace__OVRPlugin__LayerFlags&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__LayerFlags& operator=(GlobalNamespace__OVRPlugin__LayerFlags const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__LayerFlags& operator=(GlobalNamespace__OVRPlugin__LayerFlags&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__LayerFlags(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__LayerFlags_Unwrapped : int32_t {
__Static = 1,
__LoadingScreen = 2,
__SymmetricFov = 4,
__TextureOriginAtBottomLeft = 8,
__ChromaticAberrationCorrection = 16,
__NoAllocation = 32,
__ProtectedContent = 64,
__AndroidSurfaceSwapChain = 128,
__BicubicFiltering = 16384,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__LayerFlags_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__LayerFlags_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Static offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags const Static;

/// @brief Field LoadingScreen offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags const LoadingScreen;

/// @brief Field SymmetricFov offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags const SymmetricFov;

/// @brief Field TextureOriginAtBottomLeft offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags const TextureOriginAtBottomLeft;

/// @brief Field ChromaticAberrationCorrection offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags const ChromaticAberrationCorrection;

/// @brief Field NoAllocation offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags const NoAllocation;

/// @brief Field ProtectedContent offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags const ProtectedContent;

/// @brief Field AndroidSurfaceSwapChain offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags const AndroidSurfaceSwapChain;

/// @brief Field BicubicFiltering offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags const BicubicFiltering;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::LayerDesc
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8670))
// CS Name: OVRPlugin::LayerDesc
struct CORDL_TYPE GlobalNamespace__OVRPlugin__LayerDesc : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Shape", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape", modifiers: "", def_value: None }, CppParam { name: "Layout", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout", modifiers: "", def_value: None }, CppParam { name: "TextureSize", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: None }, CppParam { name: "MipLevels", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "SampleCount", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "Format", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: None }, CppParam { name: "LayerFlags", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "Fov", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf>", modifiers: "", def_value: None }, CppParam { name: "VisibleRect", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf>", modifiers: "", def_value: None }, CppParam { name: "MaxViewportSize", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: None }, CppParam { name: "DepthFormat", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: None }, CppParam { name: "MotionVectorFormat", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: None }, CppParam { name: "MotionVectorDepthFormat", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: None }, CppParam { name: "MotionVectorTextureSize", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__LayerDesc(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape Shape, GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout Layout, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei TextureSize, int32_t MipLevels, int32_t SampleCount, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat Format, int32_t LayerFlags, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf> Fov, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf> VisibleRect, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei MaxViewportSize, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat DepthFormat, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat MotionVectorFormat, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat MotionVectorDepthFormat, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei MotionVectorTextureSize) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__LayerDesc(GlobalNamespace__OVRPlugin__LayerDesc const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__LayerDesc(GlobalNamespace__OVRPlugin__LayerDesc&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__LayerDesc& operator=(GlobalNamespace__OVRPlugin__LayerDesc const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__LayerDesc& operator=(GlobalNamespace__OVRPlugin__LayerDesc&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x50};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__LayerDesc(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape __declspec(property(get=__get_Shape, put=__set_Shape))  Shape;

constexpr void __set_Shape(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape __get_Shape() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout __declspec(property(get=__get_Layout, put=__set_Layout))  Layout;

constexpr void __set_Layout(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout __get_Layout() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __declspec(property(get=__get_TextureSize, put=__set_TextureSize))  TextureSize;

constexpr void __set_TextureSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __get_TextureSize() const;

 int32_t __declspec(property(get=__get_MipLevels, put=__set_MipLevels))  MipLevels;

constexpr void __set_MipLevels(int32_t value) ;

constexpr int32_t __get_MipLevels() const;

 int32_t __declspec(property(get=__get_SampleCount, put=__set_SampleCount))  SampleCount;

constexpr void __set_SampleCount(int32_t value) ;

constexpr int32_t __get_SampleCount() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __declspec(property(get=__get_Format, put=__set_Format))  Format;

constexpr void __set_Format(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __get_Format() const;

 int32_t __declspec(property(get=__get_LayerFlags, put=__set_LayerFlags))  LayerFlags;

constexpr void __set_LayerFlags(int32_t value) ;

constexpr int32_t __get_LayerFlags() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf> __declspec(property(get=__get_Fov, put=__set_Fov))  Fov;

constexpr void __set_Fov(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf> __get_Fov() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf> __declspec(property(get=__get_VisibleRect, put=__set_VisibleRect))  VisibleRect;

constexpr void __set_VisibleRect(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf> __get_VisibleRect() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __declspec(property(get=__get_MaxViewportSize, put=__set_MaxViewportSize))  MaxViewportSize;

constexpr void __set_MaxViewportSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __get_MaxViewportSize() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __declspec(property(get=__get_DepthFormat, put=__set_DepthFormat))  DepthFormat;

constexpr void __set_DepthFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __get_DepthFormat() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __declspec(property(get=__get_MotionVectorFormat, put=__set_MotionVectorFormat))  MotionVectorFormat;

constexpr void __set_MotionVectorFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __get_MotionVectorFormat() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __declspec(property(get=__get_MotionVectorDepthFormat, put=__set_MotionVectorDepthFormat))  MotionVectorDepthFormat;

constexpr void __set_MotionVectorDepthFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __get_MotionVectorDepthFormat() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __declspec(property(get=__get_MotionVectorTextureSize, put=__set_MotionVectorTextureSize))  MotionVectorTextureSize;

constexpr void __set_MotionVectorTextureSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __get_MotionVectorTextureSize() const;


// Methods

/// @brief Method ToString addr 0x2621dd0 size 0x400 virtual true final false
 ::StringW ToString() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::LayerDescInternal
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8671))
// CS Name: OVRPlugin::LayerDescInternal
struct CORDL_TYPE GlobalNamespace__OVRPlugin__LayerDescInternal : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Shape", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape", modifiers: "", def_value: None }, CppParam { name: "Layout", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout", modifiers: "", def_value: None }, CppParam { name: "TextureSize", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: None }, CppParam { name: "MipLevels", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "SampleCount", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "Format", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: None }, CppParam { name: "LayerFlags", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "Fov0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf", modifiers: "", def_value: None }, CppParam { name: "Fov1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf", modifiers: "", def_value: None }, CppParam { name: "VisibleRect0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf", modifiers: "", def_value: None }, CppParam { name: "VisibleRect1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf", modifiers: "", def_value: None }, CppParam { name: "MaxViewportSize", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: None }, CppParam { name: "DepthFormat", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: None }, CppParam { name: "MotionVectorFormat", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: None }, CppParam { name: "MotionVectorDepthFormat", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat", modifiers: "", def_value: None }, CppParam { name: "MotionVectorTextureSize", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__LayerDescInternal(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape Shape, GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout Layout, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei TextureSize, int32_t MipLevels, int32_t SampleCount, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat Format, int32_t LayerFlags, GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf Fov0, GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf Fov1, GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf VisibleRect0, GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf VisibleRect1, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei MaxViewportSize, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat DepthFormat, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat MotionVectorFormat, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat MotionVectorDepthFormat, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei MotionVectorTextureSize) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__LayerDescInternal(GlobalNamespace__OVRPlugin__LayerDescInternal const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__LayerDescInternal(GlobalNamespace__OVRPlugin__LayerDescInternal&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__LayerDescInternal& operator=(GlobalNamespace__OVRPlugin__LayerDescInternal const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__LayerDescInternal& operator=(GlobalNamespace__OVRPlugin__LayerDescInternal&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x7c};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__LayerDescInternal(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape __declspec(property(get=__get_Shape, put=__set_Shape))  Shape;

constexpr void __set_Shape(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape __get_Shape() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout __declspec(property(get=__get_Layout, put=__set_Layout))  Layout;

constexpr void __set_Layout(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout __get_Layout() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __declspec(property(get=__get_TextureSize, put=__set_TextureSize))  TextureSize;

constexpr void __set_TextureSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __get_TextureSize() const;

 int32_t __declspec(property(get=__get_MipLevels, put=__set_MipLevels))  MipLevels;

constexpr void __set_MipLevels(int32_t value) ;

constexpr int32_t __get_MipLevels() const;

 int32_t __declspec(property(get=__get_SampleCount, put=__set_SampleCount))  SampleCount;

constexpr void __set_SampleCount(int32_t value) ;

constexpr int32_t __get_SampleCount() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __declspec(property(get=__get_Format, put=__set_Format))  Format;

constexpr void __set_Format(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __get_Format() const;

 int32_t __declspec(property(get=__get_LayerFlags, put=__set_LayerFlags))  LayerFlags;

constexpr void __set_LayerFlags(int32_t value) ;

constexpr int32_t __get_LayerFlags() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf __declspec(property(get=__get_Fov0, put=__set_Fov0))  Fov0;

constexpr void __set_Fov0(GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf __get_Fov0() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf __declspec(property(get=__get_Fov1, put=__set_Fov1))  Fov1;

constexpr void __set_Fov1(GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf __get_Fov1() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf __declspec(property(get=__get_VisibleRect0, put=__set_VisibleRect0))  VisibleRect0;

constexpr void __set_VisibleRect0(GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf __get_VisibleRect0() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf __declspec(property(get=__get_VisibleRect1, put=__set_VisibleRect1))  VisibleRect1;

constexpr void __set_VisibleRect1(GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf __get_VisibleRect1() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __declspec(property(get=__get_MaxViewportSize, put=__set_MaxViewportSize))  MaxViewportSize;

constexpr void __set_MaxViewportSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __get_MaxViewportSize() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __declspec(property(get=__get_DepthFormat, put=__set_DepthFormat))  DepthFormat;

constexpr void __set_DepthFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __get_DepthFormat() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __declspec(property(get=__get_MotionVectorFormat, put=__set_MotionVectorFormat))  MotionVectorFormat;

constexpr void __set_MotionVectorFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __get_MotionVectorFormat() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __declspec(property(get=__get_MotionVectorDepthFormat, put=__set_MotionVectorDepthFormat))  MotionVectorDepthFormat;

constexpr void __set_MotionVectorDepthFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat __get_MotionVectorDepthFormat() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __declspec(property(get=__get_MotionVectorTextureSize, put=__set_MotionVectorTextureSize))  MotionVectorTextureSize;

constexpr void __set_MotionVectorTextureSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei __get_MotionVectorTextureSize() const;


// Methods

/// @brief Method .ctor addr 0x26221d0 size 0xdc virtual false final false
 void _ctor(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc layerDesc) ;

/// @brief Method ToLayerDesc addr 0x26222ac size 0x150 virtual false final false
 GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc ToLayerDesc() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::BlendFactor
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8672))
// CS Name: OVRPlugin::BlendFactor
struct CORDL_TYPE GlobalNamespace__OVRPlugin__BlendFactor : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__BlendFactor(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__BlendFactor(GlobalNamespace__OVRPlugin__BlendFactor const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BlendFactor(GlobalNamespace__OVRPlugin__BlendFactor&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BlendFactor& operator=(GlobalNamespace__OVRPlugin__BlendFactor const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__BlendFactor& operator=(GlobalNamespace__OVRPlugin__BlendFactor&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__BlendFactor(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__BlendFactor_Unwrapped : int32_t {
__Zero = 0,
__One = 1,
__SrcAlpha = 2,
__OneMinusSrcAlpha = 3,
__DstAlpha = 4,
__OneMinusDstAlpha = 5,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__BlendFactor_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__BlendFactor_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Zero offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor const Zero;

/// @brief Field One offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor const One;

/// @brief Field SrcAlpha offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor const SrcAlpha;

/// @brief Field OneMinusSrcAlpha offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor const OneMinusSrcAlpha;

/// @brief Field DstAlpha offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor const DstAlpha;

/// @brief Field OneMinusDstAlpha offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor const OneMinusDstAlpha;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::LayerSubmit
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8673))
// CS Name: OVRPlugin::LayerSubmit
struct CORDL_TYPE GlobalNamespace__OVRPlugin__LayerSubmit : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "LayerId", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "TextureStage", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "ViewportRect", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Recti>", modifiers: "", def_value: None }, CppParam { name: "Pose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: None }, CppParam { name: "LayerSubmitFlags", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__LayerSubmit(int32_t LayerId, int32_t TextureStage, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Recti> ViewportRect, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef Pose, int32_t LayerSubmitFlags) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__LayerSubmit(GlobalNamespace__OVRPlugin__LayerSubmit const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__LayerSubmit(GlobalNamespace__OVRPlugin__LayerSubmit&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__LayerSubmit& operator=(GlobalNamespace__OVRPlugin__LayerSubmit const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__LayerSubmit& operator=(GlobalNamespace__OVRPlugin__LayerSubmit&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x30};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__LayerSubmit(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 int32_t __declspec(property(get=__get_LayerId, put=__set_LayerId))  LayerId;

constexpr void __set_LayerId(int32_t value) ;

constexpr int32_t __get_LayerId() const;

 int32_t __declspec(property(get=__get_TextureStage, put=__set_TextureStage))  TextureStage;

constexpr void __set_TextureStage(int32_t value) ;

constexpr int32_t __get_TextureStage() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Recti> __declspec(property(get=__get_ViewportRect, put=__set_ViewportRect))  ViewportRect;

constexpr void __set_ViewportRect(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Recti> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Recti> __get_ViewportRect() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __declspec(property(get=__get_Pose, put=__set_Pose))  Pose;

constexpr void __set_Pose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __get_Pose() const;

 int32_t __declspec(property(get=__get_LayerSubmitFlags, put=__set_LayerSubmitFlags))  LayerSubmitFlags;

constexpr void __set_LayerSubmitFlags(int32_t value) ;

constexpr int32_t __get_LayerSubmitFlags() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::TrackingConfidence
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8674))
// CS Name: OVRPlugin::TrackingConfidence
struct CORDL_TYPE GlobalNamespace__OVRPlugin__TrackingConfidence : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__TrackingConfidence(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__TrackingConfidence(GlobalNamespace__OVRPlugin__TrackingConfidence const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__TrackingConfidence(GlobalNamespace__OVRPlugin__TrackingConfidence&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__TrackingConfidence& operator=(GlobalNamespace__OVRPlugin__TrackingConfidence const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__TrackingConfidence& operator=(GlobalNamespace__OVRPlugin__TrackingConfidence&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__TrackingConfidence(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__TrackingConfidence_Unwrapped : int32_t {
__Low = 0,
__High = 1065353216,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__TrackingConfidence_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__TrackingConfidence_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Low offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence const Low;

/// @brief Field High offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence const High;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Hand
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8675))
// CS Name: OVRPlugin::Hand
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Hand : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Hand(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Hand(GlobalNamespace__OVRPlugin__Hand const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Hand(GlobalNamespace__OVRPlugin__Hand&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Hand& operator=(GlobalNamespace__OVRPlugin__Hand const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Hand& operator=(GlobalNamespace__OVRPlugin__Hand&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Hand(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__Hand_Unwrapped : int32_t {
__None = -1,
__HandLeft = 0,
__HandRight = 1,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__Hand_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__Hand_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Hand const None;

/// @brief Field HandLeft offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Hand const HandLeft;

/// @brief Field HandRight offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Hand const HandRight;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::HandStatus
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8676))
// CS Name: OVRPlugin::HandStatus
struct CORDL_TYPE GlobalNamespace__OVRPlugin__HandStatus : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__HandStatus(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__HandStatus(GlobalNamespace__OVRPlugin__HandStatus const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HandStatus(GlobalNamespace__OVRPlugin__HandStatus&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HandStatus& operator=(GlobalNamespace__OVRPlugin__HandStatus const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__HandStatus& operator=(GlobalNamespace__OVRPlugin__HandStatus&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__HandStatus(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__HandStatus_Unwrapped : int32_t {
__HandTracked = 1,
__InputStateValid = 2,
__SystemGestureInProgress = 64,
__DominantHand = 128,
__MenuPressed = 256,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__HandStatus_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__HandStatus_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field HandTracked offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus const HandTracked;

/// @brief Field InputStateValid offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus const InputStateValid;

/// @brief Field SystemGestureInProgress offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus const SystemGestureInProgress;

/// @brief Field DominantHand offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus const DominantHand;

/// @brief Field MenuPressed offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus const MenuPressed;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::BoneId
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8677))
// CS Name: OVRPlugin::BoneId
struct CORDL_TYPE GlobalNamespace__OVRPlugin__BoneId : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__BoneId(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__BoneId(GlobalNamespace__OVRPlugin__BoneId const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BoneId(GlobalNamespace__OVRPlugin__BoneId&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BoneId& operator=(GlobalNamespace__OVRPlugin__BoneId const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__BoneId& operator=(GlobalNamespace__OVRPlugin__BoneId&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__BoneId(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__BoneId_Unwrapped : int32_t {
__Invalid = -1,
__Hand_Start = 0,
__Hand_WristRoot = 0,
__Hand_ForearmStub = 1,
__Hand_Thumb0 = 2,
__Hand_Thumb1 = 3,
__Hand_Thumb2 = 4,
__Hand_Thumb3 = 5,
__Hand_Index1 = 6,
__Hand_Index2 = 7,
__Hand_Index3 = 8,
__Hand_Middle1 = 9,
__Hand_Middle2 = 10,
__Hand_Middle3 = 11,
__Hand_Ring1 = 12,
__Hand_Ring2 = 13,
__Hand_Ring3 = 14,
__Hand_Pinky0 = 15,
__Hand_Pinky1 = 16,
__Hand_Pinky2 = 17,
__Hand_Pinky3 = 18,
__Hand_MaxSkinnable = 19,
__Hand_ThumbTip = 19,
__Hand_IndexTip = 20,
__Hand_MiddleTip = 21,
__Hand_RingTip = 22,
__Hand_PinkyTip = 23,
__Hand_End = 24,
__Body_Start = 0,
__Body_Root = 0,
__Body_Hips = 1,
__Body_SpineLower = 2,
__Body_SpineMiddle = 3,
__Body_SpineUpper = 4,
__Body_Chest = 5,
__Body_Neck = 6,
__Body_Head = 7,
__Body_LeftShoulder = 8,
__Body_LeftScapula = 9,
__Body_LeftArmUpper = 10,
__Body_LeftArmLower = 11,
__Body_LeftHandWristTwist = 12,
__Body_RightShoulder = 13,
__Body_RightScapula = 14,
__Body_RightArmUpper = 15,
__Body_RightArmLower = 16,
__Body_RightHandWristTwist = 17,
__Body_LeftHandPalm = 18,
__Body_LeftHandWrist = 19,
__Body_LeftHandThumbMetacarpal = 20,
__Body_LeftHandThumbProximal = 21,
__Body_LeftHandThumbDistal = 22,
__Body_LeftHandThumbTip = 23,
__Body_LeftHandIndexMetacarpal = 24,
__Body_LeftHandIndexProximal = 25,
__Body_LeftHandIndexIntermediate = 26,
__Body_LeftHandIndexDistal = 27,
__Body_LeftHandIndexTip = 28,
__Body_LeftHandMiddleMetacarpal = 29,
__Body_LeftHandMiddleProximal = 30,
__Body_LeftHandMiddleIntermediate = 31,
__Body_LeftHandMiddleDistal = 32,
__Body_LeftHandMiddleTip = 33,
__Body_LeftHandRingMetacarpal = 34,
__Body_LeftHandRingProximal = 35,
__Body_LeftHandRingIntermediate = 36,
__Body_LeftHandRingDistal = 37,
__Body_LeftHandRingTip = 38,
__Body_LeftHandLittleMetacarpal = 39,
__Body_LeftHandLittleProximal = 40,
__Body_LeftHandLittleIntermediate = 41,
__Body_LeftHandLittleDistal = 42,
__Body_LeftHandLittleTip = 43,
__Body_RightHandPalm = 44,
__Body_RightHandWrist = 45,
__Body_RightHandThumbMetacarpal = 46,
__Body_RightHandThumbProximal = 47,
__Body_RightHandThumbDistal = 48,
__Body_RightHandThumbTip = 49,
__Body_RightHandIndexMetacarpal = 50,
__Body_RightHandIndexProximal = 51,
__Body_RightHandIndexIntermediate = 52,
__Body_RightHandIndexDistal = 53,
__Body_RightHandIndexTip = 54,
__Body_RightHandMiddleMetacarpal = 55,
__Body_RightHandMiddleProximal = 56,
__Body_RightHandMiddleIntermediate = 57,
__Body_RightHandMiddleDistal = 58,
__Body_RightHandMiddleTip = 59,
__Body_RightHandRingMetacarpal = 60,
__Body_RightHandRingProximal = 61,
__Body_RightHandRingIntermediate = 62,
__Body_RightHandRingDistal = 63,
__Body_RightHandRingTip = 64,
__Body_RightHandLittleMetacarpal = 65,
__Body_RightHandLittleProximal = 66,
__Body_RightHandLittleIntermediate = 67,
__Body_RightHandLittleDistal = 68,
__Body_RightHandLittleTip = 69,
__Body_End = 70,
__Max = 70,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__BoneId_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__BoneId_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Invalid offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Invalid;

/// @brief Field Hand_Start offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Start;

/// @brief Field Hand_WristRoot offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_WristRoot;

/// @brief Field Hand_ForearmStub offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_ForearmStub;

/// @brief Field Hand_Thumb0 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Thumb0;

/// @brief Field Hand_Thumb1 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Thumb1;

/// @brief Field Hand_Thumb2 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Thumb2;

/// @brief Field Hand_Thumb3 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Thumb3;

/// @brief Field Hand_Index1 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Index1;

/// @brief Field Hand_Index2 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Index2;

/// @brief Field Hand_Index3 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Index3;

/// @brief Field Hand_Middle1 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Middle1;

/// @brief Field Hand_Middle2 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Middle2;

/// @brief Field Hand_Middle3 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Middle3;

/// @brief Field Hand_Ring1 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Ring1;

/// @brief Field Hand_Ring2 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Ring2;

/// @brief Field Hand_Ring3 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Ring3;

/// @brief Field Hand_Pinky0 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Pinky0;

/// @brief Field Hand_Pinky1 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Pinky1;

/// @brief Field Hand_Pinky2 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Pinky2;

/// @brief Field Hand_Pinky3 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_Pinky3;

/// @brief Field Hand_MaxSkinnable offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_MaxSkinnable;

/// @brief Field Hand_ThumbTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_ThumbTip;

/// @brief Field Hand_IndexTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_IndexTip;

/// @brief Field Hand_MiddleTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_MiddleTip;

/// @brief Field Hand_RingTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_RingTip;

/// @brief Field Hand_PinkyTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_PinkyTip;

/// @brief Field Hand_End offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Hand_End;

/// @brief Field Body_Start offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_Start;

/// @brief Field Body_Root offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_Root;

/// @brief Field Body_Hips offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_Hips;

/// @brief Field Body_SpineLower offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_SpineLower;

/// @brief Field Body_SpineMiddle offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_SpineMiddle;

/// @brief Field Body_SpineUpper offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_SpineUpper;

/// @brief Field Body_Chest offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_Chest;

/// @brief Field Body_Neck offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_Neck;

/// @brief Field Body_Head offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_Head;

/// @brief Field Body_LeftShoulder offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftShoulder;

/// @brief Field Body_LeftScapula offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftScapula;

/// @brief Field Body_LeftArmUpper offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftArmUpper;

/// @brief Field Body_LeftArmLower offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftArmLower;

/// @brief Field Body_LeftHandWristTwist offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandWristTwist;

/// @brief Field Body_RightShoulder offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightShoulder;

/// @brief Field Body_RightScapula offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightScapula;

/// @brief Field Body_RightArmUpper offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightArmUpper;

/// @brief Field Body_RightArmLower offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightArmLower;

/// @brief Field Body_RightHandWristTwist offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandWristTwist;

/// @brief Field Body_LeftHandPalm offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandPalm;

/// @brief Field Body_LeftHandWrist offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandWrist;

/// @brief Field Body_LeftHandThumbMetacarpal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandThumbMetacarpal;

/// @brief Field Body_LeftHandThumbProximal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandThumbProximal;

/// @brief Field Body_LeftHandThumbDistal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandThumbDistal;

/// @brief Field Body_LeftHandThumbTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandThumbTip;

/// @brief Field Body_LeftHandIndexMetacarpal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandIndexMetacarpal;

/// @brief Field Body_LeftHandIndexProximal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandIndexProximal;

/// @brief Field Body_LeftHandIndexIntermediate offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandIndexIntermediate;

/// @brief Field Body_LeftHandIndexDistal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandIndexDistal;

/// @brief Field Body_LeftHandIndexTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandIndexTip;

/// @brief Field Body_LeftHandMiddleMetacarpal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandMiddleMetacarpal;

/// @brief Field Body_LeftHandMiddleProximal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandMiddleProximal;

/// @brief Field Body_LeftHandMiddleIntermediate offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandMiddleIntermediate;

/// @brief Field Body_LeftHandMiddleDistal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandMiddleDistal;

/// @brief Field Body_LeftHandMiddleTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandMiddleTip;

/// @brief Field Body_LeftHandRingMetacarpal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandRingMetacarpal;

/// @brief Field Body_LeftHandRingProximal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandRingProximal;

/// @brief Field Body_LeftHandRingIntermediate offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandRingIntermediate;

/// @brief Field Body_LeftHandRingDistal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandRingDistal;

/// @brief Field Body_LeftHandRingTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandRingTip;

/// @brief Field Body_LeftHandLittleMetacarpal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandLittleMetacarpal;

/// @brief Field Body_LeftHandLittleProximal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandLittleProximal;

/// @brief Field Body_LeftHandLittleIntermediate offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandLittleIntermediate;

/// @brief Field Body_LeftHandLittleDistal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandLittleDistal;

/// @brief Field Body_LeftHandLittleTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_LeftHandLittleTip;

/// @brief Field Body_RightHandPalm offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandPalm;

/// @brief Field Body_RightHandWrist offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandWrist;

/// @brief Field Body_RightHandThumbMetacarpal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandThumbMetacarpal;

/// @brief Field Body_RightHandThumbProximal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandThumbProximal;

/// @brief Field Body_RightHandThumbDistal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandThumbDistal;

/// @brief Field Body_RightHandThumbTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandThumbTip;

/// @brief Field Body_RightHandIndexMetacarpal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandIndexMetacarpal;

/// @brief Field Body_RightHandIndexProximal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandIndexProximal;

/// @brief Field Body_RightHandIndexIntermediate offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandIndexIntermediate;

/// @brief Field Body_RightHandIndexDistal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandIndexDistal;

/// @brief Field Body_RightHandIndexTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandIndexTip;

/// @brief Field Body_RightHandMiddleMetacarpal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandMiddleMetacarpal;

/// @brief Field Body_RightHandMiddleProximal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandMiddleProximal;

/// @brief Field Body_RightHandMiddleIntermediate offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandMiddleIntermediate;

/// @brief Field Body_RightHandMiddleDistal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandMiddleDistal;

/// @brief Field Body_RightHandMiddleTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandMiddleTip;

/// @brief Field Body_RightHandRingMetacarpal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandRingMetacarpal;

/// @brief Field Body_RightHandRingProximal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandRingProximal;

/// @brief Field Body_RightHandRingIntermediate offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandRingIntermediate;

/// @brief Field Body_RightHandRingDistal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandRingDistal;

/// @brief Field Body_RightHandRingTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandRingTip;

/// @brief Field Body_RightHandLittleMetacarpal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandLittleMetacarpal;

/// @brief Field Body_RightHandLittleProximal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandLittleProximal;

/// @brief Field Body_RightHandLittleIntermediate offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandLittleIntermediate;

/// @brief Field Body_RightHandLittleDistal offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandLittleDistal;

/// @brief Field Body_RightHandLittleTip offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_RightHandLittleTip;

/// @brief Field Body_End offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Body_End;

/// @brief Field Max offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId const Max;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::HandFinger
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8678))
// CS Name: OVRPlugin::HandFinger
struct CORDL_TYPE GlobalNamespace__OVRPlugin__HandFinger : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__HandFinger(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__HandFinger(GlobalNamespace__OVRPlugin__HandFinger const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HandFinger(GlobalNamespace__OVRPlugin__HandFinger&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HandFinger& operator=(GlobalNamespace__OVRPlugin__HandFinger const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__HandFinger& operator=(GlobalNamespace__OVRPlugin__HandFinger&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__HandFinger(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__HandFinger_Unwrapped : int32_t {
__Thumb = 0,
__Index = 1,
__Middle = 2,
__Ring = 3,
__Pinky = 4,
__Max = 5,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__HandFinger_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__HandFinger_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Thumb offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger const Thumb;

/// @brief Field Index offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger const Index;

/// @brief Field Middle offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger const Middle;

/// @brief Field Ring offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger const Ring;

/// @brief Field Pinky offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger const Pinky;

/// @brief Field Max offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger const Max;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::HandFingerPinch
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8679))
// CS Name: OVRPlugin::HandFingerPinch
struct CORDL_TYPE GlobalNamespace__OVRPlugin__HandFingerPinch : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__HandFingerPinch(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__HandFingerPinch(GlobalNamespace__OVRPlugin__HandFingerPinch const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HandFingerPinch(GlobalNamespace__OVRPlugin__HandFingerPinch&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HandFingerPinch& operator=(GlobalNamespace__OVRPlugin__HandFingerPinch const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__HandFingerPinch& operator=(GlobalNamespace__OVRPlugin__HandFingerPinch&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__HandFingerPinch(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__HandFingerPinch_Unwrapped : int32_t {
__Thumb = 1,
__Index = 2,
__Middle = 4,
__Ring = 8,
__Pinky = 16,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__HandFingerPinch_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__HandFingerPinch_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Thumb offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch const Thumb;

/// @brief Field Index offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch const Index;

/// @brief Field Middle offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch const Middle;

/// @brief Field Ring offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch const Ring;

/// @brief Field Pinky offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch const Pinky;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::HandState
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8680))
// CS Name: OVRPlugin::HandState
struct CORDL_TYPE GlobalNamespace__OVRPlugin__HandState : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Status", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus", modifiers: "", def_value: None }, CppParam { name: "RootPose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: None }, CppParam { name: "BoneRotations", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf>", modifiers: "", def_value: None }, CppParam { name: "Pinches", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch", modifiers: "", def_value: None }, CppParam { name: "PinchStrength", ty: "::ArrayW<float_t>", modifiers: "", def_value: None }, CppParam { name: "PointerPose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: None }, CppParam { name: "HandScale", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "HandConfidence", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence", modifiers: "", def_value: None }, CppParam { name: "FingerConfidences", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence>", modifiers: "", def_value: None }, CppParam { name: "RequestedTimeStamp", ty: "double_t", modifiers: "", def_value: None }, CppParam { name: "SampleTimeStamp", ty: "double_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__HandState(GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus Status, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef RootPose, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> BoneRotations, GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch Pinches, ::ArrayW<float_t> PinchStrength, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef PointerPose, float_t HandScale, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence HandConfidence, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence> FingerConfidences, double_t RequestedTimeStamp, double_t SampleTimeStamp) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__HandState(GlobalNamespace__OVRPlugin__HandState const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HandState(GlobalNamespace__OVRPlugin__HandState&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HandState& operator=(GlobalNamespace__OVRPlugin__HandState const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__HandState& operator=(GlobalNamespace__OVRPlugin__HandState&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x78};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__HandState(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus __declspec(property(get=__get_Status, put=__set_Status))  Status;

constexpr void __set_Status(GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus __get_Status() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __declspec(property(get=__get_RootPose, put=__set_RootPose))  RootPose;

constexpr void __set_RootPose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __get_RootPose() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> __declspec(property(get=__get_BoneRotations, put=__set_BoneRotations))  BoneRotations;

constexpr void __set_BoneRotations(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> __get_BoneRotations() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch __declspec(property(get=__get_Pinches, put=__set_Pinches))  Pinches;

constexpr void __set_Pinches(GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch __get_Pinches() const;

 ::ArrayW<float_t> __declspec(property(get=__get_PinchStrength, put=__set_PinchStrength))  PinchStrength;

constexpr void __set_PinchStrength(::ArrayW<float_t> value) ;

constexpr ::ArrayW<float_t> __get_PinchStrength() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __declspec(property(get=__get_PointerPose, put=__set_PointerPose))  PointerPose;

constexpr void __set_PointerPose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __get_PointerPose() const;

 float_t __declspec(property(get=__get_HandScale, put=__set_HandScale))  HandScale;

constexpr void __set_HandScale(float_t value) ;

constexpr float_t __get_HandScale() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence __declspec(property(get=__get_HandConfidence, put=__set_HandConfidence))  HandConfidence;

constexpr void __set_HandConfidence(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence __get_HandConfidence() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence> __declspec(property(get=__get_FingerConfidences, put=__set_FingerConfidences))  FingerConfidences;

constexpr void __set_FingerConfidences(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence> __get_FingerConfidences() const;

 double_t __declspec(property(get=__get_RequestedTimeStamp, put=__set_RequestedTimeStamp))  RequestedTimeStamp;

constexpr void __set_RequestedTimeStamp(double_t value) ;

constexpr double_t __get_RequestedTimeStamp() const;

 double_t __declspec(property(get=__get_SampleTimeStamp, put=__set_SampleTimeStamp))  SampleTimeStamp;

constexpr void __set_SampleTimeStamp(double_t value) ;

constexpr double_t __get_SampleTimeStamp() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::HandStateInternal
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8681))
// CS Name: OVRPlugin::HandStateInternal
struct CORDL_TYPE GlobalNamespace__OVRPlugin__HandStateInternal : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Status", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus", modifiers: "", def_value: None }, CppParam { name: "RootPose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_2", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_3", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_4", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_5", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_6", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_7", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_8", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_9", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_10", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_11", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_12", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_13", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_14", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_15", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_16", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_17", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_18", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_19", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_20", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_21", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_22", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "BoneRotations_23", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf", modifiers: "", def_value: None }, CppParam { name: "Pinches", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch", modifiers: "", def_value: None }, CppParam { name: "PinchStrength_0", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "PinchStrength_1", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "PinchStrength_2", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "PinchStrength_3", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "PinchStrength_4", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "PointerPose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: None }, CppParam { name: "HandScale", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "HandConfidence", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence", modifiers: "", def_value: None }, CppParam { name: "FingerConfidences_0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence", modifiers: "", def_value: None }, CppParam { name: "FingerConfidences_1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence", modifiers: "", def_value: None }, CppParam { name: "FingerConfidences_2", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence", modifiers: "", def_value: None }, CppParam { name: "FingerConfidences_3", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence", modifiers: "", def_value: None }, CppParam { name: "FingerConfidences_4", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence", modifiers: "", def_value: None }, CppParam { name: "RequestedTimeStamp", ty: "double_t", modifiers: "", def_value: None }, CppParam { name: "SampleTimeStamp", ty: "double_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__HandStateInternal(GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus Status, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef RootPose, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_0, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_1, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_2, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_3, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_4, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_5, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_6, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_7, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_8, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_9, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_10, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_11, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_12, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_13, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_14, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_15, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_16, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_17, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_18, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_19, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_20, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_21, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_22, GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf BoneRotations_23, GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch Pinches, float_t PinchStrength_0, float_t PinchStrength_1, float_t PinchStrength_2, float_t PinchStrength_3, float_t PinchStrength_4, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef PointerPose, float_t HandScale, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence HandConfidence, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence FingerConfidences_0, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence FingerConfidences_1, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence FingerConfidences_2, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence FingerConfidences_3, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence FingerConfidences_4, double_t RequestedTimeStamp, double_t SampleTimeStamp) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__HandStateInternal(GlobalNamespace__OVRPlugin__HandStateInternal const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HandStateInternal(GlobalNamespace__OVRPlugin__HandStateInternal&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__HandStateInternal& operator=(GlobalNamespace__OVRPlugin__HandStateInternal const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__HandStateInternal& operator=(GlobalNamespace__OVRPlugin__HandStateInternal&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x200};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__HandStateInternal(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus __declspec(property(get=__get_Status, put=__set_Status))  Status;

constexpr void __set_Status(GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus __get_Status() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __declspec(property(get=__get_RootPose, put=__set_RootPose))  RootPose;

constexpr void __set_RootPose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __get_RootPose() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_0, put=__set_BoneRotations_0))  BoneRotations_0;

constexpr void __set_BoneRotations_0(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_0() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_1, put=__set_BoneRotations_1))  BoneRotations_1;

constexpr void __set_BoneRotations_1(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_1() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_2, put=__set_BoneRotations_2))  BoneRotations_2;

constexpr void __set_BoneRotations_2(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_2() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_3, put=__set_BoneRotations_3))  BoneRotations_3;

constexpr void __set_BoneRotations_3(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_3() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_4, put=__set_BoneRotations_4))  BoneRotations_4;

constexpr void __set_BoneRotations_4(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_4() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_5, put=__set_BoneRotations_5))  BoneRotations_5;

constexpr void __set_BoneRotations_5(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_5() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_6, put=__set_BoneRotations_6))  BoneRotations_6;

constexpr void __set_BoneRotations_6(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_6() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_7, put=__set_BoneRotations_7))  BoneRotations_7;

constexpr void __set_BoneRotations_7(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_7() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_8, put=__set_BoneRotations_8))  BoneRotations_8;

constexpr void __set_BoneRotations_8(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_8() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_9, put=__set_BoneRotations_9))  BoneRotations_9;

constexpr void __set_BoneRotations_9(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_9() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_10, put=__set_BoneRotations_10))  BoneRotations_10;

constexpr void __set_BoneRotations_10(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_10() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_11, put=__set_BoneRotations_11))  BoneRotations_11;

constexpr void __set_BoneRotations_11(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_11() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_12, put=__set_BoneRotations_12))  BoneRotations_12;

constexpr void __set_BoneRotations_12(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_12() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_13, put=__set_BoneRotations_13))  BoneRotations_13;

constexpr void __set_BoneRotations_13(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_13() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_14, put=__set_BoneRotations_14))  BoneRotations_14;

constexpr void __set_BoneRotations_14(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_14() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_15, put=__set_BoneRotations_15))  BoneRotations_15;

constexpr void __set_BoneRotations_15(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_15() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_16, put=__set_BoneRotations_16))  BoneRotations_16;

constexpr void __set_BoneRotations_16(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_16() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_17, put=__set_BoneRotations_17))  BoneRotations_17;

constexpr void __set_BoneRotations_17(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_17() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_18, put=__set_BoneRotations_18))  BoneRotations_18;

constexpr void __set_BoneRotations_18(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_18() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_19, put=__set_BoneRotations_19))  BoneRotations_19;

constexpr void __set_BoneRotations_19(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_19() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_20, put=__set_BoneRotations_20))  BoneRotations_20;

constexpr void __set_BoneRotations_20(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_20() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_21, put=__set_BoneRotations_21))  BoneRotations_21;

constexpr void __set_BoneRotations_21(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_21() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_22, put=__set_BoneRotations_22))  BoneRotations_22;

constexpr void __set_BoneRotations_22(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_22() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __declspec(property(get=__get_BoneRotations_23, put=__set_BoneRotations_23))  BoneRotations_23;

constexpr void __set_BoneRotations_23(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf __get_BoneRotations_23() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch __declspec(property(get=__get_Pinches, put=__set_Pinches))  Pinches;

constexpr void __set_Pinches(GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch __get_Pinches() const;

 float_t __declspec(property(get=__get_PinchStrength_0, put=__set_PinchStrength_0))  PinchStrength_0;

constexpr void __set_PinchStrength_0(float_t value) ;

constexpr float_t __get_PinchStrength_0() const;

 float_t __declspec(property(get=__get_PinchStrength_1, put=__set_PinchStrength_1))  PinchStrength_1;

constexpr void __set_PinchStrength_1(float_t value) ;

constexpr float_t __get_PinchStrength_1() const;

 float_t __declspec(property(get=__get_PinchStrength_2, put=__set_PinchStrength_2))  PinchStrength_2;

constexpr void __set_PinchStrength_2(float_t value) ;

constexpr float_t __get_PinchStrength_2() const;

 float_t __declspec(property(get=__get_PinchStrength_3, put=__set_PinchStrength_3))  PinchStrength_3;

constexpr void __set_PinchStrength_3(float_t value) ;

constexpr float_t __get_PinchStrength_3() const;

 float_t __declspec(property(get=__get_PinchStrength_4, put=__set_PinchStrength_4))  PinchStrength_4;

constexpr void __set_PinchStrength_4(float_t value) ;

constexpr float_t __get_PinchStrength_4() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __declspec(property(get=__get_PointerPose, put=__set_PointerPose))  PointerPose;

constexpr void __set_PointerPose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __get_PointerPose() const;

 float_t __declspec(property(get=__get_HandScale, put=__set_HandScale))  HandScale;

constexpr void __set_HandScale(float_t value) ;

constexpr float_t __get_HandScale() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence __declspec(property(get=__get_HandConfidence, put=__set_HandConfidence))  HandConfidence;

constexpr void __set_HandConfidence(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence __get_HandConfidence() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence __declspec(property(get=__get_FingerConfidences_0, put=__set_FingerConfidences_0))  FingerConfidences_0;

constexpr void __set_FingerConfidences_0(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence __get_FingerConfidences_0() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence __declspec(property(get=__get_FingerConfidences_1, put=__set_FingerConfidences_1))  FingerConfidences_1;

constexpr void __set_FingerConfidences_1(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence __get_FingerConfidences_1() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence __declspec(property(get=__get_FingerConfidences_2, put=__set_FingerConfidences_2))  FingerConfidences_2;

constexpr void __set_FingerConfidences_2(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence __get_FingerConfidences_2() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence __declspec(property(get=__get_FingerConfidences_3, put=__set_FingerConfidences_3))  FingerConfidences_3;

constexpr void __set_FingerConfidences_3(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence __get_FingerConfidences_3() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence __declspec(property(get=__get_FingerConfidences_4, put=__set_FingerConfidences_4))  FingerConfidences_4;

constexpr void __set_FingerConfidences_4(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence __get_FingerConfidences_4() const;

 double_t __declspec(property(get=__get_RequestedTimeStamp, put=__set_RequestedTimeStamp))  RequestedTimeStamp;

constexpr void __set_RequestedTimeStamp(double_t value) ;

constexpr double_t __get_RequestedTimeStamp() const;

 double_t __declspec(property(get=__get_SampleTimeStamp, put=__set_SampleTimeStamp))  SampleTimeStamp;

constexpr void __set_SampleTimeStamp(double_t value) ;

constexpr double_t __get_SampleTimeStamp() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::BoneCapsule
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8682))
// CS Name: OVRPlugin::BoneCapsule
struct CORDL_TYPE GlobalNamespace__OVRPlugin__BoneCapsule : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "BoneIndex", ty: "int16_t", modifiers: "", def_value: None }, CppParam { name: "StartPoint", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: None }, CppParam { name: "EndPoint", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: None }, CppParam { name: "Radius", ty: "float_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__BoneCapsule(int16_t BoneIndex, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f StartPoint, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f EndPoint, float_t Radius) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__BoneCapsule(GlobalNamespace__OVRPlugin__BoneCapsule const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BoneCapsule(GlobalNamespace__OVRPlugin__BoneCapsule&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BoneCapsule& operator=(GlobalNamespace__OVRPlugin__BoneCapsule const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__BoneCapsule& operator=(GlobalNamespace__OVRPlugin__BoneCapsule&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x20};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__BoneCapsule(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 int16_t __declspec(property(get=__get_BoneIndex, put=__set_BoneIndex))  BoneIndex;

constexpr void __set_BoneIndex(int16_t value) ;

constexpr int16_t __get_BoneIndex() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __declspec(property(get=__get_StartPoint, put=__set_StartPoint))  StartPoint;

constexpr void __set_StartPoint(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __get_StartPoint() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __declspec(property(get=__get_EndPoint, put=__set_EndPoint))  EndPoint;

constexpr void __set_EndPoint(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __get_EndPoint() const;

 float_t __declspec(property(get=__get_Radius, put=__set_Radius))  Radius;

constexpr void __set_Radius(float_t value) ;

constexpr float_t __get_Radius() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Bone
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8683))
// CS Name: OVRPlugin::Bone
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Bone : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Id", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId", modifiers: "", def_value: None }, CppParam { name: "ParentBoneIndex", ty: "int16_t", modifiers: "", def_value: None }, CppParam { name: "Pose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Bone(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId Id, int16_t ParentBoneIndex, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef Pose) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Bone(GlobalNamespace__OVRPlugin__Bone const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Bone(GlobalNamespace__OVRPlugin__Bone&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Bone& operator=(GlobalNamespace__OVRPlugin__Bone const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Bone& operator=(GlobalNamespace__OVRPlugin__Bone&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x24};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Bone(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId __declspec(property(get=__get_Id, put=__set_Id))  Id;

constexpr void __set_Id(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId __get_Id() const;

 int16_t __declspec(property(get=__get_ParentBoneIndex, put=__set_ParentBoneIndex))  ParentBoneIndex;

constexpr void __set_ParentBoneIndex(int16_t value) ;

constexpr int16_t __get_ParentBoneIndex() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __declspec(property(get=__get_Pose, put=__set_Pose))  Pose;

constexpr void __set_Pose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __get_Pose() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SkeletonConstants
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8684))
// CS Name: OVRPlugin::SkeletonConstants
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SkeletonConstants : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SkeletonConstants(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SkeletonConstants(GlobalNamespace__OVRPlugin__SkeletonConstants const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SkeletonConstants(GlobalNamespace__OVRPlugin__SkeletonConstants&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SkeletonConstants& operator=(GlobalNamespace__OVRPlugin__SkeletonConstants const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SkeletonConstants& operator=(GlobalNamespace__OVRPlugin__SkeletonConstants&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SkeletonConstants(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__SkeletonConstants_Unwrapped : int32_t {
__MaxHandBones = 24,
__MaxBodyBones = 70,
__MaxBones = 70,
__MaxBoneCapsules = 19,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__SkeletonConstants_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__SkeletonConstants_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field MaxHandBones offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants const MaxHandBones;

/// @brief Field MaxBodyBones offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants const MaxBodyBones;

/// @brief Field MaxBones offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants const MaxBones;

/// @brief Field MaxBoneCapsules offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants const MaxBoneCapsules;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SkeletonType
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8685))
// CS Name: OVRPlugin::SkeletonType
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SkeletonType : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SkeletonType(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SkeletonType(GlobalNamespace__OVRPlugin__SkeletonType const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SkeletonType(GlobalNamespace__OVRPlugin__SkeletonType&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SkeletonType& operator=(GlobalNamespace__OVRPlugin__SkeletonType const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SkeletonType& operator=(GlobalNamespace__OVRPlugin__SkeletonType&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SkeletonType(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__SkeletonType_Unwrapped : int32_t {
__None = -1,
__HandLeft = 0,
__HandRight = 1,
__Body = 2,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__SkeletonType_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__SkeletonType_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType const None;

/// @brief Field HandLeft offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType const HandLeft;

/// @brief Field HandRight offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType const HandRight;

/// @brief Field Body offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType const Body;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Skeleton
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8686))
// CS Name: OVRPlugin::Skeleton
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Skeleton : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Type", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType", modifiers: "", def_value: None }, CppParam { name: "NumBones", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "NumBoneCapsules", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Bones", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Skeleton(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType Type, uint32_t NumBones, uint32_t NumBoneCapsules, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone> Bones, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule> BoneCapsules) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Skeleton(GlobalNamespace__OVRPlugin__Skeleton const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Skeleton(GlobalNamespace__OVRPlugin__Skeleton&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Skeleton& operator=(GlobalNamespace__OVRPlugin__Skeleton const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Skeleton& operator=(GlobalNamespace__OVRPlugin__Skeleton&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x20};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Skeleton(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType __declspec(property(get=__get_Type, put=__set_Type))  Type;

constexpr void __set_Type(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType __get_Type() const;

 uint32_t __declspec(property(get=__get_NumBones, put=__set_NumBones))  NumBones;

constexpr void __set_NumBones(uint32_t value) ;

constexpr uint32_t __get_NumBones() const;

 uint32_t __declspec(property(get=__get_NumBoneCapsules, put=__set_NumBoneCapsules))  NumBoneCapsules;

constexpr void __set_NumBoneCapsules(uint32_t value) ;

constexpr uint32_t __get_NumBoneCapsules() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone> __declspec(property(get=__get_Bones, put=__set_Bones))  Bones;

constexpr void __set_Bones(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone> __get_Bones() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule> __declspec(property(get=__get_BoneCapsules, put=__set_BoneCapsules))  BoneCapsules;

constexpr void __set_BoneCapsules(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule> __get_BoneCapsules() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Skeleton2
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8687))
// CS Name: OVRPlugin::Skeleton2
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Skeleton2 : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Type", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType", modifiers: "", def_value: None }, CppParam { name: "NumBones", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "NumBoneCapsules", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Bones", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone>", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule>", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Skeleton2(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType Type, uint32_t NumBones, uint32_t NumBoneCapsules, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone> Bones, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule> BoneCapsules) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Skeleton2(GlobalNamespace__OVRPlugin__Skeleton2 const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Skeleton2(GlobalNamespace__OVRPlugin__Skeleton2&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Skeleton2& operator=(GlobalNamespace__OVRPlugin__Skeleton2 const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Skeleton2& operator=(GlobalNamespace__OVRPlugin__Skeleton2&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x20};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Skeleton2(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType __declspec(property(get=__get_Type, put=__set_Type))  Type;

constexpr void __set_Type(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType __get_Type() const;

 uint32_t __declspec(property(get=__get_NumBones, put=__set_NumBones))  NumBones;

constexpr void __set_NumBones(uint32_t value) ;

constexpr uint32_t __get_NumBones() const;

 uint32_t __declspec(property(get=__get_NumBoneCapsules, put=__set_NumBoneCapsules))  NumBoneCapsules;

constexpr void __set_NumBoneCapsules(uint32_t value) ;

constexpr uint32_t __get_NumBoneCapsules() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone> __declspec(property(get=__get_Bones, put=__set_Bones))  Bones;

constexpr void __set_Bones(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Bone> __get_Bones() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule> __declspec(property(get=__get_BoneCapsules, put=__set_BoneCapsules))  BoneCapsules;

constexpr void __set_BoneCapsules(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule> __get_BoneCapsules() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Skeleton2Internal
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8688))
// CS Name: OVRPlugin::Skeleton2Internal
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Skeleton2Internal : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Type", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType", modifiers: "", def_value: None }, CppParam { name: "NumBones", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "NumBoneCapsules", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Bones_0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_2", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_3", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_4", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_5", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_6", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_7", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_8", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_9", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_10", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_11", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_12", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_13", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_14", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_15", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_16", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_17", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_18", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_19", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_20", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_21", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_22", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_23", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_24", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_25", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_26", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_27", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_28", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_29", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_30", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_31", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_32", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_33", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_34", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_35", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_36", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_37", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_38", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_39", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_40", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_41", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_42", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_43", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_44", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_45", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_46", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_47", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_48", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_49", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_50", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_51", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_52", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_53", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_54", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_55", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_56", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_57", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_58", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_59", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_60", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_61", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_62", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_63", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_64", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_65", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_66", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_67", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_68", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "Bones_69", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bone", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_2", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_3", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_4", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_5", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_6", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_7", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_8", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_9", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_10", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_11", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_12", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_13", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_14", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_15", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_16", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_17", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_18", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Skeleton2Internal(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType Type, uint32_t NumBones, uint32_t NumBoneCapsules, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_0, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_1, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_2, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_3, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_4, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_5, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_6, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_7, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_8, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_9, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_10, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_11, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_12, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_13, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_14, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_15, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_16, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_17, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_18, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_19, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_20, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_21, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_22, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_23, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_24, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_25, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_26, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_27, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_28, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_29, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_30, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_31, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_32, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_33, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_34, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_35, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_36, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_37, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_38, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_39, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_40, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_41, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_42, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_43, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_44, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_45, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_46, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_47, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_48, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_49, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_50, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_51, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_52, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_53, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_54, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_55, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_56, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_57, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_58, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_59, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_60, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_61, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_62, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_63, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_64, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_65, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_66, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_67, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_68, GlobalNamespace::GlobalNamespace__OVRPlugin__Bone Bones_69, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_0, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_1, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_2, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_3, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_4, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_5, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_6, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_7, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_8, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_9, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_10, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_11, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_12, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_13, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_14, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_15, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_16, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_17, GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule BoneCapsules_18) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Skeleton2Internal(GlobalNamespace__OVRPlugin__Skeleton2Internal const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Skeleton2Internal(GlobalNamespace__OVRPlugin__Skeleton2Internal&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Skeleton2Internal& operator=(GlobalNamespace__OVRPlugin__Skeleton2Internal const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Skeleton2Internal& operator=(GlobalNamespace__OVRPlugin__Skeleton2Internal&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0xc44};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Skeleton2Internal(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType __declspec(property(get=__get_Type, put=__set_Type))  Type;

constexpr void __set_Type(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType __get_Type() const;

 uint32_t __declspec(property(get=__get_NumBones, put=__set_NumBones))  NumBones;

constexpr void __set_NumBones(uint32_t value) ;

constexpr uint32_t __get_NumBones() const;

 uint32_t __declspec(property(get=__get_NumBoneCapsules, put=__set_NumBoneCapsules))  NumBoneCapsules;

constexpr void __set_NumBoneCapsules(uint32_t value) ;

constexpr uint32_t __get_NumBoneCapsules() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_0, put=__set_Bones_0))  Bones_0;

constexpr void __set_Bones_0(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_0() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_1, put=__set_Bones_1))  Bones_1;

constexpr void __set_Bones_1(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_1() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_2, put=__set_Bones_2))  Bones_2;

constexpr void __set_Bones_2(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_2() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_3, put=__set_Bones_3))  Bones_3;

constexpr void __set_Bones_3(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_3() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_4, put=__set_Bones_4))  Bones_4;

constexpr void __set_Bones_4(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_4() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_5, put=__set_Bones_5))  Bones_5;

constexpr void __set_Bones_5(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_5() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_6, put=__set_Bones_6))  Bones_6;

constexpr void __set_Bones_6(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_6() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_7, put=__set_Bones_7))  Bones_7;

constexpr void __set_Bones_7(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_7() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_8, put=__set_Bones_8))  Bones_8;

constexpr void __set_Bones_8(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_8() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_9, put=__set_Bones_9))  Bones_9;

constexpr void __set_Bones_9(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_9() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_10, put=__set_Bones_10))  Bones_10;

constexpr void __set_Bones_10(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_10() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_11, put=__set_Bones_11))  Bones_11;

constexpr void __set_Bones_11(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_11() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_12, put=__set_Bones_12))  Bones_12;

constexpr void __set_Bones_12(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_12() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_13, put=__set_Bones_13))  Bones_13;

constexpr void __set_Bones_13(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_13() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_14, put=__set_Bones_14))  Bones_14;

constexpr void __set_Bones_14(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_14() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_15, put=__set_Bones_15))  Bones_15;

constexpr void __set_Bones_15(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_15() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_16, put=__set_Bones_16))  Bones_16;

constexpr void __set_Bones_16(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_16() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_17, put=__set_Bones_17))  Bones_17;

constexpr void __set_Bones_17(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_17() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_18, put=__set_Bones_18))  Bones_18;

constexpr void __set_Bones_18(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_18() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_19, put=__set_Bones_19))  Bones_19;

constexpr void __set_Bones_19(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_19() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_20, put=__set_Bones_20))  Bones_20;

constexpr void __set_Bones_20(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_20() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_21, put=__set_Bones_21))  Bones_21;

constexpr void __set_Bones_21(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_21() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_22, put=__set_Bones_22))  Bones_22;

constexpr void __set_Bones_22(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_22() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_23, put=__set_Bones_23))  Bones_23;

constexpr void __set_Bones_23(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_23() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_24, put=__set_Bones_24))  Bones_24;

constexpr void __set_Bones_24(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_24() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_25, put=__set_Bones_25))  Bones_25;

constexpr void __set_Bones_25(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_25() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_26, put=__set_Bones_26))  Bones_26;

constexpr void __set_Bones_26(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_26() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_27, put=__set_Bones_27))  Bones_27;

constexpr void __set_Bones_27(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_27() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_28, put=__set_Bones_28))  Bones_28;

constexpr void __set_Bones_28(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_28() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_29, put=__set_Bones_29))  Bones_29;

constexpr void __set_Bones_29(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_29() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_30, put=__set_Bones_30))  Bones_30;

constexpr void __set_Bones_30(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_30() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_31, put=__set_Bones_31))  Bones_31;

constexpr void __set_Bones_31(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_31() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_32, put=__set_Bones_32))  Bones_32;

constexpr void __set_Bones_32(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_32() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_33, put=__set_Bones_33))  Bones_33;

constexpr void __set_Bones_33(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_33() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_34, put=__set_Bones_34))  Bones_34;

constexpr void __set_Bones_34(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_34() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_35, put=__set_Bones_35))  Bones_35;

constexpr void __set_Bones_35(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_35() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_36, put=__set_Bones_36))  Bones_36;

constexpr void __set_Bones_36(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_36() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_37, put=__set_Bones_37))  Bones_37;

constexpr void __set_Bones_37(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_37() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_38, put=__set_Bones_38))  Bones_38;

constexpr void __set_Bones_38(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_38() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_39, put=__set_Bones_39))  Bones_39;

constexpr void __set_Bones_39(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_39() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_40, put=__set_Bones_40))  Bones_40;

constexpr void __set_Bones_40(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_40() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_41, put=__set_Bones_41))  Bones_41;

constexpr void __set_Bones_41(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_41() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_42, put=__set_Bones_42))  Bones_42;

constexpr void __set_Bones_42(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_42() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_43, put=__set_Bones_43))  Bones_43;

constexpr void __set_Bones_43(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_43() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_44, put=__set_Bones_44))  Bones_44;

constexpr void __set_Bones_44(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_44() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_45, put=__set_Bones_45))  Bones_45;

constexpr void __set_Bones_45(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_45() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_46, put=__set_Bones_46))  Bones_46;

constexpr void __set_Bones_46(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_46() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_47, put=__set_Bones_47))  Bones_47;

constexpr void __set_Bones_47(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_47() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_48, put=__set_Bones_48))  Bones_48;

constexpr void __set_Bones_48(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_48() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_49, put=__set_Bones_49))  Bones_49;

constexpr void __set_Bones_49(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_49() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_50, put=__set_Bones_50))  Bones_50;

constexpr void __set_Bones_50(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_50() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_51, put=__set_Bones_51))  Bones_51;

constexpr void __set_Bones_51(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_51() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_52, put=__set_Bones_52))  Bones_52;

constexpr void __set_Bones_52(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_52() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_53, put=__set_Bones_53))  Bones_53;

constexpr void __set_Bones_53(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_53() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_54, put=__set_Bones_54))  Bones_54;

constexpr void __set_Bones_54(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_54() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_55, put=__set_Bones_55))  Bones_55;

constexpr void __set_Bones_55(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_55() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_56, put=__set_Bones_56))  Bones_56;

constexpr void __set_Bones_56(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_56() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_57, put=__set_Bones_57))  Bones_57;

constexpr void __set_Bones_57(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_57() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_58, put=__set_Bones_58))  Bones_58;

constexpr void __set_Bones_58(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_58() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_59, put=__set_Bones_59))  Bones_59;

constexpr void __set_Bones_59(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_59() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_60, put=__set_Bones_60))  Bones_60;

constexpr void __set_Bones_60(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_60() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_61, put=__set_Bones_61))  Bones_61;

constexpr void __set_Bones_61(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_61() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_62, put=__set_Bones_62))  Bones_62;

constexpr void __set_Bones_62(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_62() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_63, put=__set_Bones_63))  Bones_63;

constexpr void __set_Bones_63(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_63() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_64, put=__set_Bones_64))  Bones_64;

constexpr void __set_Bones_64(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_64() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_65, put=__set_Bones_65))  Bones_65;

constexpr void __set_Bones_65(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_65() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_66, put=__set_Bones_66))  Bones_66;

constexpr void __set_Bones_66(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_66() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_67, put=__set_Bones_67))  Bones_67;

constexpr void __set_Bones_67(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_67() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_68, put=__set_Bones_68))  Bones_68;

constexpr void __set_Bones_68(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_68() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __declspec(property(get=__get_Bones_69, put=__set_Bones_69))  Bones_69;

constexpr void __set_Bones_69(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bone __get_Bones_69() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_0, put=__set_BoneCapsules_0))  BoneCapsules_0;

constexpr void __set_BoneCapsules_0(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_0() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_1, put=__set_BoneCapsules_1))  BoneCapsules_1;

constexpr void __set_BoneCapsules_1(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_1() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_2, put=__set_BoneCapsules_2))  BoneCapsules_2;

constexpr void __set_BoneCapsules_2(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_2() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_3, put=__set_BoneCapsules_3))  BoneCapsules_3;

constexpr void __set_BoneCapsules_3(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_3() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_4, put=__set_BoneCapsules_4))  BoneCapsules_4;

constexpr void __set_BoneCapsules_4(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_4() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_5, put=__set_BoneCapsules_5))  BoneCapsules_5;

constexpr void __set_BoneCapsules_5(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_5() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_6, put=__set_BoneCapsules_6))  BoneCapsules_6;

constexpr void __set_BoneCapsules_6(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_6() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_7, put=__set_BoneCapsules_7))  BoneCapsules_7;

constexpr void __set_BoneCapsules_7(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_7() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_8, put=__set_BoneCapsules_8))  BoneCapsules_8;

constexpr void __set_BoneCapsules_8(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_8() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_9, put=__set_BoneCapsules_9))  BoneCapsules_9;

constexpr void __set_BoneCapsules_9(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_9() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_10, put=__set_BoneCapsules_10))  BoneCapsules_10;

constexpr void __set_BoneCapsules_10(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_10() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_11, put=__set_BoneCapsules_11))  BoneCapsules_11;

constexpr void __set_BoneCapsules_11(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_11() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_12, put=__set_BoneCapsules_12))  BoneCapsules_12;

constexpr void __set_BoneCapsules_12(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_12() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_13, put=__set_BoneCapsules_13))  BoneCapsules_13;

constexpr void __set_BoneCapsules_13(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_13() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_14, put=__set_BoneCapsules_14))  BoneCapsules_14;

constexpr void __set_BoneCapsules_14(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_14() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_15, put=__set_BoneCapsules_15))  BoneCapsules_15;

constexpr void __set_BoneCapsules_15(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_15() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_16, put=__set_BoneCapsules_16))  BoneCapsules_16;

constexpr void __set_BoneCapsules_16(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_16() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_17, put=__set_BoneCapsules_17))  BoneCapsules_17;

constexpr void __set_BoneCapsules_17(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_17() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __declspec(property(get=__get_BoneCapsules_18, put=__set_BoneCapsules_18))  BoneCapsules_18;

constexpr void __set_BoneCapsules_18(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule __get_BoneCapsules_18() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::MeshConstants
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8689))
// CS Name: OVRPlugin::MeshConstants
struct CORDL_TYPE GlobalNamespace__OVRPlugin__MeshConstants : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__MeshConstants(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__MeshConstants(GlobalNamespace__OVRPlugin__MeshConstants const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__MeshConstants(GlobalNamespace__OVRPlugin__MeshConstants&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__MeshConstants& operator=(GlobalNamespace__OVRPlugin__MeshConstants const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__MeshConstants& operator=(GlobalNamespace__OVRPlugin__MeshConstants&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__MeshConstants(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__MeshConstants_Unwrapped : int32_t {
__MaxVertices = 3000,
__MaxIndices = 18000,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__MeshConstants_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__MeshConstants_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field MaxVertices offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__MeshConstants const MaxVertices;

/// @brief Field MaxIndices offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__MeshConstants const MaxIndices;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::MeshType
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8690))
// CS Name: OVRPlugin::MeshType
struct CORDL_TYPE GlobalNamespace__OVRPlugin__MeshType : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__MeshType(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__MeshType(GlobalNamespace__OVRPlugin__MeshType const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__MeshType(GlobalNamespace__OVRPlugin__MeshType&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__MeshType& operator=(GlobalNamespace__OVRPlugin__MeshType const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__MeshType& operator=(GlobalNamespace__OVRPlugin__MeshType&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__MeshType(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__MeshType_Unwrapped : int32_t {
__None = -1,
__HandLeft = 0,
__HandRight = 1,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__MeshType_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__MeshType_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType const None;

/// @brief Field HandLeft offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType const HandLeft;

/// @brief Field HandRight offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType const HandRight;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Mesh
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8691))
// CS Name: OVRPlugin::Mesh
class CORDL_TYPE GlobalNamespace__OVRPlugin__Mesh : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x50};

virtual ~GlobalNamespace__OVRPlugin__Mesh() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__Mesh", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Mesh(GlobalNamespace__OVRPlugin__Mesh const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__Mesh", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Mesh(GlobalNamespace__OVRPlugin__Mesh&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Mesh(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__Mesh& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__Mesh& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__Mesh& operator=(GlobalNamespace__OVRPlugin__Mesh&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__Mesh& operator=(GlobalNamespace__OVRPlugin__Mesh const& o) noexcept = default;
                


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType __declspec(property(get=__get_Type, put=__set_Type))  Type;

constexpr void __set_Type(GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType __get_Type() const;

 uint32_t __declspec(property(get=__get_NumVertices, put=__set_NumVertices))  NumVertices;

constexpr void __set_NumVertices(uint32_t value) ;

constexpr uint32_t __get_NumVertices() const;

 uint32_t __declspec(property(get=__get_NumIndices, put=__set_NumIndices))  NumIndices;

constexpr void __set_NumIndices(uint32_t value) ;

constexpr uint32_t __get_NumIndices() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> __declspec(property(get=__get_VertexPositions, put=__set_VertexPositions))  VertexPositions;

constexpr void __set_VertexPositions(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> __get_VertexPositions() const;

 ::ArrayW<int16_t> __declspec(property(get=__get_Indices, put=__set_Indices))  Indices;

constexpr void __set_Indices(::ArrayW<int16_t> value) ;

constexpr ::ArrayW<int16_t> __get_Indices() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> __declspec(property(get=__get_VertexNormals, put=__set_VertexNormals))  VertexNormals;

constexpr void __set_VertexNormals(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> __get_VertexNormals() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f> __declspec(property(get=__get_VertexUV0, put=__set_VertexUV0))  VertexUV0;

constexpr void __set_VertexUV0(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f> __get_VertexUV0() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s> __declspec(property(get=__get_BlendIndices, put=__set_BlendIndices))  BlendIndices;

constexpr void __set_BlendIndices(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s> __get_BlendIndices() const;

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f> __declspec(property(get=__get_BlendWeights, put=__set_BlendWeights))  BlendWeights;

constexpr void __set_BlendWeights(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f> __get_BlendWeights() const;


// Methods

// Ctor Parameters []
explicit GlobalNamespace__OVRPlugin__Mesh() ;

/// @brief Method .ctor addr 0x26223fc size 0x8 virtual false final false
 void _ctor() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpaceLocationFlags
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8692))
// CS Name: OVRPlugin::SpaceLocationFlags
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpaceLocationFlags : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "uint64_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpaceLocationFlags(uint64_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpaceLocationFlags(GlobalNamespace__OVRPlugin__SpaceLocationFlags const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceLocationFlags(GlobalNamespace__OVRPlugin__SpaceLocationFlags&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceLocationFlags& operator=(GlobalNamespace__OVRPlugin__SpaceLocationFlags const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpaceLocationFlags& operator=(GlobalNamespace__OVRPlugin__SpaceLocationFlags&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x8};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpaceLocationFlags(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__SpaceLocationFlags_Unwrapped : uint64_t {
__OrientationValid = 1u,
__PositionValid = 2u,
__OrientationTracked = 4u,
__PositionTracked = 8u,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__SpaceLocationFlags_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__SpaceLocationFlags_Unwrapped>(__instance);
}


// Fields

 uint64_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(uint64_t value) ;

constexpr uint64_t __get_value__() const;

/// @brief Field OrientationValid offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags const OrientationValid;

/// @brief Field PositionValid offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags const PositionValid;

/// @brief Field OrientationTracked offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags const OrientationTracked;

/// @brief Field PositionTracked offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags const PositionTracked;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpaceLocationf
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8693))
// CS Name: OVRPlugin::SpaceLocationf
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpaceLocationf : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "locationFlags", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags", modifiers: "", def_value: None }, CppParam { name: "pose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpaceLocationf(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags locationFlags, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef pose) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpaceLocationf(GlobalNamespace__OVRPlugin__SpaceLocationf const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceLocationf(GlobalNamespace__OVRPlugin__SpaceLocationf&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceLocationf& operator=(GlobalNamespace__OVRPlugin__SpaceLocationf const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpaceLocationf& operator=(GlobalNamespace__OVRPlugin__SpaceLocationf&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x28};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpaceLocationf(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags __declspec(property(get=__get_locationFlags, put=__set_locationFlags))  locationFlags;

constexpr void __set_locationFlags(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags __get_locationFlags() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __declspec(property(get=__get_pose, put=__set_pose))  pose;

constexpr void __set_pose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __get_pose() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::BodyJointLocation
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8694))
// CS Name: OVRPlugin::BodyJointLocation
struct CORDL_TYPE GlobalNamespace__OVRPlugin__BodyJointLocation : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "LocationFlags", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags", modifiers: "", def_value: None }, CppParam { name: "Pose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__BodyJointLocation(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags LocationFlags, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef Pose) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__BodyJointLocation(GlobalNamespace__OVRPlugin__BodyJointLocation const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BodyJointLocation(GlobalNamespace__OVRPlugin__BodyJointLocation&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BodyJointLocation& operator=(GlobalNamespace__OVRPlugin__BodyJointLocation const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__BodyJointLocation& operator=(GlobalNamespace__OVRPlugin__BodyJointLocation&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x28};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__BodyJointLocation(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags __declspec(property(get=__get_LocationFlags, put=__set_LocationFlags))  LocationFlags;

constexpr void __set_LocationFlags(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags __get_LocationFlags() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __declspec(property(get=__get_Pose, put=__set_Pose))  Pose;

constexpr void __set_Pose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __get_Pose() const;


// Properties

 bool __declspec(property(get=get_OrientationValid))  OrientationValid;

 bool __declspec(property(get=get_PositionValid))  PositionValid;

 bool __declspec(property(get=get_OrientationTracked))  OrientationTracked;

 bool __declspec(property(get=get_PositionTracked))  PositionTracked;


// Methods

/// @brief Method get_OrientationValid addr 0x2622404 size 0xc virtual false final false
 bool get_OrientationValid() ;

/// @brief Method get_PositionValid addr 0x2622410 size 0xc virtual false final false
 bool get_PositionValid() ;

/// @brief Method get_OrientationTracked addr 0x262241c size 0xc virtual false final false
 bool get_OrientationTracked() ;

/// @brief Method get_PositionTracked addr 0x2622428 size 0xc virtual false final false
 bool get_PositionTracked() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::BodyState
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8695))
// CS Name: OVRPlugin::BodyState
struct CORDL_TYPE GlobalNamespace__OVRPlugin__BodyState : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "JointLocations", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation>", modifiers: "", def_value: None }, CppParam { name: "Confidence", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "SkeletonChangedCount", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__BodyState(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation> JointLocations, float_t Confidence, uint32_t SkeletonChangedCount, double_t Time) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__BodyState(GlobalNamespace__OVRPlugin__BodyState const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BodyState(GlobalNamespace__OVRPlugin__BodyState&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BodyState& operator=(GlobalNamespace__OVRPlugin__BodyState const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__BodyState& operator=(GlobalNamespace__OVRPlugin__BodyState&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x18};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__BodyState(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation> __declspec(property(get=__get_JointLocations, put=__set_JointLocations))  JointLocations;

constexpr void __set_JointLocations(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation> __get_JointLocations() const;

 float_t __declspec(property(get=__get_Confidence, put=__set_Confidence))  Confidence;

constexpr void __set_Confidence(float_t value) ;

constexpr float_t __get_Confidence() const;

 uint32_t __declspec(property(get=__get_SkeletonChangedCount, put=__set_SkeletonChangedCount))  SkeletonChangedCount;

constexpr void __set_SkeletonChangedCount(uint32_t value) ;

constexpr uint32_t __get_SkeletonChangedCount() const;

 double_t __declspec(property(get=__get_Time, put=__set_Time))  Time;

constexpr void __set_Time(double_t value) ;

constexpr double_t __get_Time() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::BodyStateInternal
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8696))
// CS Name: OVRPlugin::BodyStateInternal
struct CORDL_TYPE GlobalNamespace__OVRPlugin__BodyStateInternal : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "IsActive", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: None }, CppParam { name: "Confidence", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "SkeletonChangedCount", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: None }, CppParam { name: "JointLocation_0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_2", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_3", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_4", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_5", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_6", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_7", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_8", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_9", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_10", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_11", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_12", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_13", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_14", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_15", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_16", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_17", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_18", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_19", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_20", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_21", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_22", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_23", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_24", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_25", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_26", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_27", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_28", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_29", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_30", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_31", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_32", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_33", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_34", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_35", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_36", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_37", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_38", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_39", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_40", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_41", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_42", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_43", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_44", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_45", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_46", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_47", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_48", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_49", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_50", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_51", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_52", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_53", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_54", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_55", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_56", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_57", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_58", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_59", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_60", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_61", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_62", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_63", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_64", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_65", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_66", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_67", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_68", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }, CppParam { name: "JointLocation_69", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__BodyStateInternal(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool IsActive, float_t Confidence, uint32_t SkeletonChangedCount, double_t Time, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_0, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_1, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_2, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_3, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_4, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_5, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_6, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_7, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_8, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_9, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_10, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_11, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_12, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_13, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_14, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_15, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_16, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_17, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_18, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_19, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_20, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_21, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_22, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_23, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_24, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_25, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_26, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_27, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_28, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_29, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_30, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_31, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_32, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_33, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_34, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_35, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_36, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_37, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_38, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_39, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_40, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_41, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_42, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_43, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_44, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_45, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_46, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_47, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_48, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_49, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_50, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_51, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_52, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_53, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_54, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_55, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_56, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_57, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_58, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_59, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_60, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_61, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_62, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_63, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_64, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_65, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_66, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_67, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_68, GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation JointLocation_69) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__BodyStateInternal(GlobalNamespace__OVRPlugin__BodyStateInternal const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BodyStateInternal(GlobalNamespace__OVRPlugin__BodyStateInternal&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__BodyStateInternal& operator=(GlobalNamespace__OVRPlugin__BodyStateInternal const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__BodyStateInternal& operator=(GlobalNamespace__OVRPlugin__BodyStateInternal&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0xb08};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__BodyStateInternal(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __declspec(property(get=__get_IsActive, put=__set_IsActive))  IsActive;

constexpr void __set_IsActive(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __get_IsActive() const;

 float_t __declspec(property(get=__get_Confidence, put=__set_Confidence))  Confidence;

constexpr void __set_Confidence(float_t value) ;

constexpr float_t __get_Confidence() const;

 uint32_t __declspec(property(get=__get_SkeletonChangedCount, put=__set_SkeletonChangedCount))  SkeletonChangedCount;

constexpr void __set_SkeletonChangedCount(uint32_t value) ;

constexpr uint32_t __get_SkeletonChangedCount() const;

 double_t __declspec(property(get=__get_Time, put=__set_Time))  Time;

constexpr void __set_Time(double_t value) ;

constexpr double_t __get_Time() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_0, put=__set_JointLocation_0))  JointLocation_0;

constexpr void __set_JointLocation_0(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_0() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_1, put=__set_JointLocation_1))  JointLocation_1;

constexpr void __set_JointLocation_1(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_1() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_2, put=__set_JointLocation_2))  JointLocation_2;

constexpr void __set_JointLocation_2(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_2() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_3, put=__set_JointLocation_3))  JointLocation_3;

constexpr void __set_JointLocation_3(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_3() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_4, put=__set_JointLocation_4))  JointLocation_4;

constexpr void __set_JointLocation_4(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_4() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_5, put=__set_JointLocation_5))  JointLocation_5;

constexpr void __set_JointLocation_5(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_5() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_6, put=__set_JointLocation_6))  JointLocation_6;

constexpr void __set_JointLocation_6(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_6() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_7, put=__set_JointLocation_7))  JointLocation_7;

constexpr void __set_JointLocation_7(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_7() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_8, put=__set_JointLocation_8))  JointLocation_8;

constexpr void __set_JointLocation_8(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_8() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_9, put=__set_JointLocation_9))  JointLocation_9;

constexpr void __set_JointLocation_9(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_9() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_10, put=__set_JointLocation_10))  JointLocation_10;

constexpr void __set_JointLocation_10(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_10() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_11, put=__set_JointLocation_11))  JointLocation_11;

constexpr void __set_JointLocation_11(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_11() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_12, put=__set_JointLocation_12))  JointLocation_12;

constexpr void __set_JointLocation_12(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_12() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_13, put=__set_JointLocation_13))  JointLocation_13;

constexpr void __set_JointLocation_13(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_13() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_14, put=__set_JointLocation_14))  JointLocation_14;

constexpr void __set_JointLocation_14(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_14() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_15, put=__set_JointLocation_15))  JointLocation_15;

constexpr void __set_JointLocation_15(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_15() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_16, put=__set_JointLocation_16))  JointLocation_16;

constexpr void __set_JointLocation_16(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_16() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_17, put=__set_JointLocation_17))  JointLocation_17;

constexpr void __set_JointLocation_17(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_17() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_18, put=__set_JointLocation_18))  JointLocation_18;

constexpr void __set_JointLocation_18(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_18() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_19, put=__set_JointLocation_19))  JointLocation_19;

constexpr void __set_JointLocation_19(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_19() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_20, put=__set_JointLocation_20))  JointLocation_20;

constexpr void __set_JointLocation_20(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_20() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_21, put=__set_JointLocation_21))  JointLocation_21;

constexpr void __set_JointLocation_21(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_21() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_22, put=__set_JointLocation_22))  JointLocation_22;

constexpr void __set_JointLocation_22(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_22() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_23, put=__set_JointLocation_23))  JointLocation_23;

constexpr void __set_JointLocation_23(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_23() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_24, put=__set_JointLocation_24))  JointLocation_24;

constexpr void __set_JointLocation_24(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_24() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_25, put=__set_JointLocation_25))  JointLocation_25;

constexpr void __set_JointLocation_25(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_25() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_26, put=__set_JointLocation_26))  JointLocation_26;

constexpr void __set_JointLocation_26(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_26() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_27, put=__set_JointLocation_27))  JointLocation_27;

constexpr void __set_JointLocation_27(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_27() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_28, put=__set_JointLocation_28))  JointLocation_28;

constexpr void __set_JointLocation_28(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_28() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_29, put=__set_JointLocation_29))  JointLocation_29;

constexpr void __set_JointLocation_29(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_29() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_30, put=__set_JointLocation_30))  JointLocation_30;

constexpr void __set_JointLocation_30(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_30() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_31, put=__set_JointLocation_31))  JointLocation_31;

constexpr void __set_JointLocation_31(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_31() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_32, put=__set_JointLocation_32))  JointLocation_32;

constexpr void __set_JointLocation_32(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_32() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_33, put=__set_JointLocation_33))  JointLocation_33;

constexpr void __set_JointLocation_33(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_33() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_34, put=__set_JointLocation_34))  JointLocation_34;

constexpr void __set_JointLocation_34(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_34() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_35, put=__set_JointLocation_35))  JointLocation_35;

constexpr void __set_JointLocation_35(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_35() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_36, put=__set_JointLocation_36))  JointLocation_36;

constexpr void __set_JointLocation_36(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_36() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_37, put=__set_JointLocation_37))  JointLocation_37;

constexpr void __set_JointLocation_37(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_37() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_38, put=__set_JointLocation_38))  JointLocation_38;

constexpr void __set_JointLocation_38(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_38() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_39, put=__set_JointLocation_39))  JointLocation_39;

constexpr void __set_JointLocation_39(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_39() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_40, put=__set_JointLocation_40))  JointLocation_40;

constexpr void __set_JointLocation_40(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_40() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_41, put=__set_JointLocation_41))  JointLocation_41;

constexpr void __set_JointLocation_41(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_41() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_42, put=__set_JointLocation_42))  JointLocation_42;

constexpr void __set_JointLocation_42(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_42() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_43, put=__set_JointLocation_43))  JointLocation_43;

constexpr void __set_JointLocation_43(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_43() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_44, put=__set_JointLocation_44))  JointLocation_44;

constexpr void __set_JointLocation_44(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_44() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_45, put=__set_JointLocation_45))  JointLocation_45;

constexpr void __set_JointLocation_45(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_45() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_46, put=__set_JointLocation_46))  JointLocation_46;

constexpr void __set_JointLocation_46(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_46() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_47, put=__set_JointLocation_47))  JointLocation_47;

constexpr void __set_JointLocation_47(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_47() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_48, put=__set_JointLocation_48))  JointLocation_48;

constexpr void __set_JointLocation_48(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_48() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_49, put=__set_JointLocation_49))  JointLocation_49;

constexpr void __set_JointLocation_49(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_49() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_50, put=__set_JointLocation_50))  JointLocation_50;

constexpr void __set_JointLocation_50(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_50() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_51, put=__set_JointLocation_51))  JointLocation_51;

constexpr void __set_JointLocation_51(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_51() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_52, put=__set_JointLocation_52))  JointLocation_52;

constexpr void __set_JointLocation_52(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_52() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_53, put=__set_JointLocation_53))  JointLocation_53;

constexpr void __set_JointLocation_53(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_53() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_54, put=__set_JointLocation_54))  JointLocation_54;

constexpr void __set_JointLocation_54(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_54() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_55, put=__set_JointLocation_55))  JointLocation_55;

constexpr void __set_JointLocation_55(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_55() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_56, put=__set_JointLocation_56))  JointLocation_56;

constexpr void __set_JointLocation_56(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_56() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_57, put=__set_JointLocation_57))  JointLocation_57;

constexpr void __set_JointLocation_57(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_57() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_58, put=__set_JointLocation_58))  JointLocation_58;

constexpr void __set_JointLocation_58(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_58() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_59, put=__set_JointLocation_59))  JointLocation_59;

constexpr void __set_JointLocation_59(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_59() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_60, put=__set_JointLocation_60))  JointLocation_60;

constexpr void __set_JointLocation_60(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_60() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_61, put=__set_JointLocation_61))  JointLocation_61;

constexpr void __set_JointLocation_61(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_61() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_62, put=__set_JointLocation_62))  JointLocation_62;

constexpr void __set_JointLocation_62(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_62() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_63, put=__set_JointLocation_63))  JointLocation_63;

constexpr void __set_JointLocation_63(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_63() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_64, put=__set_JointLocation_64))  JointLocation_64;

constexpr void __set_JointLocation_64(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_64() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_65, put=__set_JointLocation_65))  JointLocation_65;

constexpr void __set_JointLocation_65(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_65() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_66, put=__set_JointLocation_66))  JointLocation_66;

constexpr void __set_JointLocation_66(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_66() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_67, put=__set_JointLocation_67))  JointLocation_67;

constexpr void __set_JointLocation_67(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_67() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_68, put=__set_JointLocation_68))  JointLocation_68;

constexpr void __set_JointLocation_68(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_68() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __declspec(property(get=__get_JointLocation_69, put=__set_JointLocation_69))  JointLocation_69;

constexpr void __set_JointLocation_69(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation __get_JointLocation_69() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::KeyboardState
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8697))
// CS Name: OVRPlugin::KeyboardState
struct CORDL_TYPE GlobalNamespace__OVRPlugin__KeyboardState : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "IsActive", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: None }, CppParam { name: "OrientationValid", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: None }, CppParam { name: "PositionValid", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: None }, CppParam { name: "OrientationTracked", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: None }, CppParam { name: "PositionTracked", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: None }, CppParam { name: "PoseState", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef", modifiers: "", def_value: None }, CppParam { name: "ContrastParameters", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__KeyboardState(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool IsActive, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool OrientationValid, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool PositionValid, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool OrientationTracked, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool PositionTracked, GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef PoseState, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f ContrastParameters) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__KeyboardState(GlobalNamespace__OVRPlugin__KeyboardState const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__KeyboardState(GlobalNamespace__OVRPlugin__KeyboardState&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__KeyboardState& operator=(GlobalNamespace__OVRPlugin__KeyboardState const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__KeyboardState& operator=(GlobalNamespace__OVRPlugin__KeyboardState&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x80};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__KeyboardState(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __declspec(property(get=__get_IsActive, put=__set_IsActive))  IsActive;

constexpr void __set_IsActive(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __get_IsActive() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __declspec(property(get=__get_OrientationValid, put=__set_OrientationValid))  OrientationValid;

constexpr void __set_OrientationValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __get_OrientationValid() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __declspec(property(get=__get_PositionValid, put=__set_PositionValid))  PositionValid;

constexpr void __set_PositionValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __get_PositionValid() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __declspec(property(get=__get_OrientationTracked, put=__set_OrientationTracked))  OrientationTracked;

constexpr void __set_OrientationTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __get_OrientationTracked() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __declspec(property(get=__get_PositionTracked, put=__set_PositionTracked))  PositionTracked;

constexpr void __set_PositionTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __get_PositionTracked() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef __declspec(property(get=__get_PoseState, put=__set_PoseState))  PoseState;

constexpr void __set_PoseState(GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef __get_PoseState() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f __declspec(property(get=__get_ContrastParameters, put=__set_ContrastParameters))  ContrastParameters;

constexpr void __set_ContrastParameters(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f __get_ContrastParameters() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::KeyboardDescriptionConstants
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8698))
// CS Name: OVRPlugin::KeyboardDescriptionConstants
struct CORDL_TYPE GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants(GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants(GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants& operator=(GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants& operator=(GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants_Unwrapped : int32_t {
__NameMaxLength = 128,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field NameMaxLength offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants const NameMaxLength;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::TrackedKeyboardPresentationStyles
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8699))
// CS Name: OVRPlugin::TrackedKeyboardPresentationStyles
struct CORDL_TYPE GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles(GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles(GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles& operator=(GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles& operator=(GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles_Unwrapped : int32_t {
__Unknown = 0,
__Opaque = 1,
__KeyLabel = 2,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Unknown offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles const Unknown;

/// @brief Field Opaque offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles const Opaque;

/// @brief Field KeyLabel offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles const KeyLabel;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::TrackedKeyboardFlags
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8700))
// CS Name: OVRPlugin::TrackedKeyboardFlags
struct CORDL_TYPE GlobalNamespace__OVRPlugin__TrackedKeyboardFlags : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardFlags(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardFlags(GlobalNamespace__OVRPlugin__TrackedKeyboardFlags const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardFlags(GlobalNamespace__OVRPlugin__TrackedKeyboardFlags&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardFlags& operator=(GlobalNamespace__OVRPlugin__TrackedKeyboardFlags const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardFlags& operator=(GlobalNamespace__OVRPlugin__TrackedKeyboardFlags&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__TrackedKeyboardFlags(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__TrackedKeyboardFlags_Unwrapped : int32_t {
__Exists = 1,
__Local = 2,
__Remote = 4,
__Connected = 8,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__TrackedKeyboardFlags_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__TrackedKeyboardFlags_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Exists offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags const Exists;

/// @brief Field Local offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags const Local;

/// @brief Field Remote offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags const Remote;

/// @brief Field Connected offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags const Connected;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::TrackedKeyboardQueryFlags
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8701))
// CS Name: OVRPlugin::TrackedKeyboardQueryFlags
struct CORDL_TYPE GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags(GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags(GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags& operator=(GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags& operator=(GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags_Unwrapped : int32_t {
__Local = 2,
__Remote = 4,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Local offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags const Local;

/// @brief Field Remote offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags const Remote;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::KeyboardDescription
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8702))
// CS Name: OVRPlugin::KeyboardDescription
struct CORDL_TYPE GlobalNamespace__OVRPlugin__KeyboardDescription : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Name", ty: "::ArrayW<uint8_t>", modifiers: "", def_value: None }, CppParam { name: "TrackedKeyboardId", ty: "uint64_t", modifiers: "", def_value: None }, CppParam { name: "Dimensions", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f", modifiers: "", def_value: None }, CppParam { name: "KeyboardFlags", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags", modifiers: "", def_value: None }, CppParam { name: "SupportedPresentationStyles", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__KeyboardDescription(::ArrayW<uint8_t> Name, uint64_t TrackedKeyboardId, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f Dimensions, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags KeyboardFlags, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles SupportedPresentationStyles) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__KeyboardDescription(GlobalNamespace__OVRPlugin__KeyboardDescription const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__KeyboardDescription(GlobalNamespace__OVRPlugin__KeyboardDescription&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__KeyboardDescription& operator=(GlobalNamespace__OVRPlugin__KeyboardDescription const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__KeyboardDescription& operator=(GlobalNamespace__OVRPlugin__KeyboardDescription&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x28};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__KeyboardDescription(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 ::ArrayW<uint8_t> __declspec(property(get=__get_Name, put=__set_Name))  Name;

constexpr void __set_Name(::ArrayW<uint8_t> value) ;

constexpr ::ArrayW<uint8_t> __get_Name() const;

 uint64_t __declspec(property(get=__get_TrackedKeyboardId, put=__set_TrackedKeyboardId))  TrackedKeyboardId;

constexpr void __set_TrackedKeyboardId(uint64_t value) ;

constexpr uint64_t __get_TrackedKeyboardId() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __declspec(property(get=__get_Dimensions, put=__set_Dimensions))  Dimensions;

constexpr void __set_Dimensions(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f __get_Dimensions() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags __declspec(property(get=__get_KeyboardFlags, put=__set_KeyboardFlags))  KeyboardFlags;

constexpr void __set_KeyboardFlags(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags __get_KeyboardFlags() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles __declspec(property(get=__get_SupportedPresentationStyles, put=__set_SupportedPresentationStyles))  SupportedPresentationStyles;

constexpr void __set_SupportedPresentationStyles(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles __get_SupportedPresentationStyles() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::FaceExpressionStatus
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8703))
// CS Name: OVRPlugin::FaceExpressionStatus
struct CORDL_TYPE GlobalNamespace__OVRPlugin__FaceExpressionStatus : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "IsValid", ty: "bool", modifiers: "", def_value: None }, CppParam { name: "IsEyeFollowingBlendshapesValid", ty: "bool", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__FaceExpressionStatus(bool IsValid, bool IsEyeFollowingBlendshapesValid) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__FaceExpressionStatus(GlobalNamespace__OVRPlugin__FaceExpressionStatus const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FaceExpressionStatus(GlobalNamespace__OVRPlugin__FaceExpressionStatus&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FaceExpressionStatus& operator=(GlobalNamespace__OVRPlugin__FaceExpressionStatus const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__FaceExpressionStatus& operator=(GlobalNamespace__OVRPlugin__FaceExpressionStatus&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x2};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__FaceExpressionStatus(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 bool __declspec(property(get=__get_IsValid, put=__set_IsValid))  IsValid;

constexpr void __set_IsValid(bool value) ;

constexpr bool __get_IsValid() const;

 bool __declspec(property(get=__get_IsEyeFollowingBlendshapesValid, put=__set_IsEyeFollowingBlendshapesValid))  IsEyeFollowingBlendshapesValid;

constexpr void __set_IsEyeFollowingBlendshapesValid(bool value) ;

constexpr bool __get_IsEyeFollowingBlendshapesValid() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::FaceState
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8704))
// CS Name: OVRPlugin::FaceState
struct CORDL_TYPE GlobalNamespace__OVRPlugin__FaceState : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "ExpressionWeights", ty: "::ArrayW<float_t>", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeightConfidences", ty: "::ArrayW<float_t>", modifiers: "", def_value: None }, CppParam { name: "Status", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus", modifiers: "", def_value: None }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__FaceState(::ArrayW<float_t> ExpressionWeights, ::ArrayW<float_t> ExpressionWeightConfidences, GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus Status, double_t Time) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__FaceState(GlobalNamespace__OVRPlugin__FaceState const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FaceState(GlobalNamespace__OVRPlugin__FaceState&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FaceState& operator=(GlobalNamespace__OVRPlugin__FaceState const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__FaceState& operator=(GlobalNamespace__OVRPlugin__FaceState&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x20};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__FaceState(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 ::ArrayW<float_t> __declspec(property(get=__get_ExpressionWeights, put=__set_ExpressionWeights))  ExpressionWeights;

constexpr void __set_ExpressionWeights(::ArrayW<float_t> value) ;

constexpr ::ArrayW<float_t> __get_ExpressionWeights() const;

 ::ArrayW<float_t> __declspec(property(get=__get_ExpressionWeightConfidences, put=__set_ExpressionWeightConfidences))  ExpressionWeightConfidences;

constexpr void __set_ExpressionWeightConfidences(::ArrayW<float_t> value) ;

constexpr ::ArrayW<float_t> __get_ExpressionWeightConfidences() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus __declspec(property(get=__get_Status, put=__set_Status))  Status;

constexpr void __set_Status(GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus __get_Status() const;

 double_t __declspec(property(get=__get_Time, put=__set_Time))  Time;

constexpr void __set_Time(double_t value) ;

constexpr double_t __get_Time() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::FaceExpressionStatusInternal
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8705))
// CS Name: OVRPlugin::FaceExpressionStatusInternal
struct CORDL_TYPE GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "IsValid", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: None }, CppParam { name: "IsEyeFollowingBlendshapesValid", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool IsValid, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool IsEyeFollowingBlendshapesValid) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal(GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal(GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal& operator=(GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal& operator=(GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x8};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __declspec(property(get=__get_IsValid, put=__set_IsValid))  IsValid;

constexpr void __set_IsValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __get_IsValid() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __declspec(property(get=__get_IsEyeFollowingBlendshapesValid, put=__set_IsEyeFollowingBlendshapesValid))  IsEyeFollowingBlendshapesValid;

constexpr void __set_IsEyeFollowingBlendshapesValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __get_IsEyeFollowingBlendshapesValid() const;


// Methods

/// @brief Method ToFaceExpressionStatus addr 0x2622434 size 0x1c virtual false final false
 GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus ToFaceExpressionStatus() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::FaceStateInternal
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8706))
// CS Name: OVRPlugin::FaceStateInternal
struct CORDL_TYPE GlobalNamespace__OVRPlugin__FaceStateInternal : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "ExpressionWeights_0", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_1", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_2", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_3", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_4", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_5", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_6", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_7", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_8", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_9", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_10", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_11", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_12", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_13", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_14", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_15", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_16", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_17", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_18", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_19", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_20", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_21", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_22", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_23", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_24", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_25", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_26", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_27", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_28", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_29", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_30", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_31", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_32", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_33", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_34", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_35", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_36", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_37", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_38", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_39", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_40", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_41", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_42", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_43", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_44", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_45", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_46", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_47", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_48", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_49", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_50", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_51", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_52", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_53", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_54", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_55", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_56", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_57", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_58", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_59", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_60", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_61", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_62", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeightConfidences_0", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "ExpressionWeightConfidences_1", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "Status", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal", modifiers: "", def_value: None }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__FaceStateInternal(float_t ExpressionWeights_0, float_t ExpressionWeights_1, float_t ExpressionWeights_2, float_t ExpressionWeights_3, float_t ExpressionWeights_4, float_t ExpressionWeights_5, float_t ExpressionWeights_6, float_t ExpressionWeights_7, float_t ExpressionWeights_8, float_t ExpressionWeights_9, float_t ExpressionWeights_10, float_t ExpressionWeights_11, float_t ExpressionWeights_12, float_t ExpressionWeights_13, float_t ExpressionWeights_14, float_t ExpressionWeights_15, float_t ExpressionWeights_16, float_t ExpressionWeights_17, float_t ExpressionWeights_18, float_t ExpressionWeights_19, float_t ExpressionWeights_20, float_t ExpressionWeights_21, float_t ExpressionWeights_22, float_t ExpressionWeights_23, float_t ExpressionWeights_24, float_t ExpressionWeights_25, float_t ExpressionWeights_26, float_t ExpressionWeights_27, float_t ExpressionWeights_28, float_t ExpressionWeights_29, float_t ExpressionWeights_30, float_t ExpressionWeights_31, float_t ExpressionWeights_32, float_t ExpressionWeights_33, float_t ExpressionWeights_34, float_t ExpressionWeights_35, float_t ExpressionWeights_36, float_t ExpressionWeights_37, float_t ExpressionWeights_38, float_t ExpressionWeights_39, float_t ExpressionWeights_40, float_t ExpressionWeights_41, float_t ExpressionWeights_42, float_t ExpressionWeights_43, float_t ExpressionWeights_44, float_t ExpressionWeights_45, float_t ExpressionWeights_46, float_t ExpressionWeights_47, float_t ExpressionWeights_48, float_t ExpressionWeights_49, float_t ExpressionWeights_50, float_t ExpressionWeights_51, float_t ExpressionWeights_52, float_t ExpressionWeights_53, float_t ExpressionWeights_54, float_t ExpressionWeights_55, float_t ExpressionWeights_56, float_t ExpressionWeights_57, float_t ExpressionWeights_58, float_t ExpressionWeights_59, float_t ExpressionWeights_60, float_t ExpressionWeights_61, float_t ExpressionWeights_62, float_t ExpressionWeightConfidences_0, float_t ExpressionWeightConfidences_1, GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal Status, double_t Time) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__FaceStateInternal(GlobalNamespace__OVRPlugin__FaceStateInternal const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FaceStateInternal(GlobalNamespace__OVRPlugin__FaceStateInternal&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FaceStateInternal& operator=(GlobalNamespace__OVRPlugin__FaceStateInternal const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__FaceStateInternal& operator=(GlobalNamespace__OVRPlugin__FaceStateInternal&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x118};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__FaceStateInternal(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 float_t __declspec(property(get=__get_ExpressionWeights_0, put=__set_ExpressionWeights_0))  ExpressionWeights_0;

constexpr void __set_ExpressionWeights_0(float_t value) ;

constexpr float_t __get_ExpressionWeights_0() const;

 float_t __declspec(property(get=__get_ExpressionWeights_1, put=__set_ExpressionWeights_1))  ExpressionWeights_1;

constexpr void __set_ExpressionWeights_1(float_t value) ;

constexpr float_t __get_ExpressionWeights_1() const;

 float_t __declspec(property(get=__get_ExpressionWeights_2, put=__set_ExpressionWeights_2))  ExpressionWeights_2;

constexpr void __set_ExpressionWeights_2(float_t value) ;

constexpr float_t __get_ExpressionWeights_2() const;

 float_t __declspec(property(get=__get_ExpressionWeights_3, put=__set_ExpressionWeights_3))  ExpressionWeights_3;

constexpr void __set_ExpressionWeights_3(float_t value) ;

constexpr float_t __get_ExpressionWeights_3() const;

 float_t __declspec(property(get=__get_ExpressionWeights_4, put=__set_ExpressionWeights_4))  ExpressionWeights_4;

constexpr void __set_ExpressionWeights_4(float_t value) ;

constexpr float_t __get_ExpressionWeights_4() const;

 float_t __declspec(property(get=__get_ExpressionWeights_5, put=__set_ExpressionWeights_5))  ExpressionWeights_5;

constexpr void __set_ExpressionWeights_5(float_t value) ;

constexpr float_t __get_ExpressionWeights_5() const;

 float_t __declspec(property(get=__get_ExpressionWeights_6, put=__set_ExpressionWeights_6))  ExpressionWeights_6;

constexpr void __set_ExpressionWeights_6(float_t value) ;

constexpr float_t __get_ExpressionWeights_6() const;

 float_t __declspec(property(get=__get_ExpressionWeights_7, put=__set_ExpressionWeights_7))  ExpressionWeights_7;

constexpr void __set_ExpressionWeights_7(float_t value) ;

constexpr float_t __get_ExpressionWeights_7() const;

 float_t __declspec(property(get=__get_ExpressionWeights_8, put=__set_ExpressionWeights_8))  ExpressionWeights_8;

constexpr void __set_ExpressionWeights_8(float_t value) ;

constexpr float_t __get_ExpressionWeights_8() const;

 float_t __declspec(property(get=__get_ExpressionWeights_9, put=__set_ExpressionWeights_9))  ExpressionWeights_9;

constexpr void __set_ExpressionWeights_9(float_t value) ;

constexpr float_t __get_ExpressionWeights_9() const;

 float_t __declspec(property(get=__get_ExpressionWeights_10, put=__set_ExpressionWeights_10))  ExpressionWeights_10;

constexpr void __set_ExpressionWeights_10(float_t value) ;

constexpr float_t __get_ExpressionWeights_10() const;

 float_t __declspec(property(get=__get_ExpressionWeights_11, put=__set_ExpressionWeights_11))  ExpressionWeights_11;

constexpr void __set_ExpressionWeights_11(float_t value) ;

constexpr float_t __get_ExpressionWeights_11() const;

 float_t __declspec(property(get=__get_ExpressionWeights_12, put=__set_ExpressionWeights_12))  ExpressionWeights_12;

constexpr void __set_ExpressionWeights_12(float_t value) ;

constexpr float_t __get_ExpressionWeights_12() const;

 float_t __declspec(property(get=__get_ExpressionWeights_13, put=__set_ExpressionWeights_13))  ExpressionWeights_13;

constexpr void __set_ExpressionWeights_13(float_t value) ;

constexpr float_t __get_ExpressionWeights_13() const;

 float_t __declspec(property(get=__get_ExpressionWeights_14, put=__set_ExpressionWeights_14))  ExpressionWeights_14;

constexpr void __set_ExpressionWeights_14(float_t value) ;

constexpr float_t __get_ExpressionWeights_14() const;

 float_t __declspec(property(get=__get_ExpressionWeights_15, put=__set_ExpressionWeights_15))  ExpressionWeights_15;

constexpr void __set_ExpressionWeights_15(float_t value) ;

constexpr float_t __get_ExpressionWeights_15() const;

 float_t __declspec(property(get=__get_ExpressionWeights_16, put=__set_ExpressionWeights_16))  ExpressionWeights_16;

constexpr void __set_ExpressionWeights_16(float_t value) ;

constexpr float_t __get_ExpressionWeights_16() const;

 float_t __declspec(property(get=__get_ExpressionWeights_17, put=__set_ExpressionWeights_17))  ExpressionWeights_17;

constexpr void __set_ExpressionWeights_17(float_t value) ;

constexpr float_t __get_ExpressionWeights_17() const;

 float_t __declspec(property(get=__get_ExpressionWeights_18, put=__set_ExpressionWeights_18))  ExpressionWeights_18;

constexpr void __set_ExpressionWeights_18(float_t value) ;

constexpr float_t __get_ExpressionWeights_18() const;

 float_t __declspec(property(get=__get_ExpressionWeights_19, put=__set_ExpressionWeights_19))  ExpressionWeights_19;

constexpr void __set_ExpressionWeights_19(float_t value) ;

constexpr float_t __get_ExpressionWeights_19() const;

 float_t __declspec(property(get=__get_ExpressionWeights_20, put=__set_ExpressionWeights_20))  ExpressionWeights_20;

constexpr void __set_ExpressionWeights_20(float_t value) ;

constexpr float_t __get_ExpressionWeights_20() const;

 float_t __declspec(property(get=__get_ExpressionWeights_21, put=__set_ExpressionWeights_21))  ExpressionWeights_21;

constexpr void __set_ExpressionWeights_21(float_t value) ;

constexpr float_t __get_ExpressionWeights_21() const;

 float_t __declspec(property(get=__get_ExpressionWeights_22, put=__set_ExpressionWeights_22))  ExpressionWeights_22;

constexpr void __set_ExpressionWeights_22(float_t value) ;

constexpr float_t __get_ExpressionWeights_22() const;

 float_t __declspec(property(get=__get_ExpressionWeights_23, put=__set_ExpressionWeights_23))  ExpressionWeights_23;

constexpr void __set_ExpressionWeights_23(float_t value) ;

constexpr float_t __get_ExpressionWeights_23() const;

 float_t __declspec(property(get=__get_ExpressionWeights_24, put=__set_ExpressionWeights_24))  ExpressionWeights_24;

constexpr void __set_ExpressionWeights_24(float_t value) ;

constexpr float_t __get_ExpressionWeights_24() const;

 float_t __declspec(property(get=__get_ExpressionWeights_25, put=__set_ExpressionWeights_25))  ExpressionWeights_25;

constexpr void __set_ExpressionWeights_25(float_t value) ;

constexpr float_t __get_ExpressionWeights_25() const;

 float_t __declspec(property(get=__get_ExpressionWeights_26, put=__set_ExpressionWeights_26))  ExpressionWeights_26;

constexpr void __set_ExpressionWeights_26(float_t value) ;

constexpr float_t __get_ExpressionWeights_26() const;

 float_t __declspec(property(get=__get_ExpressionWeights_27, put=__set_ExpressionWeights_27))  ExpressionWeights_27;

constexpr void __set_ExpressionWeights_27(float_t value) ;

constexpr float_t __get_ExpressionWeights_27() const;

 float_t __declspec(property(get=__get_ExpressionWeights_28, put=__set_ExpressionWeights_28))  ExpressionWeights_28;

constexpr void __set_ExpressionWeights_28(float_t value) ;

constexpr float_t __get_ExpressionWeights_28() const;

 float_t __declspec(property(get=__get_ExpressionWeights_29, put=__set_ExpressionWeights_29))  ExpressionWeights_29;

constexpr void __set_ExpressionWeights_29(float_t value) ;

constexpr float_t __get_ExpressionWeights_29() const;

 float_t __declspec(property(get=__get_ExpressionWeights_30, put=__set_ExpressionWeights_30))  ExpressionWeights_30;

constexpr void __set_ExpressionWeights_30(float_t value) ;

constexpr float_t __get_ExpressionWeights_30() const;

 float_t __declspec(property(get=__get_ExpressionWeights_31, put=__set_ExpressionWeights_31))  ExpressionWeights_31;

constexpr void __set_ExpressionWeights_31(float_t value) ;

constexpr float_t __get_ExpressionWeights_31() const;

 float_t __declspec(property(get=__get_ExpressionWeights_32, put=__set_ExpressionWeights_32))  ExpressionWeights_32;

constexpr void __set_ExpressionWeights_32(float_t value) ;

constexpr float_t __get_ExpressionWeights_32() const;

 float_t __declspec(property(get=__get_ExpressionWeights_33, put=__set_ExpressionWeights_33))  ExpressionWeights_33;

constexpr void __set_ExpressionWeights_33(float_t value) ;

constexpr float_t __get_ExpressionWeights_33() const;

 float_t __declspec(property(get=__get_ExpressionWeights_34, put=__set_ExpressionWeights_34))  ExpressionWeights_34;

constexpr void __set_ExpressionWeights_34(float_t value) ;

constexpr float_t __get_ExpressionWeights_34() const;

 float_t __declspec(property(get=__get_ExpressionWeights_35, put=__set_ExpressionWeights_35))  ExpressionWeights_35;

constexpr void __set_ExpressionWeights_35(float_t value) ;

constexpr float_t __get_ExpressionWeights_35() const;

 float_t __declspec(property(get=__get_ExpressionWeights_36, put=__set_ExpressionWeights_36))  ExpressionWeights_36;

constexpr void __set_ExpressionWeights_36(float_t value) ;

constexpr float_t __get_ExpressionWeights_36() const;

 float_t __declspec(property(get=__get_ExpressionWeights_37, put=__set_ExpressionWeights_37))  ExpressionWeights_37;

constexpr void __set_ExpressionWeights_37(float_t value) ;

constexpr float_t __get_ExpressionWeights_37() const;

 float_t __declspec(property(get=__get_ExpressionWeights_38, put=__set_ExpressionWeights_38))  ExpressionWeights_38;

constexpr void __set_ExpressionWeights_38(float_t value) ;

constexpr float_t __get_ExpressionWeights_38() const;

 float_t __declspec(property(get=__get_ExpressionWeights_39, put=__set_ExpressionWeights_39))  ExpressionWeights_39;

constexpr void __set_ExpressionWeights_39(float_t value) ;

constexpr float_t __get_ExpressionWeights_39() const;

 float_t __declspec(property(get=__get_ExpressionWeights_40, put=__set_ExpressionWeights_40))  ExpressionWeights_40;

constexpr void __set_ExpressionWeights_40(float_t value) ;

constexpr float_t __get_ExpressionWeights_40() const;

 float_t __declspec(property(get=__get_ExpressionWeights_41, put=__set_ExpressionWeights_41))  ExpressionWeights_41;

constexpr void __set_ExpressionWeights_41(float_t value) ;

constexpr float_t __get_ExpressionWeights_41() const;

 float_t __declspec(property(get=__get_ExpressionWeights_42, put=__set_ExpressionWeights_42))  ExpressionWeights_42;

constexpr void __set_ExpressionWeights_42(float_t value) ;

constexpr float_t __get_ExpressionWeights_42() const;

 float_t __declspec(property(get=__get_ExpressionWeights_43, put=__set_ExpressionWeights_43))  ExpressionWeights_43;

constexpr void __set_ExpressionWeights_43(float_t value) ;

constexpr float_t __get_ExpressionWeights_43() const;

 float_t __declspec(property(get=__get_ExpressionWeights_44, put=__set_ExpressionWeights_44))  ExpressionWeights_44;

constexpr void __set_ExpressionWeights_44(float_t value) ;

constexpr float_t __get_ExpressionWeights_44() const;

 float_t __declspec(property(get=__get_ExpressionWeights_45, put=__set_ExpressionWeights_45))  ExpressionWeights_45;

constexpr void __set_ExpressionWeights_45(float_t value) ;

constexpr float_t __get_ExpressionWeights_45() const;

 float_t __declspec(property(get=__get_ExpressionWeights_46, put=__set_ExpressionWeights_46))  ExpressionWeights_46;

constexpr void __set_ExpressionWeights_46(float_t value) ;

constexpr float_t __get_ExpressionWeights_46() const;

 float_t __declspec(property(get=__get_ExpressionWeights_47, put=__set_ExpressionWeights_47))  ExpressionWeights_47;

constexpr void __set_ExpressionWeights_47(float_t value) ;

constexpr float_t __get_ExpressionWeights_47() const;

 float_t __declspec(property(get=__get_ExpressionWeights_48, put=__set_ExpressionWeights_48))  ExpressionWeights_48;

constexpr void __set_ExpressionWeights_48(float_t value) ;

constexpr float_t __get_ExpressionWeights_48() const;

 float_t __declspec(property(get=__get_ExpressionWeights_49, put=__set_ExpressionWeights_49))  ExpressionWeights_49;

constexpr void __set_ExpressionWeights_49(float_t value) ;

constexpr float_t __get_ExpressionWeights_49() const;

 float_t __declspec(property(get=__get_ExpressionWeights_50, put=__set_ExpressionWeights_50))  ExpressionWeights_50;

constexpr void __set_ExpressionWeights_50(float_t value) ;

constexpr float_t __get_ExpressionWeights_50() const;

 float_t __declspec(property(get=__get_ExpressionWeights_51, put=__set_ExpressionWeights_51))  ExpressionWeights_51;

constexpr void __set_ExpressionWeights_51(float_t value) ;

constexpr float_t __get_ExpressionWeights_51() const;

 float_t __declspec(property(get=__get_ExpressionWeights_52, put=__set_ExpressionWeights_52))  ExpressionWeights_52;

constexpr void __set_ExpressionWeights_52(float_t value) ;

constexpr float_t __get_ExpressionWeights_52() const;

 float_t __declspec(property(get=__get_ExpressionWeights_53, put=__set_ExpressionWeights_53))  ExpressionWeights_53;

constexpr void __set_ExpressionWeights_53(float_t value) ;

constexpr float_t __get_ExpressionWeights_53() const;

 float_t __declspec(property(get=__get_ExpressionWeights_54, put=__set_ExpressionWeights_54))  ExpressionWeights_54;

constexpr void __set_ExpressionWeights_54(float_t value) ;

constexpr float_t __get_ExpressionWeights_54() const;

 float_t __declspec(property(get=__get_ExpressionWeights_55, put=__set_ExpressionWeights_55))  ExpressionWeights_55;

constexpr void __set_ExpressionWeights_55(float_t value) ;

constexpr float_t __get_ExpressionWeights_55() const;

 float_t __declspec(property(get=__get_ExpressionWeights_56, put=__set_ExpressionWeights_56))  ExpressionWeights_56;

constexpr void __set_ExpressionWeights_56(float_t value) ;

constexpr float_t __get_ExpressionWeights_56() const;

 float_t __declspec(property(get=__get_ExpressionWeights_57, put=__set_ExpressionWeights_57))  ExpressionWeights_57;

constexpr void __set_ExpressionWeights_57(float_t value) ;

constexpr float_t __get_ExpressionWeights_57() const;

 float_t __declspec(property(get=__get_ExpressionWeights_58, put=__set_ExpressionWeights_58))  ExpressionWeights_58;

constexpr void __set_ExpressionWeights_58(float_t value) ;

constexpr float_t __get_ExpressionWeights_58() const;

 float_t __declspec(property(get=__get_ExpressionWeights_59, put=__set_ExpressionWeights_59))  ExpressionWeights_59;

constexpr void __set_ExpressionWeights_59(float_t value) ;

constexpr float_t __get_ExpressionWeights_59() const;

 float_t __declspec(property(get=__get_ExpressionWeights_60, put=__set_ExpressionWeights_60))  ExpressionWeights_60;

constexpr void __set_ExpressionWeights_60(float_t value) ;

constexpr float_t __get_ExpressionWeights_60() const;

 float_t __declspec(property(get=__get_ExpressionWeights_61, put=__set_ExpressionWeights_61))  ExpressionWeights_61;

constexpr void __set_ExpressionWeights_61(float_t value) ;

constexpr float_t __get_ExpressionWeights_61() const;

 float_t __declspec(property(get=__get_ExpressionWeights_62, put=__set_ExpressionWeights_62))  ExpressionWeights_62;

constexpr void __set_ExpressionWeights_62(float_t value) ;

constexpr float_t __get_ExpressionWeights_62() const;

 float_t __declspec(property(get=__get_ExpressionWeightConfidences_0, put=__set_ExpressionWeightConfidences_0))  ExpressionWeightConfidences_0;

constexpr void __set_ExpressionWeightConfidences_0(float_t value) ;

constexpr float_t __get_ExpressionWeightConfidences_0() const;

 float_t __declspec(property(get=__get_ExpressionWeightConfidences_1, put=__set_ExpressionWeightConfidences_1))  ExpressionWeightConfidences_1;

constexpr void __set_ExpressionWeightConfidences_1(float_t value) ;

constexpr float_t __get_ExpressionWeightConfidences_1() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal __declspec(property(get=__get_Status, put=__set_Status))  Status;

constexpr void __set_Status(GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal __get_Status() const;

 double_t __declspec(property(get=__get_Time, put=__set_Time))  Time;

constexpr void __set_Time(double_t value) ;

constexpr double_t __get_Time() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::FaceRegionConfidence
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8707))
// CS Name: OVRPlugin::FaceRegionConfidence
struct CORDL_TYPE GlobalNamespace__OVRPlugin__FaceRegionConfidence : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__FaceRegionConfidence(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__FaceRegionConfidence(GlobalNamespace__OVRPlugin__FaceRegionConfidence const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FaceRegionConfidence(GlobalNamespace__OVRPlugin__FaceRegionConfidence&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FaceRegionConfidence& operator=(GlobalNamespace__OVRPlugin__FaceRegionConfidence const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__FaceRegionConfidence& operator=(GlobalNamespace__OVRPlugin__FaceRegionConfidence&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__FaceRegionConfidence(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__FaceRegionConfidence_Unwrapped : int32_t {
__Lower = 0,
__Upper = 1,
__Max = 2,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__FaceRegionConfidence_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__FaceRegionConfidence_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Lower offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceRegionConfidence const Lower;

/// @brief Field Upper offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceRegionConfidence const Upper;

/// @brief Field Max offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceRegionConfidence const Max;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::FaceExpression
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8708))
// CS Name: OVRPlugin::FaceExpression
struct CORDL_TYPE GlobalNamespace__OVRPlugin__FaceExpression : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__FaceExpression(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__FaceExpression(GlobalNamespace__OVRPlugin__FaceExpression const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FaceExpression(GlobalNamespace__OVRPlugin__FaceExpression&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FaceExpression& operator=(GlobalNamespace__OVRPlugin__FaceExpression const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__FaceExpression& operator=(GlobalNamespace__OVRPlugin__FaceExpression&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__FaceExpression(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__FaceExpression_Unwrapped : int32_t {
__Invalid = -1,
__Brow_Lowerer_L = 0,
__Brow_Lowerer_R = 1,
__Cheek_Puff_L = 2,
__Cheek_Puff_R = 3,
__Cheek_Raiser_L = 4,
__Cheek_Raiser_R = 5,
__Cheek_Suck_L = 6,
__Cheek_Suck_R = 7,
__Chin_Raiser_B = 8,
__Chin_Raiser_T = 9,
__Dimpler_L = 10,
__Dimpler_R = 11,
__Eyes_Closed_L = 12,
__Eyes_Closed_R = 13,
__Eyes_Look_Down_L = 14,
__Eyes_Look_Down_R = 15,
__Eyes_Look_Left_L = 16,
__Eyes_Look_Left_R = 17,
__Eyes_Look_Right_L = 18,
__Eyes_Look_Right_R = 19,
__Eyes_Look_Up_L = 20,
__Eyes_Look_Up_R = 21,
__Inner_Brow_Raiser_L = 22,
__Inner_Brow_Raiser_R = 23,
__Jaw_Drop = 24,
__Jaw_Sideways_Left = 25,
__Jaw_Sideways_Right = 26,
__Jaw_Thrust = 27,
__Lid_Tightener_L = 28,
__Lid_Tightener_R = 29,
__Lip_Corner_Depressor_L = 30,
__Lip_Corner_Depressor_R = 31,
__Lip_Corner_Puller_L = 32,
__Lip_Corner_Puller_R = 33,
__Lip_Funneler_LB = 34,
__Lip_Funneler_LT = 35,
__Lip_Funneler_RB = 36,
__Lip_Funneler_RT = 37,
__Lip_Pressor_L = 38,
__Lip_Pressor_R = 39,
__Lip_Pucker_L = 40,
__Lip_Pucker_R = 41,
__Lip_Stretcher_L = 42,
__Lip_Stretcher_R = 43,
__Lip_Suck_LB = 44,
__Lip_Suck_LT = 45,
__Lip_Suck_RB = 46,
__Lip_Suck_RT = 47,
__Lip_Tightener_L = 48,
__Lip_Tightener_R = 49,
__Lips_Toward = 50,
__Lower_Lip_Depressor_L = 51,
__Lower_Lip_Depressor_R = 52,
__Mouth_Left = 53,
__Mouth_Right = 54,
__Nose_Wrinkler_L = 55,
__Nose_Wrinkler_R = 56,
__Outer_Brow_Raiser_L = 57,
__Outer_Brow_Raiser_R = 58,
__Upper_Lid_Raiser_L = 59,
__Upper_Lid_Raiser_R = 60,
__Upper_Lip_Raiser_L = 61,
__Upper_Lip_Raiser_R = 62,
__Max = 63,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__FaceExpression_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__FaceExpression_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Invalid offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Invalid;

/// @brief Field Brow_Lowerer_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Brow_Lowerer_L;

/// @brief Field Brow_Lowerer_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Brow_Lowerer_R;

/// @brief Field Cheek_Puff_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Cheek_Puff_L;

/// @brief Field Cheek_Puff_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Cheek_Puff_R;

/// @brief Field Cheek_Raiser_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Cheek_Raiser_L;

/// @brief Field Cheek_Raiser_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Cheek_Raiser_R;

/// @brief Field Cheek_Suck_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Cheek_Suck_L;

/// @brief Field Cheek_Suck_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Cheek_Suck_R;

/// @brief Field Chin_Raiser_B offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Chin_Raiser_B;

/// @brief Field Chin_Raiser_T offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Chin_Raiser_T;

/// @brief Field Dimpler_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Dimpler_L;

/// @brief Field Dimpler_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Dimpler_R;

/// @brief Field Eyes_Closed_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Eyes_Closed_L;

/// @brief Field Eyes_Closed_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Eyes_Closed_R;

/// @brief Field Eyes_Look_Down_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Eyes_Look_Down_L;

/// @brief Field Eyes_Look_Down_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Eyes_Look_Down_R;

/// @brief Field Eyes_Look_Left_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Eyes_Look_Left_L;

/// @brief Field Eyes_Look_Left_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Eyes_Look_Left_R;

/// @brief Field Eyes_Look_Right_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Eyes_Look_Right_L;

/// @brief Field Eyes_Look_Right_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Eyes_Look_Right_R;

/// @brief Field Eyes_Look_Up_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Eyes_Look_Up_L;

/// @brief Field Eyes_Look_Up_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Eyes_Look_Up_R;

/// @brief Field Inner_Brow_Raiser_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Inner_Brow_Raiser_L;

/// @brief Field Inner_Brow_Raiser_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Inner_Brow_Raiser_R;

/// @brief Field Jaw_Drop offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Jaw_Drop;

/// @brief Field Jaw_Sideways_Left offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Jaw_Sideways_Left;

/// @brief Field Jaw_Sideways_Right offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Jaw_Sideways_Right;

/// @brief Field Jaw_Thrust offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Jaw_Thrust;

/// @brief Field Lid_Tightener_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lid_Tightener_L;

/// @brief Field Lid_Tightener_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lid_Tightener_R;

/// @brief Field Lip_Corner_Depressor_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Corner_Depressor_L;

/// @brief Field Lip_Corner_Depressor_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Corner_Depressor_R;

/// @brief Field Lip_Corner_Puller_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Corner_Puller_L;

/// @brief Field Lip_Corner_Puller_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Corner_Puller_R;

/// @brief Field Lip_Funneler_LB offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Funneler_LB;

/// @brief Field Lip_Funneler_LT offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Funneler_LT;

/// @brief Field Lip_Funneler_RB offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Funneler_RB;

/// @brief Field Lip_Funneler_RT offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Funneler_RT;

/// @brief Field Lip_Pressor_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Pressor_L;

/// @brief Field Lip_Pressor_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Pressor_R;

/// @brief Field Lip_Pucker_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Pucker_L;

/// @brief Field Lip_Pucker_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Pucker_R;

/// @brief Field Lip_Stretcher_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Stretcher_L;

/// @brief Field Lip_Stretcher_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Stretcher_R;

/// @brief Field Lip_Suck_LB offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Suck_LB;

/// @brief Field Lip_Suck_LT offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Suck_LT;

/// @brief Field Lip_Suck_RB offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Suck_RB;

/// @brief Field Lip_Suck_RT offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Suck_RT;

/// @brief Field Lip_Tightener_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Tightener_L;

/// @brief Field Lip_Tightener_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lip_Tightener_R;

/// @brief Field Lips_Toward offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lips_Toward;

/// @brief Field Lower_Lip_Depressor_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lower_Lip_Depressor_L;

/// @brief Field Lower_Lip_Depressor_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Lower_Lip_Depressor_R;

/// @brief Field Mouth_Left offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Mouth_Left;

/// @brief Field Mouth_Right offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Mouth_Right;

/// @brief Field Nose_Wrinkler_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Nose_Wrinkler_L;

/// @brief Field Nose_Wrinkler_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Nose_Wrinkler_R;

/// @brief Field Outer_Brow_Raiser_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Outer_Brow_Raiser_L;

/// @brief Field Outer_Brow_Raiser_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Outer_Brow_Raiser_R;

/// @brief Field Upper_Lid_Raiser_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Upper_Lid_Raiser_L;

/// @brief Field Upper_Lid_Raiser_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Upper_Lid_Raiser_R;

/// @brief Field Upper_Lip_Raiser_L offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Upper_Lip_Raiser_L;

/// @brief Field Upper_Lip_Raiser_R offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Upper_Lip_Raiser_R;

/// @brief Field Max offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression const Max;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::FaceConstants
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8709))
// CS Name: OVRPlugin::FaceConstants
struct CORDL_TYPE GlobalNamespace__OVRPlugin__FaceConstants : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__FaceConstants(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__FaceConstants(GlobalNamespace__OVRPlugin__FaceConstants const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FaceConstants(GlobalNamespace__OVRPlugin__FaceConstants&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__FaceConstants& operator=(GlobalNamespace__OVRPlugin__FaceConstants const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__FaceConstants& operator=(GlobalNamespace__OVRPlugin__FaceConstants&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__FaceConstants(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__FaceConstants_Unwrapped : int32_t {
__MaxFaceExpressions = 63,
__MaxFaceRegionConfidences = 2,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__FaceConstants_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__FaceConstants_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field MaxFaceExpressions offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceConstants const MaxFaceExpressions;

/// @brief Field MaxFaceRegionConfidences offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceConstants const MaxFaceRegionConfidences;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::EyeGazeState
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8710))
// CS Name: OVRPlugin::EyeGazeState
struct CORDL_TYPE GlobalNamespace__OVRPlugin__EyeGazeState : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Pose", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: None }, CppParam { name: "Confidence", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "_isValid", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Bool", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__EyeGazeState(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef Pose, float_t Confidence, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool _isValid) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__EyeGazeState(GlobalNamespace__OVRPlugin__EyeGazeState const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__EyeGazeState(GlobalNamespace__OVRPlugin__EyeGazeState&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__EyeGazeState& operator=(GlobalNamespace__OVRPlugin__EyeGazeState const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__EyeGazeState& operator=(GlobalNamespace__OVRPlugin__EyeGazeState&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x24};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__EyeGazeState(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __declspec(property(get=__get_Pose, put=__set_Pose))  Pose;

constexpr void __set_Pose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __get_Pose() const;

 float_t __declspec(property(get=__get_Confidence, put=__set_Confidence))  Confidence;

constexpr void __set_Confidence(float_t value) ;

constexpr float_t __get_Confidence() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __declspec(property(get=__get__isValid, put=__set__isValid))  _isValid;

constexpr void __set__isValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Bool __get__isValid() const;


// Properties

 bool __declspec(property(get=get_IsValid))  IsValid;


// Methods

/// @brief Method get_IsValid addr 0x2622450 size 0x10 virtual false final false
 bool get_IsValid() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::EyeGazesState
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8711))
// CS Name: OVRPlugin::EyeGazesState
struct CORDL_TYPE GlobalNamespace__OVRPlugin__EyeGazesState : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "EyeGazes", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState>", modifiers: "", def_value: None }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__EyeGazesState(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState> EyeGazes, double_t Time) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__EyeGazesState(GlobalNamespace__OVRPlugin__EyeGazesState const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__EyeGazesState(GlobalNamespace__OVRPlugin__EyeGazesState&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__EyeGazesState& operator=(GlobalNamespace__OVRPlugin__EyeGazesState const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__EyeGazesState& operator=(GlobalNamespace__OVRPlugin__EyeGazesState&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__EyeGazesState(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState> __declspec(property(get=__get_EyeGazes, put=__set_EyeGazes))  EyeGazes;

constexpr void __set_EyeGazes(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState> __get_EyeGazes() const;

 double_t __declspec(property(get=__get_Time, put=__set_Time))  Time;

constexpr void __set_Time(double_t value) ;

constexpr double_t __get_Time() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::EyeGazesStateInternal
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8712))
// CS Name: OVRPlugin::EyeGazesStateInternal
struct CORDL_TYPE GlobalNamespace__OVRPlugin__EyeGazesStateInternal : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "EyeGazes_0", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState", modifiers: "", def_value: None }, CppParam { name: "EyeGazes_1", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState", modifiers: "", def_value: None }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__EyeGazesStateInternal(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState EyeGazes_0, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState EyeGazes_1, double_t Time) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__EyeGazesStateInternal(GlobalNamespace__OVRPlugin__EyeGazesStateInternal const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__EyeGazesStateInternal(GlobalNamespace__OVRPlugin__EyeGazesStateInternal&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__EyeGazesStateInternal& operator=(GlobalNamespace__OVRPlugin__EyeGazesStateInternal const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__EyeGazesStateInternal& operator=(GlobalNamespace__OVRPlugin__EyeGazesStateInternal&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x50};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__EyeGazesStateInternal(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState __declspec(property(get=__get_EyeGazes_0, put=__set_EyeGazes_0))  EyeGazes_0;

constexpr void __set_EyeGazes_0(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState __get_EyeGazes_0() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState __declspec(property(get=__get_EyeGazes_1, put=__set_EyeGazes_1))  EyeGazes_1;

constexpr void __set_EyeGazes_1(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState __get_EyeGazes_1() const;

 double_t __declspec(property(get=__get_Time, put=__set_Time))  Time;

constexpr void __set_Time(double_t value) ;

constexpr double_t __get_Time() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::ColorSpace
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8713))
// CS Name: OVRPlugin::ColorSpace
struct CORDL_TYPE GlobalNamespace__OVRPlugin__ColorSpace : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__ColorSpace(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__ColorSpace(GlobalNamespace__OVRPlugin__ColorSpace const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__ColorSpace(GlobalNamespace__OVRPlugin__ColorSpace&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__ColorSpace& operator=(GlobalNamespace__OVRPlugin__ColorSpace const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__ColorSpace& operator=(GlobalNamespace__OVRPlugin__ColorSpace&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__ColorSpace(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__ColorSpace_Unwrapped : int32_t {
__Unknown = 0,
__Unmanaged = 1,
__Rec_2020 = 2,
__Rec_709 = 3,
__Rift_CV1 = 4,
__Rift_S = 5,
__Quest = 6,
__P3 = 7,
__Adobe_RGB = 8,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__ColorSpace_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__ColorSpace_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Unknown offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace const Unknown;

/// @brief Field Unmanaged offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace const Unmanaged;

/// @brief Field Rec_2020 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace const Rec_2020;

/// @brief Field Rec_709 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace const Rec_709;

/// @brief Field Rift_CV1 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace const Rift_CV1;

/// @brief Field Rift_S offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace const Rift_S;

/// @brief Field Quest offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace const Quest;

/// @brief Field P3 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace const P3;

/// @brief Field Adobe_RGB offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace const Adobe_RGB;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::EventType
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8714))
// CS Name: OVRPlugin::EventType
struct CORDL_TYPE GlobalNamespace__OVRPlugin__EventType : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__EventType(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__EventType(GlobalNamespace__OVRPlugin__EventType const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__EventType(GlobalNamespace__OVRPlugin__EventType&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__EventType& operator=(GlobalNamespace__OVRPlugin__EventType const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__EventType& operator=(GlobalNamespace__OVRPlugin__EventType&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__EventType(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__EventType_Unwrapped : int32_t {
__Unknown = 0,
__DisplayRefreshRateChanged = 1,
__SpatialAnchorCreateComplete = 49,
__SpaceSetComponentStatusComplete = 50,
__SpaceQueryResults = 51,
__SpaceQueryComplete = 52,
__SpaceSaveComplete = 53,
__SpaceEraseComplete = 54,
__SpaceShareResult = 56,
__SpaceListSaveResult = 57,
__SceneCaptureComplete = 100,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__EventType_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__EventType_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Unknown offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EventType const Unknown;

/// @brief Field DisplayRefreshRateChanged offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EventType const DisplayRefreshRateChanged;

/// @brief Field SpatialAnchorCreateComplete offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EventType const SpatialAnchorCreateComplete;

/// @brief Field SpaceSetComponentStatusComplete offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EventType const SpaceSetComponentStatusComplete;

/// @brief Field SpaceQueryResults offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EventType const SpaceQueryResults;

/// @brief Field SpaceQueryComplete offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EventType const SpaceQueryComplete;

/// @brief Field SpaceSaveComplete offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EventType const SpaceSaveComplete;

/// @brief Field SpaceEraseComplete offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EventType const SpaceEraseComplete;

/// @brief Field SpaceShareResult offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EventType const SpaceShareResult;

/// @brief Field SpaceListSaveResult offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EventType const SpaceListSaveResult;

/// @brief Field SceneCaptureComplete offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__EventType const SceneCaptureComplete;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::EventDataBuffer
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8715))
// CS Name: OVRPlugin::EventDataBuffer
struct CORDL_TYPE GlobalNamespace__OVRPlugin__EventDataBuffer : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "EventType", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__EventType", modifiers: "", def_value: None }, CppParam { name: "EventData", ty: "::ArrayW<uint8_t>", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__EventDataBuffer(GlobalNamespace::GlobalNamespace__OVRPlugin__EventType EventType, ::ArrayW<uint8_t> EventData) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__EventDataBuffer(GlobalNamespace__OVRPlugin__EventDataBuffer const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__EventDataBuffer(GlobalNamespace__OVRPlugin__EventDataBuffer&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__EventDataBuffer& operator=(GlobalNamespace__OVRPlugin__EventDataBuffer const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__EventDataBuffer& operator=(GlobalNamespace__OVRPlugin__EventDataBuffer&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__EventDataBuffer(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__EventType __declspec(property(get=__get_EventType, put=__set_EventType))  EventType;

constexpr void __set_EventType(GlobalNamespace::GlobalNamespace__OVRPlugin__EventType value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__EventType __get_EventType() const;

 ::ArrayW<uint8_t> __declspec(property(get=__get_EventData, put=__set_EventData))  EventData;

constexpr void __set_EventData(::ArrayW<uint8_t> value) ;

constexpr ::ArrayW<uint8_t> __get_EventData() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::RenderModelProperties
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8716))
// CS Name: OVRPlugin::RenderModelProperties
struct CORDL_TYPE GlobalNamespace__OVRPlugin__RenderModelProperties : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "ModelName", ty: "::StringW", modifiers: "", def_value: None }, CppParam { name: "ModelKey", ty: "uint64_t", modifiers: "", def_value: None }, CppParam { name: "VendorId", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "ModelVersion", ty: "uint32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__RenderModelProperties(::StringW ModelName, uint64_t ModelKey, uint32_t VendorId, uint32_t ModelVersion) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__RenderModelProperties(GlobalNamespace__OVRPlugin__RenderModelProperties const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__RenderModelProperties(GlobalNamespace__OVRPlugin__RenderModelProperties&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__RenderModelProperties& operator=(GlobalNamespace__OVRPlugin__RenderModelProperties const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__RenderModelProperties& operator=(GlobalNamespace__OVRPlugin__RenderModelProperties&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x18};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__RenderModelProperties(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 ::StringW __declspec(property(get=__get_ModelName, put=__set_ModelName))  ModelName;

constexpr void __set_ModelName(::StringW value) ;

constexpr ::StringW __get_ModelName() const;

 uint64_t __declspec(property(get=__get_ModelKey, put=__set_ModelKey))  ModelKey;

constexpr void __set_ModelKey(uint64_t value) ;

constexpr uint64_t __get_ModelKey() const;

 uint32_t __declspec(property(get=__get_VendorId, put=__set_VendorId))  VendorId;

constexpr void __set_VendorId(uint32_t value) ;

constexpr uint32_t __get_VendorId() const;

 uint32_t __declspec(property(get=__get_ModelVersion, put=__set_ModelVersion))  ModelVersion;

constexpr void __set_ModelVersion(uint32_t value) ;

constexpr uint32_t __get_ModelVersion() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::RenderModelPropertiesInternal
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8717))
// CS Name: OVRPlugin::RenderModelPropertiesInternal
struct CORDL_TYPE GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "ModelName", ty: "::ArrayW<uint8_t>", modifiers: "", def_value: None }, CppParam { name: "ModelKey", ty: "uint64_t", modifiers: "", def_value: None }, CppParam { name: "VendorId", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "ModelVersion", ty: "uint32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal(::ArrayW<uint8_t> ModelName, uint64_t ModelKey, uint32_t VendorId, uint32_t ModelVersion) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal(GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal(GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal& operator=(GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal& operator=(GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x18};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 ::ArrayW<uint8_t> __declspec(property(get=__get_ModelName, put=__set_ModelName))  ModelName;

constexpr void __set_ModelName(::ArrayW<uint8_t> value) ;

constexpr ::ArrayW<uint8_t> __get_ModelName() const;

 uint64_t __declspec(property(get=__get_ModelKey, put=__set_ModelKey))  ModelKey;

constexpr void __set_ModelKey(uint64_t value) ;

constexpr uint64_t __get_ModelKey() const;

 uint32_t __declspec(property(get=__get_VendorId, put=__set_VendorId))  VendorId;

constexpr void __set_VendorId(uint32_t value) ;

constexpr uint32_t __get_VendorId() const;

 uint32_t __declspec(property(get=__get_ModelVersion, put=__set_ModelVersion))  ModelVersion;

constexpr void __set_ModelVersion(uint32_t value) ;

constexpr uint32_t __get_ModelVersion() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::RenderModelFlags
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8718))
// CS Name: OVRPlugin::RenderModelFlags
struct CORDL_TYPE GlobalNamespace__OVRPlugin__RenderModelFlags : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__RenderModelFlags(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__RenderModelFlags(GlobalNamespace__OVRPlugin__RenderModelFlags const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__RenderModelFlags(GlobalNamespace__OVRPlugin__RenderModelFlags&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__RenderModelFlags& operator=(GlobalNamespace__OVRPlugin__RenderModelFlags const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__RenderModelFlags& operator=(GlobalNamespace__OVRPlugin__RenderModelFlags&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__RenderModelFlags(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__RenderModelFlags_Unwrapped : int32_t {
__SupportsGltf20Subset1 = 1,
__SupportsGltf20Subset2 = 2,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__RenderModelFlags_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__RenderModelFlags_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field SupportsGltf20Subset1 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags const SupportsGltf20Subset1;

/// @brief Field SupportsGltf20Subset2 offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags const SupportsGltf20Subset2;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::InsightPassthroughColorMapType
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8719))
// CS Name: OVRPlugin::InsightPassthroughColorMapType
struct CORDL_TYPE GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType(GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType(GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType& operator=(GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType& operator=(GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType_Unwrapped : int32_t {
__None = 0,
__MonoToRgba = 1,
__MonoToMono = 2,
__BrightnessContrastSaturation = 4,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType const None;

/// @brief Field MonoToRgba offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType const MonoToRgba;

/// @brief Field MonoToMono offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType const MonoToMono;

/// @brief Field BrightnessContrastSaturation offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType const BrightnessContrastSaturation;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::InsightPassthroughStyleFlags
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8720))
// CS Name: OVRPlugin::InsightPassthroughStyleFlags
struct CORDL_TYPE GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags(GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags(GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags& operator=(GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags& operator=(GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags_Unwrapped : int32_t {
__HasTextureOpacityFactor = 1,
__HasEdgeColor = 2,
__HasTextureColorMap = 4,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field HasTextureOpacityFactor offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags const HasTextureOpacityFactor;

/// @brief Field HasEdgeColor offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags const HasEdgeColor;

/// @brief Field HasTextureColorMap offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags const HasTextureColorMap;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::InsightPassthroughStyle
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8721))
// CS Name: OVRPlugin::InsightPassthroughStyle
struct CORDL_TYPE GlobalNamespace__OVRPlugin__InsightPassthroughStyle : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Flags", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags", modifiers: "", def_value: None }, CppParam { name: "TextureOpacityFactor", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "EdgeColor", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf", modifiers: "", def_value: None }, CppParam { name: "TextureColorMapType", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType", modifiers: "", def_value: None }, CppParam { name: "TextureColorMapDataSize", ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name: "TextureColorMapData", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__InsightPassthroughStyle(GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags Flags, float_t TextureOpacityFactor, GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf EdgeColor, GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType TextureColorMapType, uint32_t TextureColorMapDataSize, ::cordl_internals::intptr_t TextureColorMapData) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughStyle(GlobalNamespace__OVRPlugin__InsightPassthroughStyle const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughStyle(GlobalNamespace__OVRPlugin__InsightPassthroughStyle&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughStyle& operator=(GlobalNamespace__OVRPlugin__InsightPassthroughStyle const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughStyle& operator=(GlobalNamespace__OVRPlugin__InsightPassthroughStyle&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x28};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__InsightPassthroughStyle(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags __declspec(property(get=__get_Flags, put=__set_Flags))  Flags;

constexpr void __set_Flags(GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags __get_Flags() const;

 float_t __declspec(property(get=__get_TextureOpacityFactor, put=__set_TextureOpacityFactor))  TextureOpacityFactor;

constexpr void __set_TextureOpacityFactor(float_t value) ;

constexpr float_t __get_TextureOpacityFactor() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf __declspec(property(get=__get_EdgeColor, put=__set_EdgeColor))  EdgeColor;

constexpr void __set_EdgeColor(GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf __get_EdgeColor() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType __declspec(property(get=__get_TextureColorMapType, put=__set_TextureColorMapType))  TextureColorMapType;

constexpr void __set_TextureColorMapType(GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType __get_TextureColorMapType() const;

 uint32_t __declspec(property(get=__get_TextureColorMapDataSize, put=__set_TextureColorMapDataSize))  TextureColorMapDataSize;

constexpr void __set_TextureColorMapDataSize(uint32_t value) ;

constexpr uint32_t __get_TextureColorMapDataSize() const;

 ::cordl_internals::intptr_t __declspec(property(get=__get_TextureColorMapData, put=__set_TextureColorMapData))  TextureColorMapData;

constexpr void __set_TextureColorMapData(::cordl_internals::intptr_t value) ;

constexpr ::cordl_internals::intptr_t __get_TextureColorMapData() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::InsightPassthroughKeyboardHandsIntensity
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8722))
// CS Name: OVRPlugin::InsightPassthroughKeyboardHandsIntensity
struct CORDL_TYPE GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "LeftHandIntensity", ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "RightHandIntensity", ty: "float_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity(float_t LeftHandIntensity, float_t RightHandIntensity) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity(GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity(GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity& operator=(GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity& operator=(GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x8};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 float_t __declspec(property(get=__get_LeftHandIntensity, put=__set_LeftHandIntensity))  LeftHandIntensity;

constexpr void __set_LeftHandIntensity(float_t value) ;

constexpr float_t __get_LeftHandIntensity() const;

 float_t __declspec(property(get=__get_RightHandIntensity, put=__set_RightHandIntensity))  RightHandIntensity;

constexpr void __set_RightHandIntensity(float_t value) ;

constexpr float_t __get_RightHandIntensity() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::PassthroughCapabilityFlags
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8723))
// CS Name: OVRPlugin::PassthroughCapabilityFlags
struct CORDL_TYPE GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags(GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags(GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags& operator=(GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags& operator=(GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags_Unwrapped : int32_t {
__Passthrough = 1,
__Color = 2,
__Depth = 4,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Passthrough offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags const Passthrough;

/// @brief Field Color offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags const Color;

/// @brief Field Depth offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags const Depth;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpaceComponentType
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8724))
// CS Name: OVRPlugin::SpaceComponentType
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpaceComponentType : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpaceComponentType(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpaceComponentType(GlobalNamespace__OVRPlugin__SpaceComponentType const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceComponentType(GlobalNamespace__OVRPlugin__SpaceComponentType&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceComponentType& operator=(GlobalNamespace__OVRPlugin__SpaceComponentType const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpaceComponentType& operator=(GlobalNamespace__OVRPlugin__SpaceComponentType&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpaceComponentType(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__SpaceComponentType_Unwrapped : int32_t {
__Locatable = 0,
__Storable = 1,
__Sharable = 2,
__Bounded2D = 3,
__Bounded3D = 4,
__SemanticLabels = 5,
__RoomLayout = 6,
__SpaceContainer = 7,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__SpaceComponentType_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__SpaceComponentType_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Locatable offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType const Locatable;

/// @brief Field Storable offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType const Storable;

/// @brief Field Sharable offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType const Sharable;

/// @brief Field Bounded2D offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType const Bounded2D;

/// @brief Field Bounded3D offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType const Bounded3D;

/// @brief Field SemanticLabels offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType const SemanticLabels;

/// @brief Field RoomLayout offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType const RoomLayout;

/// @brief Field SpaceContainer offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType const SpaceContainer;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpaceStorageLocation
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8725))
// CS Name: OVRPlugin::SpaceStorageLocation
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpaceStorageLocation : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpaceStorageLocation(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpaceStorageLocation(GlobalNamespace__OVRPlugin__SpaceStorageLocation const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceStorageLocation(GlobalNamespace__OVRPlugin__SpaceStorageLocation&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceStorageLocation& operator=(GlobalNamespace__OVRPlugin__SpaceStorageLocation const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpaceStorageLocation& operator=(GlobalNamespace__OVRPlugin__SpaceStorageLocation&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpaceStorageLocation(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__SpaceStorageLocation_Unwrapped : int32_t {
__Invalid = 0,
__Local = 1,
__Cloud = 2,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__SpaceStorageLocation_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__SpaceStorageLocation_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Invalid offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation const Invalid;

/// @brief Field Local offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation const Local;

/// @brief Field Cloud offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation const Cloud;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpaceStoragePersistenceMode
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8726))
// CS Name: OVRPlugin::SpaceStoragePersistenceMode
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode(GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode(GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode& operator=(GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode& operator=(GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode_Unwrapped : int32_t {
__Invalid = 0,
__Indefinite = 1,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Invalid offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode const Invalid;

/// @brief Field Indefinite offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode const Indefinite;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpaceQueryActionType
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8727))
// CS Name: OVRPlugin::SpaceQueryActionType
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpaceQueryActionType : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpaceQueryActionType(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryActionType(GlobalNamespace__OVRPlugin__SpaceQueryActionType const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryActionType(GlobalNamespace__OVRPlugin__SpaceQueryActionType&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryActionType& operator=(GlobalNamespace__OVRPlugin__SpaceQueryActionType const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryActionType& operator=(GlobalNamespace__OVRPlugin__SpaceQueryActionType&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpaceQueryActionType(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__SpaceQueryActionType_Unwrapped : int32_t {
__Load = 0,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__SpaceQueryActionType_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__SpaceQueryActionType_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Load offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType const Load;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpaceQueryType
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8728))
// CS Name: OVRPlugin::SpaceQueryType
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpaceQueryType : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpaceQueryType(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryType(GlobalNamespace__OVRPlugin__SpaceQueryType const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryType(GlobalNamespace__OVRPlugin__SpaceQueryType&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryType& operator=(GlobalNamespace__OVRPlugin__SpaceQueryType const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryType& operator=(GlobalNamespace__OVRPlugin__SpaceQueryType&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpaceQueryType(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__SpaceQueryType_Unwrapped : int32_t {
__Action = 0,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__SpaceQueryType_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__SpaceQueryType_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Action offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType const Action;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpaceQueryFilterType
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8729))
// CS Name: OVRPlugin::SpaceQueryFilterType
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpaceQueryFilterType : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpaceQueryFilterType(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryFilterType(GlobalNamespace__OVRPlugin__SpaceQueryFilterType const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryFilterType(GlobalNamespace__OVRPlugin__SpaceQueryFilterType&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryFilterType& operator=(GlobalNamespace__OVRPlugin__SpaceQueryFilterType const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryFilterType& operator=(GlobalNamespace__OVRPlugin__SpaceQueryFilterType&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpaceQueryFilterType(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__SpaceQueryFilterType_Unwrapped : int32_t {
__None = 0,
__Ids = 1,
__Components = 2,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__SpaceQueryFilterType_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__SpaceQueryFilterType_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field None offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType const None;

/// @brief Field Ids offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType const Ids;

/// @brief Field Components offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType const Components;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpatialAnchorCreateInfo
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8730))
// CS Name: OVRPlugin::SpatialAnchorCreateInfo
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "BaseTracking", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin", modifiers: "", def_value: None }, CppParam { name: "PoseInSpace", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__Posef", modifiers: "", def_value: None }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin BaseTracking, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef PoseInSpace, double_t Time) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo(GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo(GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo& operator=(GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo& operator=(GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x28};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin __declspec(property(get=__get_BaseTracking, put=__set_BaseTracking))  BaseTracking;

constexpr void __set_BaseTracking(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin __get_BaseTracking() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __declspec(property(get=__get_PoseInSpace, put=__set_PoseInSpace))  PoseInSpace;

constexpr void __set_PoseInSpace(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__Posef __get_PoseInSpace() const;

 double_t __declspec(property(get=__get_Time, put=__set_Time))  Time;

constexpr void __set_Time(double_t value) ;

constexpr double_t __get_Time() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpaceFilterInfoIds
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8731))
// CS Name: OVRPlugin::SpaceFilterInfoIds
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpaceFilterInfoIds : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Ids", ty: "::ArrayW<System::Guid>", modifiers: "", def_value: None }, CppParam { name: "NumIds", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpaceFilterInfoIds(::ArrayW<System::Guid> Ids, int32_t NumIds) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpaceFilterInfoIds(GlobalNamespace__OVRPlugin__SpaceFilterInfoIds const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceFilterInfoIds(GlobalNamespace__OVRPlugin__SpaceFilterInfoIds&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceFilterInfoIds& operator=(GlobalNamespace__OVRPlugin__SpaceFilterInfoIds const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpaceFilterInfoIds& operator=(GlobalNamespace__OVRPlugin__SpaceFilterInfoIds&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpaceFilterInfoIds(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 ::ArrayW<System::Guid> __declspec(property(get=__get_Ids, put=__set_Ids))  Ids;

constexpr void __set_Ids(::ArrayW<System::Guid> value) ;

constexpr ::ArrayW<System::Guid> __get_Ids() const;

 int32_t __declspec(property(get=__get_NumIds, put=__set_NumIds))  NumIds;

constexpr void __set_NumIds(int32_t value) ;

constexpr int32_t __get_NumIds() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpaceFilterInfoComponents
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8732))
// CS Name: OVRPlugin::SpaceFilterInfoComponents
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "Components", ty: "::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>", modifiers: "", def_value: None }, CppParam { name: "NumComponents", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType> Components, int32_t NumComponents) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents(GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents(GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents& operator=(GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents& operator=(GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType> __declspec(property(get=__get_Components, put=__set_Components))  Components;

constexpr void __set_Components(::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType> value) ;

constexpr ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType> __get_Components() const;

 int32_t __declspec(property(get=__get_NumComponents, put=__set_NumComponents))  NumComponents;

constexpr void __set_NumComponents(int32_t value) ;

constexpr int32_t __get_NumComponents() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpaceQueryInfo
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8733))
// CS Name: OVRPlugin::SpaceQueryInfo
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpaceQueryInfo : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "QueryType", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType", modifiers: "", def_value: None }, CppParam { name: "MaxQuerySpaces", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "Timeout", ty: "double_t", modifiers: "", def_value: None }, CppParam { name: "Location", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation", modifiers: "", def_value: None }, CppParam { name: "ActionType", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType", modifiers: "", def_value: None }, CppParam { name: "FilterType", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType", modifiers: "", def_value: None }, CppParam { name: "IdInfo", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds", modifiers: "", def_value: None }, CppParam { name: "ComponentsInfo", ty: "GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpaceQueryInfo(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType QueryType, int32_t MaxQuerySpaces, double_t Timeout, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation Location, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType ActionType, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType FilterType, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds IdInfo, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents ComponentsInfo) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryInfo(GlobalNamespace__OVRPlugin__SpaceQueryInfo const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryInfo(GlobalNamespace__OVRPlugin__SpaceQueryInfo&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryInfo& operator=(GlobalNamespace__OVRPlugin__SpaceQueryInfo const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryInfo& operator=(GlobalNamespace__OVRPlugin__SpaceQueryInfo&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x40};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpaceQueryInfo(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType __declspec(property(get=__get_QueryType, put=__set_QueryType))  QueryType;

constexpr void __set_QueryType(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType __get_QueryType() const;

 int32_t __declspec(property(get=__get_MaxQuerySpaces, put=__set_MaxQuerySpaces))  MaxQuerySpaces;

constexpr void __set_MaxQuerySpaces(int32_t value) ;

constexpr int32_t __get_MaxQuerySpaces() const;

 double_t __declspec(property(get=__get_Timeout, put=__set_Timeout))  Timeout;

constexpr void __set_Timeout(double_t value) ;

constexpr double_t __get_Timeout() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation __declspec(property(get=__get_Location, put=__set_Location))  Location;

constexpr void __set_Location(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation __get_Location() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType __declspec(property(get=__get_ActionType, put=__set_ActionType))  ActionType;

constexpr void __set_ActionType(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType __get_ActionType() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType __declspec(property(get=__get_FilterType, put=__set_FilterType))  FilterType;

constexpr void __set_FilterType(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType __get_FilterType() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds __declspec(property(get=__get_IdInfo, put=__set_IdInfo))  IdInfo;

constexpr void __set_IdInfo(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds __get_IdInfo() const;

 GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents __declspec(property(get=__get_ComponentsInfo, put=__set_ComponentsInfo))  ComponentsInfo;

constexpr void __set_ComponentsInfo(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents value) ;

constexpr GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents __get_ComponentsInfo() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpaceQueryResult
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8734))
// CS Name: OVRPlugin::SpaceQueryResult
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpaceQueryResult : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "space", ty: "uint64_t", modifiers: "", def_value: None }, CppParam { name: "uuid", ty: "System::Guid", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpaceQueryResult(uint64_t space, System::Guid uuid) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryResult(GlobalNamespace__OVRPlugin__SpaceQueryResult const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryResult(GlobalNamespace__OVRPlugin__SpaceQueryResult&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryResult& operator=(GlobalNamespace__OVRPlugin__SpaceQueryResult const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpaceQueryResult& operator=(GlobalNamespace__OVRPlugin__SpaceQueryResult&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x18};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpaceQueryResult(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 uint64_t __declspec(property(get=__get_space, put=__set_space))  space;

constexpr void __set_space(uint64_t value) ;

constexpr uint64_t __get_space() const;

 System::Guid __declspec(property(get=__get_uuid, put=__set_uuid))  uuid;

constexpr void __set_uuid(System::Guid value) ;

constexpr System::Guid __get_uuid() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::MrcActivationMode
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8735))
// CS Name: OVRPlugin::Media::MrcActivationMode
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Media__MrcActivationMode : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Media__MrcActivationMode(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Media__MrcActivationMode(GlobalNamespace__OVRPlugin__Media__MrcActivationMode const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Media__MrcActivationMode(GlobalNamespace__OVRPlugin__Media__MrcActivationMode&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Media__MrcActivationMode& operator=(GlobalNamespace__OVRPlugin__Media__MrcActivationMode const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Media__MrcActivationMode& operator=(GlobalNamespace__OVRPlugin__Media__MrcActivationMode&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Media__MrcActivationMode(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__Media__MrcActivationMode_Unwrapped : int32_t {
__Automatic = 0,
__Disabled = 1,
__EnumSize = 2147483647,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__Media__MrcActivationMode_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__Media__MrcActivationMode_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Automatic offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode const Automatic;

/// @brief Field Disabled offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode const Disabled;

/// @brief Field EnumSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode const EnumSize;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::PlatformCameraMode
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8736))
// CS Name: OVRPlugin::Media::PlatformCameraMode
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Media__PlatformCameraMode : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Media__PlatformCameraMode(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Media__PlatformCameraMode(GlobalNamespace__OVRPlugin__Media__PlatformCameraMode const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Media__PlatformCameraMode(GlobalNamespace__OVRPlugin__Media__PlatformCameraMode&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Media__PlatformCameraMode& operator=(GlobalNamespace__OVRPlugin__Media__PlatformCameraMode const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Media__PlatformCameraMode& operator=(GlobalNamespace__OVRPlugin__Media__PlatformCameraMode&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Media__PlatformCameraMode(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__Media__PlatformCameraMode_Unwrapped : int32_t {
__Disabled = -1,
__Initialized = 0,
__UserControlled = 1,
__SmartNavigated = 2,
__StabilizedPoV = 3,
__RemoteDroneControlled = 4,
__RemoteSpatialMapped = 5,
__SpectatorMode = 6,
__MobileMRC = 7,
__EnumSize = 2147483647,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__Media__PlatformCameraMode_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__Media__PlatformCameraMode_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Disabled offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode const Disabled;

/// @brief Field Initialized offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode const Initialized;

/// @brief Field UserControlled offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode const UserControlled;

/// @brief Field SmartNavigated offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode const SmartNavigated;

/// @brief Field StabilizedPoV offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode const StabilizedPoV;

/// @brief Field RemoteDroneControlled offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode const RemoteDroneControlled;

/// @brief Field RemoteSpatialMapped offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode const RemoteSpatialMapped;

/// @brief Field SpectatorMode offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode const SpectatorMode;

/// @brief Field MobileMRC offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode const MobileMRC;

/// @brief Field EnumSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode const EnumSize;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::InputVideoBufferType
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2558))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8737))
// CS Name: OVRPlugin::Media::InputVideoBufferType
struct CORDL_TYPE GlobalNamespace__OVRPlugin__Media__InputVideoBufferType : public ::bs_hook::EnumTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Media__InputVideoBufferType(int32_t value__) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__Media__InputVideoBufferType(GlobalNamespace__OVRPlugin__Media__InputVideoBufferType const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Media__InputVideoBufferType(GlobalNamespace__OVRPlugin__Media__InputVideoBufferType&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__Media__InputVideoBufferType& operator=(GlobalNamespace__OVRPlugin__Media__InputVideoBufferType const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__Media__InputVideoBufferType& operator=(GlobalNamespace__OVRPlugin__Media__InputVideoBufferType&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x4};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Media__InputVideoBufferType(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::EnumTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}

enum class __GlobalNamespace__OVRPlugin__Media__InputVideoBufferType_Unwrapped : int32_t {
__Memory = 0,
__TextureHandle = 1,
__EnumSize = 2147483647,
};

/// @brief Conversion into unwrapped enum value
constexpr operator __GlobalNamespace__OVRPlugin__Media__InputVideoBufferType_Unwrapped () const noexcept {
return std::bit_cast<__GlobalNamespace__OVRPlugin__Media__InputVideoBufferType_Unwrapped>(__instance);
}


// Fields

 int32_t __declspec(property(get=__get_value__, put=__set_value__))  value__;

constexpr void __set_value__(int32_t value) ;

constexpr int32_t __get_value__() const;

/// @brief Field Memory offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType const Memory;

/// @brief Field TextureHandle offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType const TextureHandle;

/// @brief Field EnumSize offset 0
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType const EnumSize;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::Media
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8738))
// CS Name: OVRPlugin::Media
class CORDL_TYPE GlobalNamespace__OVRPlugin__Media : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
using InputVideoBufferType = GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType;

using PlatformCameraMode = GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode;

using MrcActivationMode = GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode;

/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__Media() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__Media", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Media(GlobalNamespace__OVRPlugin__Media const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__Media", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Media(GlobalNamespace__OVRPlugin__Media&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Media(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__Media& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__Media& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__Media& operator=(GlobalNamespace__OVRPlugin__Media&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__Media& operator=(GlobalNamespace__OVRPlugin__Media const& o) noexcept = default;
                


// Fields

static UnityEngine::Texture2D __declspec(property(get=__get_cachedTexture, put=__set_cachedTexture))  cachedTexture;

static void __set_cachedTexture(UnityEngine::Texture2D value) ;

static UnityEngine::Texture2D __get_cachedTexture() ;


// Methods

/// @brief Method Initialize addr 0x2622460 size 0xc0 virtual false final false
static bool Initialize() ;

/// @brief Method Shutdown addr 0x2622588 size 0xc0 virtual false final false
static bool Shutdown() ;

/// @brief Method GetInitialized addr 0x26226b0 size 0xd4 virtual false final false
static bool GetInitialized() ;

/// @brief Method Update addr 0x2622800 size 0xc0 virtual false final false
static bool Update() ;

/// @brief Method GetMrcActivationMode addr 0x2622928 size 0xcc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode GetMrcActivationMode() ;

/// @brief Method SetMrcActivationMode addr 0x2622a70 size 0xc8 virtual false final false
static bool SetMrcActivationMode(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode mode) ;

/// @brief Method SetPlatformInitialized addr 0x2622bb4 size 0xc0 virtual false final false
static bool SetPlatformInitialized() ;

/// @brief Method GetPlatformCameraMode addr 0x2622cdc size 0xcc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode GetPlatformCameraMode() ;

/// @brief Method SetPlatformCameraMode addr 0x2622e24 size 0xc8 virtual false final false
static bool SetPlatformCameraMode(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode mode) ;

/// @brief Method IsMrcEnabled addr 0x2622f68 size 0xd0 virtual false final false
static bool IsMrcEnabled() ;

/// @brief Method IsMrcActivated addr 0x26230b4 size 0xd0 virtual false final false
static bool IsMrcActivated() ;

/// @brief Method UseMrcDebugCamera addr 0x2623200 size 0xd0 virtual false final false
static bool UseMrcDebugCamera() ;

/// @brief Method SetMrcInputVideoBufferType addr 0x262334c size 0xc8 virtual false final false
static bool SetMrcInputVideoBufferType(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType videoBufferType) ;

/// @brief Method GetMrcInputVideoBufferType addr 0x2623490 size 0xc8 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType GetMrcInputVideoBufferType() ;

/// @brief Method SetMrcFrameSize addr 0x26235d4 size 0xd8 virtual false final false
static bool SetMrcFrameSize(int32_t frameWidth, int32_t frameHeight) ;

/// @brief Method GetMrcFrameSize addr 0x2623730 size 0xe0 virtual false final false
static void GetMrcFrameSize(ByRef<int32_t> frameWidth, ByRef<int32_t> frameHeight) ;

/// @brief Method SetMrcAudioSampleRate addr 0x2623894 size 0xc8 virtual false final false
static bool SetMrcAudioSampleRate(int32_t sampleRate) ;

/// @brief Method GetMrcAudioSampleRate addr 0x26239d8 size 0xc4 virtual false final false
static int32_t GetMrcAudioSampleRate() ;

/// @brief Method SetMrcFrameImageFlipped addr 0x2623b18 size 0xcc virtual false final false
static bool SetMrcFrameImageFlipped(bool imageFlipped) ;

/// @brief Method GetMrcFrameImageFlipped addr 0x2623c60 size 0xcc virtual false final false
static bool GetMrcFrameImageFlipped() ;

/// @brief Method EncodeMrcFrame addr 0x2623da8 size 0x354 virtual false final false
static bool EncodeMrcFrame(::cordl_internals::intptr_t textureHandle, ::cordl_internals::intptr_t fgTextureHandle, ::ArrayW<float_t> audioData, int32_t audioFrames, int32_t audioChannels, double_t timestamp, double_t poseTime, ByRef<int32_t> outSyncId) ;

/// @brief Method EncodeMrcFrame addr 0x262440c size 0x4e8 virtual false final false
static bool EncodeMrcFrame(UnityEngine::RenderTexture frame, ::ArrayW<float_t> audioData, int32_t audioFrames, int32_t audioChannels, double_t timestamp, double_t poseTime, ByRef<int32_t> outSyncId) ;

/// @brief Method SyncMrcFrame addr 0x26248f4 size 0xc8 virtual false final false
static bool SyncMrcFrame(int32_t syncId) ;

/// @brief Method SetAvailableQueueIndexVulkan addr 0x2624a38 size 0xc8 virtual false final false
static bool SetAvailableQueueIndexVulkan(uint32_t queueIndexVk) ;

/// @brief Method SetMrcHeadsetControllerPose addr 0x2624b7c size 0x14c virtual false final false
static bool SetMrcHeadsetControllerPose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef headsetPose, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef leftControllerPose, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef rightControllerPose) ;

/// @brief Method IsCastingToRemoteClient addr 0x2624d8c size 0xd4 virtual false final false
static bool IsCastingToRemoteClient() ;

// Ctor Parameters []
explicit GlobalNamespace__OVRPlugin__Media() ;

/// @brief Method .ctor addr 0x2624edc size 0x8 virtual false final false
 void _ctor() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpaceContainerInternal
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8739))
// CS Name: OVRPlugin::SpaceContainerInternal
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpaceContainerInternal : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "uuidCapacityInput", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "uuidCountOutput", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "uuids", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpaceContainerInternal(int32_t uuidCapacityInput, int32_t uuidCountOutput, ::cordl_internals::intptr_t uuids) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpaceContainerInternal(GlobalNamespace__OVRPlugin__SpaceContainerInternal const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceContainerInternal(GlobalNamespace__OVRPlugin__SpaceContainerInternal&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceContainerInternal& operator=(GlobalNamespace__OVRPlugin__SpaceContainerInternal const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpaceContainerInternal& operator=(GlobalNamespace__OVRPlugin__SpaceContainerInternal&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpaceContainerInternal(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 int32_t __declspec(property(get=__get_uuidCapacityInput, put=__set_uuidCapacityInput))  uuidCapacityInput;

constexpr void __set_uuidCapacityInput(int32_t value) ;

constexpr int32_t __get_uuidCapacityInput() const;

 int32_t __declspec(property(get=__get_uuidCountOutput, put=__set_uuidCountOutput))  uuidCountOutput;

constexpr void __set_uuidCountOutput(int32_t value) ;

constexpr int32_t __get_uuidCountOutput() const;

 ::cordl_internals::intptr_t __declspec(property(get=__get_uuids, put=__set_uuids))  uuids;

constexpr void __set_uuids(::cordl_internals::intptr_t value) ;

constexpr ::cordl_internals::intptr_t __get_uuids() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SpaceSemanticLabelInternal
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8740))
// CS Name: OVRPlugin::SpaceSemanticLabelInternal
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "byteCapacityInput", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "byteCountOutput", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "labels", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal(int32_t byteCapacityInput, int32_t byteCountOutput, ::cordl_internals::intptr_t labels) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal(GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal(GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal& operator=(GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal& operator=(GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 int32_t __declspec(property(get=__get_byteCapacityInput, put=__set_byteCapacityInput))  byteCapacityInput;

constexpr void __set_byteCapacityInput(int32_t value) ;

constexpr int32_t __get_byteCapacityInput() const;

 int32_t __declspec(property(get=__get_byteCountOutput, put=__set_byteCountOutput))  byteCountOutput;

constexpr void __set_byteCountOutput(int32_t value) ;

constexpr int32_t __get_byteCountOutput() const;

 ::cordl_internals::intptr_t __declspec(property(get=__get_labels, put=__set_labels))  labels;

constexpr void __set_labels(::cordl_internals::intptr_t value) ;

constexpr ::cordl_internals::intptr_t __get_labels() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::RoomLayout
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8741))
// CS Name: OVRPlugin::RoomLayout
struct CORDL_TYPE GlobalNamespace__OVRPlugin__RoomLayout : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "floorUuid", ty: "System::Guid", modifiers: "", def_value: None }, CppParam { name: "ceilingUuid", ty: "System::Guid", modifiers: "", def_value: None }, CppParam { name: "wallUuids", ty: "::ArrayW<System::Guid>", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__RoomLayout(System::Guid floorUuid, System::Guid ceilingUuid, ::ArrayW<System::Guid> wallUuids) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__RoomLayout(GlobalNamespace__OVRPlugin__RoomLayout const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__RoomLayout(GlobalNamespace__OVRPlugin__RoomLayout&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__RoomLayout& operator=(GlobalNamespace__OVRPlugin__RoomLayout const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__RoomLayout& operator=(GlobalNamespace__OVRPlugin__RoomLayout&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x28};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__RoomLayout(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 System::Guid __declspec(property(get=__get_floorUuid, put=__set_floorUuid))  floorUuid;

constexpr void __set_floorUuid(System::Guid value) ;

constexpr System::Guid __get_floorUuid() const;

 System::Guid __declspec(property(get=__get_ceilingUuid, put=__set_ceilingUuid))  ceilingUuid;

constexpr void __set_ceilingUuid(System::Guid value) ;

constexpr System::Guid __get_ceilingUuid() const;

 ::ArrayW<System::Guid> __declspec(property(get=__get_wallUuids, put=__set_wallUuids))  wallUuids;

constexpr void __set_wallUuids(::ArrayW<System::Guid> value) ;

constexpr ::ArrayW<System::Guid> __get_wallUuids() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::RoomLayoutInternal
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8742))
// CS Name: OVRPlugin::RoomLayoutInternal
struct CORDL_TYPE GlobalNamespace__OVRPlugin__RoomLayoutInternal : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "floorUuid", ty: "System::Guid", modifiers: "", def_value: None }, CppParam { name: "ceilingUuid", ty: "System::Guid", modifiers: "", def_value: None }, CppParam { name: "wallUuidCapacityInput", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "wallUuidCountOutput", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "wallUuids", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__RoomLayoutInternal(System::Guid floorUuid, System::Guid ceilingUuid, int32_t wallUuidCapacityInput, int32_t wallUuidCountOutput, ::cordl_internals::intptr_t wallUuids) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__RoomLayoutInternal(GlobalNamespace__OVRPlugin__RoomLayoutInternal const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__RoomLayoutInternal(GlobalNamespace__OVRPlugin__RoomLayoutInternal&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__RoomLayoutInternal& operator=(GlobalNamespace__OVRPlugin__RoomLayoutInternal const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__RoomLayoutInternal& operator=(GlobalNamespace__OVRPlugin__RoomLayoutInternal&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x30};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__RoomLayoutInternal(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 System::Guid __declspec(property(get=__get_floorUuid, put=__set_floorUuid))  floorUuid;

constexpr void __set_floorUuid(System::Guid value) ;

constexpr System::Guid __get_floorUuid() const;

 System::Guid __declspec(property(get=__get_ceilingUuid, put=__set_ceilingUuid))  ceilingUuid;

constexpr void __set_ceilingUuid(System::Guid value) ;

constexpr System::Guid __get_ceilingUuid() const;

 int32_t __declspec(property(get=__get_wallUuidCapacityInput, put=__set_wallUuidCapacityInput))  wallUuidCapacityInput;

constexpr void __set_wallUuidCapacityInput(int32_t value) ;

constexpr int32_t __get_wallUuidCapacityInput() const;

 int32_t __declspec(property(get=__get_wallUuidCountOutput, put=__set_wallUuidCountOutput))  wallUuidCountOutput;

constexpr void __set_wallUuidCountOutput(int32_t value) ;

constexpr int32_t __get_wallUuidCountOutput() const;

 ::cordl_internals::intptr_t __declspec(property(get=__get_wallUuids, put=__set_wallUuids))  wallUuids;

constexpr void __set_wallUuids(::cordl_internals::intptr_t value) ;

constexpr ::cordl_internals::intptr_t __get_wallUuids() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::PolygonalBoundary2DInternal
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8743))
// CS Name: OVRPlugin::PolygonalBoundary2DInternal
struct CORDL_TYPE GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "vertexCapacityInput", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "vertexCountOutput", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "vertices", ty: "::cordl_internals::intptr_t", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal(int32_t vertexCapacityInput, int32_t vertexCountOutput, ::cordl_internals::intptr_t vertices) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal(GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal(GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal& operator=(GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal& operator=(GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 int32_t __declspec(property(get=__get_vertexCapacityInput, put=__set_vertexCapacityInput))  vertexCapacityInput;

constexpr void __set_vertexCapacityInput(int32_t value) ;

constexpr int32_t __get_vertexCapacityInput() const;

 int32_t __declspec(property(get=__get_vertexCountOutput, put=__set_vertexCountOutput))  vertexCountOutput;

constexpr void __set_vertexCountOutput(int32_t value) ;

constexpr int32_t __get_vertexCountOutput() const;

 ::cordl_internals::intptr_t __declspec(property(get=__get_vertices, put=__set_vertices))  vertices;

constexpr void __set_vertices(::cordl_internals::intptr_t value) ;

constexpr ::cordl_internals::intptr_t __get_vertices() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::SceneCaptureRequestInternal
namespace GlobalNamespace {
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638))}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8744))
// CS Name: OVRPlugin::SceneCaptureRequestInternal
struct CORDL_TYPE GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
// Ctor Parameters [CppParam { name: "requestByteCount", ty: "int32_t", modifiers: "", def_value: None }, CppParam { name: "request", ty: "::StringW", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal(int32_t requestByteCount, ::StringW request) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal(GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal(GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal& operator=(GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal& operator=(GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x10};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 int32_t __declspec(property(get=__get_requestByteCount, put=__set_requestByteCount))  requestByteCount;

constexpr void __set_requestByteCount(int32_t value) ;

constexpr int32_t __get_requestByteCount() const;

 ::StringW __declspec(property(get=__get_request, put=__set_request))  request;

constexpr void __set_request(::StringW value) ;

constexpr ::StringW __get_request() const;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::PinnedArray`1
// Type: ::Ktx
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8746))
// CS Name: OVRPlugin::Ktx
class CORDL_TYPE GlobalNamespace__OVRPlugin__Ktx : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__Ktx() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__Ktx", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Ktx(GlobalNamespace__OVRPlugin__Ktx const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__Ktx", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__Ktx(GlobalNamespace__OVRPlugin__Ktx&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__Ktx(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__Ktx& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__Ktx& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__Ktx& operator=(GlobalNamespace__OVRPlugin__Ktx&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__Ktx& operator=(GlobalNamespace__OVRPlugin__Ktx const& o) noexcept = default;
                


// Methods

/// @brief Method LoadKtxFromMemory addr 0x2624ee4 size 0x174 virtual false final false
static ::cordl_internals::intptr_t LoadKtxFromMemory(::cordl_internals::intptr_t dataPtr, uint32_t length) ;

/// @brief Method GetKtxTextureWidth addr 0x26250ec size 0x13c virtual false final false
static uint32_t GetKtxTextureWidth(::cordl_internals::intptr_t texture) ;

/// @brief Method GetKtxTextureHeight addr 0x26252ac size 0x13c virtual false final false
static uint32_t GetKtxTextureHeight(::cordl_internals::intptr_t texture) ;

/// @brief Method TranscodeKtxTexture addr 0x262546c size 0x13c virtual false final false
static bool TranscodeKtxTexture(::cordl_internals::intptr_t texture, uint32_t format) ;

/// @brief Method GetKtxTextureSize addr 0x262562c size 0x13c virtual false final false
static uint32_t GetKtxTextureSize(::cordl_internals::intptr_t texture) ;

/// @brief Method GetKtxTextureData addr 0x26257ec size 0x144 virtual false final false
static bool GetKtxTextureData(::cordl_internals::intptr_t texture, ::cordl_internals::intptr_t textureData, uint32_t bufferSize) ;

/// @brief Method DestroyKtxTexture addr 0x26259c4 size 0x12c virtual false final false
static bool DestroyKtxTexture(::cordl_internals::intptr_t texture) ;

// Ctor Parameters []
explicit GlobalNamespace__OVRPlugin__Ktx() ;

/// @brief Method .ctor addr 0x2625b6c size 0x8 virtual false final false
 void _ctor() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::UnityOpenXR
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8747))
// CS Name: OVRPlugin::UnityOpenXR
class CORDL_TYPE GlobalNamespace__OVRPlugin__UnityOpenXR : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__UnityOpenXR() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__UnityOpenXR", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__UnityOpenXR(GlobalNamespace__OVRPlugin__UnityOpenXR const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__UnityOpenXR", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__UnityOpenXR(GlobalNamespace__OVRPlugin__UnityOpenXR&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__UnityOpenXR(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__UnityOpenXR& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__UnityOpenXR& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__UnityOpenXR& operator=(GlobalNamespace__OVRPlugin__UnityOpenXR&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__UnityOpenXR& operator=(GlobalNamespace__OVRPlugin__UnityOpenXR const& o) noexcept = default;
                


// Fields

static bool __declspec(property(get=__get_Enabled, put=__set_Enabled))  Enabled;

static void __set_Enabled(bool value) ;

static bool __get_Enabled() ;


// Methods

/// @brief Method SetClientVersion addr 0x2625b74 size 0xf0 virtual false final false
static void SetClientVersion() ;

/// @brief Method HookGetInstanceProcAddr addr 0x2625cf8 size 0xc4 virtual false final false
static ::cordl_internals::intptr_t HookGetInstanceProcAddr(::cordl_internals::intptr_t func) ;

/// @brief Method OnInstanceCreate addr 0x2625e38 size 0xc8 virtual false final false
static bool OnInstanceCreate(uint64_t xrInstance) ;

/// @brief Method OnInstanceDestroy addr 0x2625f7c size 0xc0 virtual false final false
static void OnInstanceDestroy(uint64_t xrInstance) ;

/// @brief Method OnSessionCreate addr 0x26260b8 size 0xc0 virtual false final false
static void OnSessionCreate(uint64_t xrSession) ;

/// @brief Method OnAppSpaceChange addr 0x26261f4 size 0xc0 virtual false final false
static void OnAppSpaceChange(uint64_t xrSpace) ;

/// @brief Method OnSessionStateChange addr 0x2626330 size 0xd4 virtual false final false
static void OnSessionStateChange(int32_t oldState, int32_t newState) ;

/// @brief Method OnSessionBegin addr 0x2626488 size 0xc0 virtual false final false
static void OnSessionBegin(uint64_t xrSession) ;

/// @brief Method OnSessionEnd addr 0x26265c4 size 0xc0 virtual false final false
static void OnSessionEnd(uint64_t xrSession) ;

/// @brief Method OnSessionExiting addr 0x2626700 size 0xc0 virtual false final false
static void OnSessionExiting(uint64_t xrSession) ;

/// @brief Method OnSessionDestroy addr 0x262683c size 0xc0 virtual false final false
static void OnSessionDestroy(uint64_t xrSession) ;

// Ctor Parameters []
explicit GlobalNamespace__OVRPlugin__UnityOpenXR() ;

/// @brief Method .ctor addr 0x2626978 size 0x8 virtual false final false
 void _ctor() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_0_1_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8748))
// CS Name: OVRPlugin::OVRP_0_1_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_0_1_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_0_1_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_0_1_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_0(GlobalNamespace__OVRPlugin__OVRP_0_1_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_0_1_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_0(GlobalNamespace__OVRPlugin__OVRP_0_1_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_0_1_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_0& operator=(GlobalNamespace__OVRPlugin__OVRP_0_1_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_0& operator=(GlobalNamespace__OVRPlugin__OVRP_0_1_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetEyeTextureSize addr 0x2626980 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei ovrp_GetEyeTextureSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Eye eyeId) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_0_1_1
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8749))
// CS Name: OVRPlugin::OVRP_0_1_1
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_0_1_1 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_0_1_1() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_0_1_1", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_1(GlobalNamespace__OVRPlugin__OVRP_0_1_1 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_0_1_1", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_1(GlobalNamespace__OVRPlugin__OVRP_0_1_1&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_0_1_1(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_1& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_1& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_1& operator=(GlobalNamespace__OVRPlugin__OVRP_0_1_1&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_1& operator=(GlobalNamespace__OVRPlugin__OVRP_0_1_1 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_SetOverlayQuad2 addr 0x2626a80 size 0xe4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetOverlayQuad2(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool onTop, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool headLocked, ::cordl_internals::intptr_t texture, ::cordl_internals::intptr_t device, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef pose, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f scale) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_0_1_2
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8750))
// CS Name: OVRPlugin::OVRP_0_1_2
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_0_1_2 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_0_1_2() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_0_1_2", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_2(GlobalNamespace__OVRPlugin__OVRP_0_1_2 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_0_1_2", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_2(GlobalNamespace__OVRPlugin__OVRP_0_1_2&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_0_1_2(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_2& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_2& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_2& operator=(GlobalNamespace__OVRPlugin__OVRP_0_1_2&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_2& operator=(GlobalNamespace__OVRPlugin__OVRP_0_1_2 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetNodePose addr 0x2626be8 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef ovrp_GetNodePose(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method ovrp_SetControllerVibration addr 0x2626c6c size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetControllerVibration(uint32_t controllerMask, float_t frequency, float_t amplitude) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_0_1_3
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8751))
// CS Name: OVRPlugin::OVRP_0_1_3
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_0_1_3 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_0_1_3() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_0_1_3", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_3(GlobalNamespace__OVRPlugin__OVRP_0_1_3 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_0_1_3", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_3(GlobalNamespace__OVRPlugin__OVRP_0_1_3&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_0_1_3(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_3& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_3& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_3& operator=(GlobalNamespace__OVRPlugin__OVRP_0_1_3&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_0_1_3& operator=(GlobalNamespace__OVRPlugin__OVRP_0_1_3 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetNodeVelocity addr 0x2626d84 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef ovrp_GetNodeVelocity(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method ovrp_GetNodeAcceleration addr 0x2626e08 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef ovrp_GetNodeAcceleration(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_0_5_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8752))
// CS Name: OVRPlugin::OVRP_0_5_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_0_5_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_0_5_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_0_5_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_0_5_0(GlobalNamespace__OVRPlugin__OVRP_0_5_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_0_5_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_0_5_0(GlobalNamespace__OVRPlugin__OVRP_0_5_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_0_5_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_0_5_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_0_5_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_0_5_0& operator=(GlobalNamespace__OVRPlugin__OVRP_0_5_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_0_5_0& operator=(GlobalNamespace__OVRPlugin__OVRP_0_5_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_0_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8753))
// CS Name: OVRPlugin::OVRP_1_0_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_0_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_0_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_0_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_0_0(GlobalNamespace__OVRPlugin__OVRP_1_0_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_0_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_0_0(GlobalNamespace__OVRPlugin__OVRP_1_0_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_0_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_0_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_0_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_0_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_0_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_0_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_0_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetTrackingOriginType addr 0x2626f94 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin ovrp_GetTrackingOriginType() ;

/// @brief Method ovrp_SetTrackingOriginType addr 0x2626ffc size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetTrackingOriginType(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin originType) ;

/// @brief Method ovrp_GetTrackingCalibratedOrigin addr 0x2627078 size 0x74 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef ovrp_GetTrackingCalibratedOrigin() ;

/// @brief Method ovrp_RecenterTrackingOrigin addr 0x26270ec size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_RecenterTrackingOrigin(uint32_t flags) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_1_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8754))
// CS Name: OVRPlugin::OVRP_1_1_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_1_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_1_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_1_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_1_0(GlobalNamespace__OVRPlugin__OVRP_1_1_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_1_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_1_0(GlobalNamespace__OVRPlugin__OVRP_1_1_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_1_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_1_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_1_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_1_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_1_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_1_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_1_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetInitialized addr 0x26271ec size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetInitialized() ;

/// @brief Method _ovrp_GetVersion addr 0x2627254 size 0x68 virtual false final false
static ::cordl_internals::intptr_t _ovrp_GetVersion() ;

/// @brief Method ovrp_GetVersion addr 0x26272bc size 0x84 virtual false final false
static ::StringW ovrp_GetVersion() ;

/// @brief Method _ovrp_GetNativeSDKVersion addr 0x2627340 size 0x68 virtual false final false
static ::cordl_internals::intptr_t _ovrp_GetNativeSDKVersion() ;

/// @brief Method ovrp_GetNativeSDKVersion addr 0x26273a8 size 0x84 virtual false final false
static ::StringW ovrp_GetNativeSDKVersion() ;

/// @brief Method ovrp_GetAudioOutId addr 0x262742c size 0x68 virtual false final false
static ::cordl_internals::intptr_t ovrp_GetAudioOutId() ;

/// @brief Method ovrp_GetAudioInId addr 0x2627494 size 0x68 virtual false final false
static ::cordl_internals::intptr_t ovrp_GetAudioInId() ;

/// @brief Method ovrp_GetEyeTextureScale addr 0x26274fc size 0x64 virtual false final false
static float_t ovrp_GetEyeTextureScale() ;

/// @brief Method ovrp_SetEyeTextureScale addr 0x2627560 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetEyeTextureScale(float_t value) ;

/// @brief Method ovrp_GetTrackingOrientationSupported addr 0x26275dc size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetTrackingOrientationSupported() ;

/// @brief Method ovrp_GetTrackingOrientationEnabled addr 0x2627644 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetTrackingOrientationEnabled() ;

/// @brief Method ovrp_SetTrackingOrientationEnabled addr 0x26276ac size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetTrackingOrientationEnabled(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

/// @brief Method ovrp_GetTrackingPositionSupported addr 0x2627728 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetTrackingPositionSupported() ;

/// @brief Method ovrp_GetTrackingPositionEnabled addr 0x2627790 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetTrackingPositionEnabled() ;

/// @brief Method ovrp_SetTrackingPositionEnabled addr 0x26277f8 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetTrackingPositionEnabled(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

/// @brief Method ovrp_GetNodePresent addr 0x2627874 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetNodePresent(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method ovrp_GetNodeOrientationTracked addr 0x26278f0 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetNodeOrientationTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method ovrp_GetNodePositionTracked addr 0x262796c size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetNodePositionTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method ovrp_GetNodeFrustum addr 0x26279e8 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf ovrp_GetNodeFrustum(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method ovrp_GetControllerState addr 0x2627a64 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState ovrp_GetControllerState(uint32_t controllerMask) ;

/// @brief Method ovrp_GetSystemCpuLevel addr 0x2627ae8 size 0x68 virtual false final false
static int32_t ovrp_GetSystemCpuLevel() ;

/// @brief Method ovrp_SetSystemCpuLevel addr 0x2627b50 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetSystemCpuLevel(int32_t value) ;

/// @brief Method ovrp_GetSystemGpuLevel addr 0x2627bcc size 0x68 virtual false final false
static int32_t ovrp_GetSystemGpuLevel() ;

/// @brief Method ovrp_SetSystemGpuLevel addr 0x2627c34 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetSystemGpuLevel(int32_t value) ;

/// @brief Method ovrp_GetSystemPowerSavingMode addr 0x2627cb0 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetSystemPowerSavingMode() ;

/// @brief Method ovrp_GetSystemDisplayFrequency addr 0x2627d18 size 0x64 virtual false final false
static float_t ovrp_GetSystemDisplayFrequency() ;

/// @brief Method ovrp_GetSystemVSyncCount addr 0x2627d7c size 0x68 virtual false final false
static int32_t ovrp_GetSystemVSyncCount() ;

/// @brief Method ovrp_GetSystemVolume addr 0x2627de4 size 0x64 virtual false final false
static float_t ovrp_GetSystemVolume() ;

/// @brief Method ovrp_GetSystemBatteryStatus addr 0x2627e48 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus ovrp_GetSystemBatteryStatus() ;

/// @brief Method ovrp_GetSystemBatteryLevel addr 0x2627eb0 size 0x64 virtual false final false
static float_t ovrp_GetSystemBatteryLevel() ;

/// @brief Method ovrp_GetSystemBatteryTemperature addr 0x2627f14 size 0x64 virtual false final false
static float_t ovrp_GetSystemBatteryTemperature() ;

/// @brief Method _ovrp_GetSystemProductName addr 0x2627f78 size 0x68 virtual false final false
static ::cordl_internals::intptr_t _ovrp_GetSystemProductName() ;

/// @brief Method ovrp_GetSystemProductName addr 0x2627fe0 size 0x84 virtual false final false
static ::StringW ovrp_GetSystemProductName() ;

/// @brief Method ovrp_ShowSystemUI addr 0x2628064 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_ShowSystemUI(GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI ui) ;

/// @brief Method ovrp_GetAppMonoscopic addr 0x26280e0 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetAppMonoscopic() ;

/// @brief Method ovrp_SetAppMonoscopic addr 0x2628148 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetAppMonoscopic(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

/// @brief Method ovrp_GetAppHasVrFocus addr 0x26281c4 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetAppHasVrFocus() ;

/// @brief Method ovrp_GetAppShouldQuit addr 0x262822c size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetAppShouldQuit() ;

/// @brief Method ovrp_GetAppShouldRecenter addr 0x2628294 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetAppShouldRecenter() ;

/// @brief Method _ovrp_GetAppLatencyTimings addr 0x26282fc size 0x68 virtual false final false
static ::cordl_internals::intptr_t _ovrp_GetAppLatencyTimings() ;

/// @brief Method ovrp_GetAppLatencyTimings addr 0x2628364 size 0x84 virtual false final false
static ::StringW ovrp_GetAppLatencyTimings() ;

/// @brief Method ovrp_GetUserPresent addr 0x26283e8 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetUserPresent() ;

/// @brief Method ovrp_GetUserIPD addr 0x2628450 size 0x64 virtual false final false
static float_t ovrp_GetUserIPD() ;

/// @brief Method ovrp_SetUserIPD addr 0x26284b4 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetUserIPD(float_t value) ;

/// @brief Method ovrp_GetUserEyeDepth addr 0x2628530 size 0x64 virtual false final false
static float_t ovrp_GetUserEyeDepth() ;

/// @brief Method ovrp_SetUserEyeDepth addr 0x2628594 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetUserEyeDepth(float_t value) ;

/// @brief Method ovrp_GetUserEyeHeight addr 0x2628610 size 0x64 virtual false final false
static float_t ovrp_GetUserEyeHeight() ;

/// @brief Method ovrp_SetUserEyeHeight addr 0x2628674 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetUserEyeHeight(float_t value) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_2_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8755))
// CS Name: OVRPlugin::OVRP_1_2_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_2_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_2_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_2_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_2_0(GlobalNamespace__OVRPlugin__OVRP_1_2_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_2_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_2_0(GlobalNamespace__OVRPlugin__OVRP_1_2_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_2_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_2_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_2_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_2_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_2_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_2_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_2_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_SetSystemVSyncCount addr 0x2628774 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetSystemVSyncCount(int32_t vsyncCount) ;

/// @brief Method ovrpi_SetTrackingCalibratedOrigin addr 0x26287f0 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrpi_SetTrackingCalibratedOrigin() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_3_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8756))
// CS Name: OVRPlugin::OVRP_1_3_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_3_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_3_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_3_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_3_0(GlobalNamespace__OVRPlugin__OVRP_1_3_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_3_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_3_0(GlobalNamespace__OVRPlugin__OVRP_1_3_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_3_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_3_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_3_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_3_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_3_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_3_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_3_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetEyeOcclusionMeshEnabled addr 0x26288dc size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetEyeOcclusionMeshEnabled() ;

/// @brief Method ovrp_SetEyeOcclusionMeshEnabled addr 0x2628944 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetEyeOcclusionMeshEnabled(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

/// @brief Method ovrp_GetSystemHeadphonesPresent addr 0x26289c0 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetSystemHeadphonesPresent() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_5_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8757))
// CS Name: OVRPlugin::OVRP_1_5_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_5_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_5_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_5_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_5_0(GlobalNamespace__OVRPlugin__OVRP_1_5_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_5_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_5_0(GlobalNamespace__OVRPlugin__OVRP_1_5_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_5_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_5_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_5_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_5_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_5_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_5_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_5_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetSystemRegion addr 0x2628aac size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion ovrp_GetSystemRegion() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_6_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8758))
// CS Name: OVRPlugin::OVRP_1_6_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_6_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_6_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_6_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_6_0(GlobalNamespace__OVRPlugin__OVRP_1_6_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_6_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_6_0(GlobalNamespace__OVRPlugin__OVRP_1_6_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_6_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_6_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_6_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_6_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_6_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_6_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_6_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetTrackingIPDEnabled addr 0x2628b98 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetTrackingIPDEnabled() ;

/// @brief Method ovrp_SetTrackingIPDEnabled addr 0x2628c00 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetTrackingIPDEnabled(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

/// @brief Method ovrp_GetControllerHapticsDesc addr 0x2628c7c size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc ovrp_GetControllerHapticsDesc(uint32_t controllerMask) ;

/// @brief Method ovrp_GetControllerHapticsState addr 0x2628d00 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState ovrp_GetControllerHapticsState(uint32_t controllerMask) ;

/// @brief Method ovrp_SetControllerHaptics addr 0x2628d7c size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetControllerHaptics(uint32_t controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer hapticsBuffer) ;

/// @brief Method ovrp_SetOverlayQuad3 addr 0x2628e10 size 0xec virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetOverlayQuad3(uint32_t flags, ::cordl_internals::intptr_t textureLeft, ::cordl_internals::intptr_t textureRight, ::cordl_internals::intptr_t device, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef pose, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f scale, int32_t layerIndex) ;

/// @brief Method ovrp_GetEyeRecommendedResolutionScale addr 0x2628efc size 0x64 virtual false final false
static float_t ovrp_GetEyeRecommendedResolutionScale() ;

/// @brief Method ovrp_GetAppCpuStartToGpuEndTime addr 0x2628f60 size 0x64 virtual false final false
static float_t ovrp_GetAppCpuStartToGpuEndTime() ;

/// @brief Method ovrp_GetSystemRecommendedMSAALevel addr 0x2628fc4 size 0x68 virtual false final false
static int32_t ovrp_GetSystemRecommendedMSAALevel() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_7_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8759))
// CS Name: OVRPlugin::OVRP_1_7_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_7_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_7_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_7_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_7_0(GlobalNamespace__OVRPlugin__OVRP_1_7_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_7_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_7_0(GlobalNamespace__OVRPlugin__OVRP_1_7_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_7_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_7_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_7_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_7_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_7_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_7_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_7_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetAppChromaticCorrection addr 0x26290b0 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetAppChromaticCorrection() ;

/// @brief Method ovrp_SetAppChromaticCorrection addr 0x2629118 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetAppChromaticCorrection(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_8_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8760))
// CS Name: OVRPlugin::OVRP_1_8_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_8_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_8_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_8_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_8_0(GlobalNamespace__OVRPlugin__OVRP_1_8_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_8_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_8_0(GlobalNamespace__OVRPlugin__OVRP_1_8_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_8_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_8_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_8_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_8_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_8_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_8_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_8_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetBoundaryConfigured addr 0x2629218 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetBoundaryConfigured() ;

/// @brief Method ovrp_TestBoundaryNode addr 0x2629280 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult ovrp_TestBoundaryNode(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType) ;

/// @brief Method ovrp_TestBoundaryPoint addr 0x2629314 size 0xac virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult ovrp_TestBoundaryPoint(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f point, GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType) ;

/// @brief Method ovrp_GetBoundaryGeometry addr 0x26293c0 size 0xa0 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry ovrp_GetBoundaryGeometry(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType) ;

/// @brief Method ovrp_GetBoundaryDimensions addr 0x2629460 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f ovrp_GetBoundaryDimensions(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType) ;

/// @brief Method ovrp_GetBoundaryVisible addr 0x26294dc size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetBoundaryVisible() ;

/// @brief Method ovrp_SetBoundaryVisible addr 0x2629544 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetBoundaryVisible(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool value) ;

/// @brief Method ovrp_Update2 addr 0x26295c0 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_Update2(int32_t stateId, int32_t frameIndex, double_t predictionSeconds) ;

/// @brief Method ovrp_GetNodePose2 addr 0x2629654 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef ovrp_GetNodePose2(int32_t stateId, GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method ovrp_GetNodeVelocity2 addr 0x26296e8 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef ovrp_GetNodeVelocity2(int32_t stateId, GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method ovrp_GetNodeAcceleration2 addr 0x262977c size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef ovrp_GetNodeAcceleration2(int32_t stateId, GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_9_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8761))
// CS Name: OVRPlugin::OVRP_1_9_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_9_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_9_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_9_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_9_0(GlobalNamespace__OVRPlugin__OVRP_1_9_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_9_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_9_0(GlobalNamespace__OVRPlugin__OVRP_1_9_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_9_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_9_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_9_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_9_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_9_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_9_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_9_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetSystemHeadsetType addr 0x2629894 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset ovrp_GetSystemHeadsetType() ;

/// @brief Method ovrp_GetActiveController addr 0x26298fc size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller ovrp_GetActiveController() ;

/// @brief Method ovrp_GetConnectedControllers addr 0x2629964 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller ovrp_GetConnectedControllers() ;

/// @brief Method ovrp_GetBoundaryGeometry2 addr 0x26299cc size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetBoundaryGeometry2(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType, ::cordl_internals::intptr_t points, ByRef<int32_t> pointsCount) ;

/// @brief Method ovrp_GetAppPerfStats addr 0x2629a60 size 0x88 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats ovrp_GetAppPerfStats() ;

/// @brief Method ovrp_ResetAppPerfStats addr 0x2629ae8 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_ResetAppPerfStats() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_10_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8762))
// CS Name: OVRPlugin::OVRP_1_10_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_10_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_10_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_10_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_10_0(GlobalNamespace__OVRPlugin__OVRP_1_10_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_10_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_10_0(GlobalNamespace__OVRPlugin__OVRP_1_10_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_10_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_10_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_10_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_10_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_10_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_10_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_10_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_11_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8763))
// CS Name: OVRPlugin::OVRP_1_11_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_11_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_11_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_11_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_11_0(GlobalNamespace__OVRPlugin__OVRP_1_11_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_11_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_11_0(GlobalNamespace__OVRPlugin__OVRP_1_11_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_11_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_11_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_11_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_11_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_11_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_11_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_11_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_SetDesiredEyeTextureFormat addr 0x2629c58 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_SetDesiredEyeTextureFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value) ;

/// @brief Method ovrp_GetDesiredEyeTextureFormat addr 0x2629cd4 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat ovrp_GetDesiredEyeTextureFormat() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_12_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8764))
// CS Name: OVRPlugin::OVRP_1_12_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_12_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_12_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_12_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_12_0(GlobalNamespace__OVRPlugin__OVRP_1_12_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_12_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_12_0(GlobalNamespace__OVRPlugin__OVRP_1_12_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_12_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_12_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_12_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_12_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_12_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_12_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_12_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetAppFramerate addr 0x2629dc0 size 0x64 virtual false final false
static float_t ovrp_GetAppFramerate() ;

/// @brief Method ovrp_GetNodePoseState addr 0x2629e24 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef ovrp_GetNodePoseState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method ovrp_GetControllerState2 addr 0x2629eb8 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2 ovrp_GetControllerState2(uint32_t controllerMask) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_15_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8765))
// CS Name: OVRPlugin::OVRP_1_15_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_15_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_15_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_15_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_15_0(GlobalNamespace__OVRPlugin__OVRP_1_15_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_15_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_15_0(GlobalNamespace__OVRPlugin__OVRP_1_15_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_15_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_15_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_15_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_15_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_15_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_15_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_15_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;

/// @brief Field OVRP_EXTERNAL_CAMERA_NAME_SIZE offset 0
static constexpr int32_t  OVRP_EXTERNAL_CAMERA_NAME_SIZE{32};


// Methods

/// @brief Method ovrp_InitializeMixedReality addr 0x2629fc0 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_InitializeMixedReality() ;

/// @brief Method ovrp_ShutdownMixedReality addr 0x262a028 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_ShutdownMixedReality() ;

/// @brief Method ovrp_GetMixedRealityInitialized addr 0x262a090 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetMixedRealityInitialized() ;

/// @brief Method ovrp_UpdateExternalCamera addr 0x262a0f8 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_UpdateExternalCamera() ;

/// @brief Method ovrp_GetExternalCameraCount addr 0x262a160 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetExternalCameraCount(ByRef<int32_t> cameraCount) ;

/// @brief Method ovrp_GetExternalCameraName addr 0x262a1dc size 0x110 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetExternalCameraName(int32_t cameraId, ::ArrayW<char16_t> cameraName) ;

/// @brief Method ovrp_GetExternalCameraIntrinsics addr 0x262a2ec size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetExternalCameraIntrinsics(int32_t cameraId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics> cameraIntrinsics) ;

/// @brief Method ovrp_GetExternalCameraExtrinsics addr 0x262a370 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetExternalCameraExtrinsics(int32_t cameraId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics> cameraExtrinsics) ;

/// @brief Method ovrp_CalculateLayerDesc addr 0x262a3f4 size 0xcc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_CalculateLayerDesc(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape shape, GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout layout, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei> textureSize, int32_t mipLevels, int32_t sampleCount, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat format, int32_t layerFlags, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal> layerDesc) ;

/// @brief Method ovrp_EnqueueSetupLayer addr 0x262a4c0 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_EnqueueSetupLayer(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal> desc, ::cordl_internals::intptr_t layerId) ;

/// @brief Method ovrp_EnqueueDestroyLayer addr 0x262a544 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_EnqueueDestroyLayer(::cordl_internals::intptr_t layerId) ;

/// @brief Method ovrp_GetLayerTextureStageCount addr 0x262a5c0 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetLayerTextureStageCount(int32_t layerId, ByRef<int32_t> layerTextureStageCount) ;

/// @brief Method ovrp_GetLayerTexturePtr addr 0x262a644 size 0x9c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetLayerTexturePtr(int32_t layerId, int32_t stage, GlobalNamespace::GlobalNamespace__OVRPlugin__Eye eyeId, ByRef<::cordl_internals::intptr_t> textureHandle) ;

/// @brief Method ovrp_EnqueueSubmitLayer addr 0x262a6e0 size 0xcc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_EnqueueSubmitLayer(uint32_t flags, ::cordl_internals::intptr_t textureLeft, ::cordl_internals::intptr_t textureRight, int32_t layerId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> pose, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> scale, int32_t layerIndex) ;

/// @brief Method ovrp_GetNodeFrustum2 addr 0x262a7ac size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetNodeFrustum2(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2> nodeFrustum) ;

/// @brief Method ovrp_GetEyeTextureArrayEnabled addr 0x262a830 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetEyeTextureArrayEnabled() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_16_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8766))
// CS Name: OVRPlugin::OVRP_1_16_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_16_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_16_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_16_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_16_0(GlobalNamespace__OVRPlugin__OVRP_1_16_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_16_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_16_0(GlobalNamespace__OVRPlugin__OVRP_1_16_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_16_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_16_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_16_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_16_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_16_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_16_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_16_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_UpdateCameraDevices addr 0x262a91c size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_UpdateCameraDevices() ;

/// @brief Method ovrp_IsCameraDeviceAvailable addr 0x262a984 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_IsCameraDeviceAvailable(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice) ;

/// @brief Method ovrp_SetCameraDevicePreferredColorFrameSize addr 0x262aa00 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetCameraDevicePreferredColorFrameSize(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei preferredColorFrameSize) ;

/// @brief Method ovrp_OpenCameraDevice addr 0x262aa84 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_OpenCameraDevice(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice) ;

/// @brief Method ovrp_CloseCameraDevice addr 0x262ab00 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_CloseCameraDevice(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice) ;

/// @brief Method ovrp_HasCameraDeviceOpened addr 0x262ab7c size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_HasCameraDeviceOpened(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice) ;

/// @brief Method ovrp_IsCameraDeviceColorFrameAvailable addr 0x262abf8 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_IsCameraDeviceColorFrameAvailable(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice) ;

/// @brief Method ovrp_GetCameraDeviceColorFrameSize addr 0x262ac74 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetCameraDeviceColorFrameSize(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei> colorFrameSize) ;

/// @brief Method ovrp_GetCameraDeviceColorFrameBgraPixels addr 0x262acf8 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetCameraDeviceColorFrameBgraPixels(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice cameraDevice, ByRef<::cordl_internals::intptr_t> colorFrameBgraPixels, ByRef<int32_t> colorFrameRowPitch) ;

/// @brief Method ovrp_GetControllerState4 addr 0x262ad8c size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetControllerState4(uint32_t controllerMask, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4> controllerState) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_17_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8767))
// CS Name: OVRPlugin::OVRP_1_17_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_17_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_17_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_17_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_17_0(GlobalNamespace__OVRPlugin__OVRP_1_17_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_17_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_17_0(GlobalNamespace__OVRPlugin__OVRP_1_17_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_17_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_17_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_17_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_17_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_17_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_17_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_17_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_18_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8768))
// CS Name: OVRPlugin::OVRP_1_18_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_18_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_18_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_18_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_18_0(GlobalNamespace__OVRPlugin__OVRP_1_18_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_18_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_18_0(GlobalNamespace__OVRPlugin__OVRP_1_18_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_18_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_18_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_18_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_18_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_18_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_18_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_18_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_SetHandNodePoseStateLatency addr 0x262af18 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetHandNodePoseStateLatency(double_t latencyInSeconds) ;

/// @brief Method ovrp_GetHandNodePoseStateLatency addr 0x262af94 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetHandNodePoseStateLatency(ByRef<double_t> latencyInSeconds) ;

/// @brief Method ovrp_GetAppHasInputFocus addr 0x262b010 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetAppHasInputFocus(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> appHasInputFocus) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_19_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8769))
// CS Name: OVRPlugin::OVRP_1_19_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_19_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_19_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_19_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_19_0(GlobalNamespace__OVRPlugin__OVRP_1_19_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_19_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_19_0(GlobalNamespace__OVRPlugin__OVRP_1_19_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_19_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_19_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_19_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_19_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_19_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_19_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_19_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_21_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8770))
// CS Name: OVRPlugin::OVRP_1_21_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_21_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_21_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_21_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_21_0(GlobalNamespace__OVRPlugin__OVRP_1_21_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_21_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_21_0(GlobalNamespace__OVRPlugin__OVRP_1_21_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_21_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_21_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_21_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_21_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_21_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_21_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_21_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetTiledMultiResSupported addr 0x262b194 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetTiledMultiResSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> foveationSupported) ;

/// @brief Method ovrp_GetTiledMultiResLevel addr 0x262b210 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetTiledMultiResLevel(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel> level) ;

/// @brief Method ovrp_SetTiledMultiResLevel addr 0x262b28c size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetTiledMultiResLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel level) ;

/// @brief Method ovrp_GetGPUUtilSupported addr 0x262b308 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetGPUUtilSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> gpuUtilSupported) ;

/// @brief Method ovrp_GetGPUUtilLevel addr 0x262b384 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetGPUUtilLevel(ByRef<float_t> gpuUtil) ;

/// @brief Method ovrp_GetSystemDisplayFrequency2 addr 0x262b400 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSystemDisplayFrequency2(ByRef<float_t> systemDisplayFrequency) ;

/// @brief Method ovrp_GetSystemDisplayAvailableFrequencies addr 0x262b47c size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSystemDisplayAvailableFrequencies(::cordl_internals::intptr_t systemDisplayAvailableFrequencies, ByRef<int32_t> numFrequencies) ;

/// @brief Method ovrp_SetSystemDisplayFrequency addr 0x262b500 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetSystemDisplayFrequency(float_t requestedFrequency) ;

/// @brief Method ovrp_GetAppAsymmetricFov addr 0x262b57c size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetAppAsymmetricFov(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> useAsymmetricFov) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_28_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8771))
// CS Name: OVRPlugin::OVRP_1_28_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_28_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_28_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_28_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_28_0(GlobalNamespace__OVRPlugin__OVRP_1_28_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_28_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_28_0(GlobalNamespace__OVRPlugin__OVRP_1_28_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_28_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_28_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_28_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_28_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_28_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_28_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_28_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetDominantHand addr 0x262b67c size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetDominantHand(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness> dominantHand) ;

/// @brief Method ovrp_SendEvent addr 0x262b6f8 size 0xb4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SendEvent(::StringW name, ::StringW param) ;

/// @brief Method ovrp_EnqueueSetupLayer2 addr 0x262b7ac size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_EnqueueSetupLayer2(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal> desc, int32_t compositionDepth, ::cordl_internals::intptr_t layerId) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_29_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8772))
// CS Name: OVRPlugin::OVRP_1_29_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_29_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_29_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_29_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_29_0(GlobalNamespace__OVRPlugin__OVRP_1_29_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_29_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_29_0(GlobalNamespace__OVRPlugin__OVRP_1_29_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_29_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_29_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_29_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_29_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_29_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_29_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_29_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetLayerAndroidSurfaceObject addr 0x262b8c4 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetLayerAndroidSurfaceObject(int32_t layerId, ByRef<::cordl_internals::intptr_t> surfaceObject) ;

/// @brief Method ovrp_SetHeadPoseModifier addr 0x262b948 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetHeadPoseModifier(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> relativeRotation, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> relativeTranslation) ;

/// @brief Method ovrp_GetHeadPoseModifier addr 0x262b9cc size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetHeadPoseModifier(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> relativeRotation, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> relativeTranslation) ;

/// @brief Method ovrp_GetNodePoseStateRaw addr 0x262ba50 size 0x9c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetNodePoseStateRaw(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, int32_t frameIndex, GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef> nodePoseState) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_30_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8773))
// CS Name: OVRPlugin::OVRP_1_30_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_30_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_30_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_30_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_30_0(GlobalNamespace__OVRPlugin__OVRP_1_30_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_30_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_30_0(GlobalNamespace__OVRPlugin__OVRP_1_30_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_30_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_30_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_30_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_30_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_30_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_30_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_30_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetCurrentTrackingTransformPose addr 0x262bb70 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetCurrentTrackingTransformPose(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> trackingTransformPose) ;

/// @brief Method ovrp_GetTrackingTransformRawPose addr 0x262bbec size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetTrackingTransformRawPose(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> trackingTransformRawPose) ;

/// @brief Method ovrp_SendEvent2 addr 0x262bc68 size 0xd8 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SendEvent2(::StringW name, ::StringW param, ::StringW source) ;

/// @brief Method ovrp_IsPerfMetricsSupported addr 0x262bd40 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_IsPerfMetricsSupported(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics perfMetrics, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> isSupported) ;

/// @brief Method ovrp_GetPerfMetricsFloat addr 0x262bdc4 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetPerfMetricsFloat(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics perfMetrics, ByRef<float_t> value) ;

/// @brief Method ovrp_GetPerfMetricsInt addr 0x262be48 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetPerfMetricsInt(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics perfMetrics, ByRef<int32_t> value) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_31_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8774))
// CS Name: OVRPlugin::OVRP_1_31_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_31_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_31_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_31_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_31_0(GlobalNamespace__OVRPlugin__OVRP_1_31_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_31_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_31_0(GlobalNamespace__OVRPlugin__OVRP_1_31_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_31_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_31_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_31_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_31_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_31_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_31_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_31_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetTimeInSeconds addr 0x262bf50 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetTimeInSeconds(ByRef<double_t> value) ;

/// @brief Method ovrp_SetColorScaleAndOffset addr 0x262bfcc size 0xdc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetColorScaleAndOffset(UnityEngine::Vector4 colorScale, UnityEngine::Vector4 colorOffset, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool applyToAllLayers) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_32_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8775))
// CS Name: OVRPlugin::OVRP_1_32_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_32_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_32_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_32_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_32_0(GlobalNamespace__OVRPlugin__OVRP_1_32_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_32_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_32_0(GlobalNamespace__OVRPlugin__OVRP_1_32_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_32_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_32_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_32_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_32_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_32_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_32_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_32_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_AddCustomMetadata addr 0x262c12c size 0xb4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_AddCustomMetadata(::StringW name, ::StringW param) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_34_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8776))
// CS Name: OVRPlugin::OVRP_1_34_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_34_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_34_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_34_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_34_0(GlobalNamespace__OVRPlugin__OVRP_1_34_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_34_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_34_0(GlobalNamespace__OVRPlugin__OVRP_1_34_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_34_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_34_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_34_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_34_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_34_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_34_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_34_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_EnqueueSubmitLayer2 addr 0x262c264 size 0xfc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_EnqueueSubmitLayer2(uint32_t flags, ::cordl_internals::intptr_t textureLeft, ::cordl_internals::intptr_t textureRight, int32_t layerId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> pose, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> scale, int32_t layerIndex, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool overrideTextureRectMatrix, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf> textureRectMatrix, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool overridePerLayerColorScaleAndOffset, ByRef<UnityEngine::Vector4> colorScale, ByRef<UnityEngine::Vector4> colorOffset) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_35_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8777))
// CS Name: OVRPlugin::OVRP_1_35_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_35_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_35_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_35_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_35_0(GlobalNamespace__OVRPlugin__OVRP_1_35_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_35_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_35_0(GlobalNamespace__OVRPlugin__OVRP_1_35_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_35_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_35_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_35_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_35_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_35_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_35_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_35_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_36_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8778))
// CS Name: OVRPlugin::OVRP_1_36_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_36_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_36_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_36_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_36_0(GlobalNamespace__OVRPlugin__OVRP_1_36_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_36_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_36_0(GlobalNamespace__OVRPlugin__OVRP_1_36_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_36_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_36_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_36_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_36_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_36_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_36_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_36_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_37_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8779))
// CS Name: OVRPlugin::OVRP_1_37_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_37_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_37_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_37_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_37_0(GlobalNamespace__OVRPlugin__OVRP_1_37_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_37_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_37_0(GlobalNamespace__OVRPlugin__OVRP_1_37_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_37_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_37_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_37_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_37_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_37_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_37_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_37_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_38_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8780))
// CS Name: OVRPlugin::OVRP_1_38_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_38_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_38_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_38_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_38_0(GlobalNamespace__OVRPlugin__OVRP_1_38_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_38_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_38_0(GlobalNamespace__OVRPlugin__OVRP_1_38_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_38_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_38_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_38_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_38_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_38_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_38_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_38_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetTrackingTransformRelativePose addr 0x262c570 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetTrackingTransformRelativePose(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> trackingTransformRelativePose, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin trackingOrigin) ;

/// @brief Method ovrp_Media_Initialize addr 0x2622520 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_Initialize() ;

/// @brief Method ovrp_Media_Shutdown addr 0x2622648 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_Shutdown() ;

/// @brief Method ovrp_Media_GetInitialized addr 0x2622784 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_GetInitialized(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> initialized) ;

/// @brief Method ovrp_Media_Update addr 0x26228c0 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_Update() ;

/// @brief Method ovrp_Media_GetMrcActivationMode addr 0x26229f4 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_GetMrcActivationMode(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode> activationMode) ;

/// @brief Method ovrp_Media_SetMrcActivationMode addr 0x2622b38 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_SetMrcActivationMode(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode activationMode) ;

/// @brief Method ovrp_Media_IsMrcEnabled addr 0x2623038 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_IsMrcEnabled(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> mrcEnabled) ;

/// @brief Method ovrp_Media_IsMrcActivated addr 0x2623184 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_IsMrcActivated(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> mrcActivated) ;

/// @brief Method ovrp_Media_UseMrcDebugCamera addr 0x26232d0 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_UseMrcDebugCamera(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> useMrcDebugCamera) ;

/// @brief Method ovrp_Media_SetMrcInputVideoBufferType addr 0x2623414 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_SetMrcInputVideoBufferType(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType inputVideoBufferType) ;

/// @brief Method ovrp_Media_GetMrcInputVideoBufferType addr 0x2623558 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_GetMrcInputVideoBufferType(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType> inputVideoBufferType) ;

/// @brief Method ovrp_Media_SetMrcFrameSize addr 0x26236ac size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_SetMrcFrameSize(int32_t frameWidth, int32_t frameHeight) ;

/// @brief Method ovrp_Media_GetMrcFrameSize addr 0x2623810 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_GetMrcFrameSize(ByRef<int32_t> frameWidth, ByRef<int32_t> frameHeight) ;

/// @brief Method ovrp_Media_SetMrcAudioSampleRate addr 0x262395c size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_SetMrcAudioSampleRate(int32_t sampleRate) ;

/// @brief Method ovrp_Media_GetMrcAudioSampleRate addr 0x2623a9c size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_GetMrcAudioSampleRate(ByRef<int32_t> sampleRate) ;

/// @brief Method ovrp_Media_SetMrcFrameImageFlipped addr 0x2623be4 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_SetMrcFrameImageFlipped(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool flipped) ;

/// @brief Method ovrp_Media_GetMrcFrameImageFlipped addr 0x2623d2c size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_GetMrcFrameImageFlipped(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> flipped) ;

/// @brief Method ovrp_Media_EncodeMrcFrame addr 0x26241c0 size 0xbc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_EncodeMrcFrame(::cordl_internals::intptr_t rawBuffer, ::cordl_internals::intptr_t audioDataPtr, int32_t audioDataLen, int32_t audioChannels, double_t timestamp, ByRef<int32_t> outSyncId) ;

/// @brief Method ovrp_Media_EncodeMrcFrameWithDualTextures addr 0x2624348 size 0xc4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_EncodeMrcFrameWithDualTextures(::cordl_internals::intptr_t backgroundTextureHandle, ::cordl_internals::intptr_t foregroundTextureHandle, ::cordl_internals::intptr_t audioData, int32_t audioDataLen, int32_t audioChannels, double_t timestamp, ByRef<int32_t> outSyncId) ;

/// @brief Method ovrp_Media_SyncMrcFrame addr 0x26249bc size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_SyncMrcFrame(int32_t syncId) ;

/// @brief Method ovrp_SetDeveloperMode addr 0x262c5f4 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetDeveloperMode(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool active) ;

/// @brief Method ovrp_GetNodeOrientationValid addr 0x262c670 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetNodeOrientationValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> nodeOrientationValid) ;

/// @brief Method ovrp_GetNodePositionValid addr 0x262c6f4 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetNodePositionValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> nodePositionValid) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_39_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8781))
// CS Name: OVRPlugin::OVRP_1_39_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_39_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_39_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_39_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_39_0(GlobalNamespace__OVRPlugin__OVRP_1_39_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_39_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_39_0(GlobalNamespace__OVRPlugin__OVRP_1_39_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_39_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_39_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_39_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_39_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_39_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_39_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_39_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_40_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8782))
// CS Name: OVRPlugin::OVRP_1_40_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_40_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_40_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_40_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_40_0(GlobalNamespace__OVRPlugin__OVRP_1_40_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_40_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_40_0(GlobalNamespace__OVRPlugin__OVRP_1_40_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_40_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_40_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_40_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_40_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_40_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_40_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_40_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_41_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8783))
// CS Name: OVRPlugin::OVRP_1_41_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_41_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_41_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_41_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_41_0(GlobalNamespace__OVRPlugin__OVRP_1_41_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_41_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_41_0(GlobalNamespace__OVRPlugin__OVRP_1_41_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_41_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_41_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_41_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_41_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_41_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_41_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_41_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_42_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8784))
// CS Name: OVRPlugin::OVRP_1_42_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_42_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_42_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_42_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_42_0(GlobalNamespace__OVRPlugin__OVRP_1_42_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_42_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_42_0(GlobalNamespace__OVRPlugin__OVRP_1_42_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_42_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_42_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_42_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_42_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_42_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_42_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_42_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetAdaptiveGpuPerformanceScale2 addr 0x262c988 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetAdaptiveGpuPerformanceScale2(ByRef<float_t> adaptiveGpuPerformanceScale) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_43_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8785))
// CS Name: OVRPlugin::OVRP_1_43_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_43_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_43_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_43_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_43_0(GlobalNamespace__OVRPlugin__OVRP_1_43_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_43_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_43_0(GlobalNamespace__OVRPlugin__OVRP_1_43_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_43_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_43_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_43_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_43_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_43_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_43_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_43_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_44_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8786))
// CS Name: OVRPlugin::OVRP_1_44_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_44_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_44_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_44_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_44_0(GlobalNamespace__OVRPlugin__OVRP_1_44_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_44_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_44_0(GlobalNamespace__OVRPlugin__OVRP_1_44_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_44_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_44_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_44_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_44_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_44_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_44_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_44_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetHandTrackingEnabled addr 0x262cb0c size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetHandTrackingEnabled(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> handTrackingEnabled) ;

/// @brief Method ovrp_GetHandState addr 0x262cb88 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetHandState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, GlobalNamespace::GlobalNamespace__OVRPlugin__Hand hand, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal> handState) ;

/// @brief Method ovrp_GetSkeleton addr 0x262cc1c size 0xc0 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSkeleton(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType skeletonType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton> skeleton) ;

/// @brief Method ovrp_GetMesh addr 0x262ccdc size 0x80 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetMesh(GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType meshType, ::cordl_internals::intptr_t meshPtr) ;

/// @brief Method ovrp_OverrideExternalCameraFov addr 0x262cd5c size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_OverrideExternalCameraFov(int32_t cameraId, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool useOverriddenFov, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf> fov) ;

/// @brief Method ovrp_GetUseOverriddenExternalCameraFov addr 0x262cdf0 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetUseOverriddenExternalCameraFov(int32_t cameraId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> useOverriddenFov) ;

/// @brief Method ovrp_OverrideExternalCameraStaticPose addr 0x262ce74 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_OverrideExternalCameraStaticPose(int32_t cameraId, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool useOverriddenPose, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> poseInStageOrigin) ;

/// @brief Method ovrp_GetUseOverriddenExternalCameraStaticPose addr 0x262cf08 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetUseOverriddenExternalCameraStaticPose(int32_t cameraId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> useOverriddenStaticPose) ;

/// @brief Method ovrp_ResetDefaultExternalCamera addr 0x262cf8c size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_ResetDefaultExternalCamera() ;

/// @brief Method ovrp_SetDefaultExternalCamera addr 0x262cff4 size 0xac virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetDefaultExternalCamera(::StringW cameraName, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics> cameraIntrinsics, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics> cameraExtrinsics) ;

/// @brief Method ovrp_GetLocalTrackingSpaceRecenterCount addr 0x262d0a0 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetLocalTrackingSpaceRecenterCount(ByRef<int32_t> recenterCount) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_45_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8787))
// CS Name: OVRPlugin::OVRP_1_45_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_45_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_45_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_45_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_45_0(GlobalNamespace__OVRPlugin__OVRP_1_45_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_45_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_45_0(GlobalNamespace__OVRPlugin__OVRP_1_45_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_45_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_45_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_45_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_45_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_45_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_45_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_45_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetSystemHmd3DofModeEnabled addr 0x262d1a0 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSystemHmd3DofModeEnabled(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> enabled) ;

/// @brief Method ovrp_Media_SetAvailableQueueIndexVulkan addr 0x2624b00 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_SetAvailableQueueIndexVulkan(uint32_t queueIndexVk) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_46_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8788))
// CS Name: OVRPlugin::OVRP_1_46_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_46_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_46_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_46_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_46_0(GlobalNamespace__OVRPlugin__OVRP_1_46_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_46_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_46_0(GlobalNamespace__OVRPlugin__OVRP_1_46_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_46_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_46_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_46_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_46_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_46_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_46_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_46_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetTiledMultiResDynamic addr 0x262d2a0 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetTiledMultiResDynamic(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> isDynamic) ;

/// @brief Method ovrp_SetTiledMultiResDynamic addr 0x262d31c size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetTiledMultiResDynamic(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool isDynamic) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_47_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8789))
// CS Name: OVRPlugin::OVRP_1_47_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_47_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_47_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_47_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_47_0(GlobalNamespace__OVRPlugin__OVRP_1_47_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_47_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_47_0(GlobalNamespace__OVRPlugin__OVRP_1_47_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_47_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_47_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_47_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_47_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_47_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_47_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_47_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_48_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8790))
// CS Name: OVRPlugin::OVRP_1_48_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_48_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_48_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_48_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_48_0(GlobalNamespace__OVRPlugin__OVRP_1_48_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_48_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_48_0(GlobalNamespace__OVRPlugin__OVRP_1_48_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_48_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_48_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_48_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_48_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_48_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_48_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_48_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_SetExternalCameraProperties addr 0x262d4a0 size 0xac virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetExternalCameraProperties(::StringW cameraName, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics> cameraIntrinsics, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics> cameraExtrinsics) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_49_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8791))
// CS Name: OVRPlugin::OVRP_1_49_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_49_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_49_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_49_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_49_0(GlobalNamespace__OVRPlugin__OVRP_1_49_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_49_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_49_0(GlobalNamespace__OVRPlugin__OVRP_1_49_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_49_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_49_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_49_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_49_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_49_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_49_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_49_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;

/// @brief Field OVRP_ANCHOR_NAME_SIZE offset 0
static constexpr int32_t  OVRP_ANCHOR_NAME_SIZE{32};


// Methods

/// @brief Method ovrp_SetClientColorDesc addr 0x262d5d0 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetClientColorDesc(GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace colorSpace) ;

/// @brief Method ovrp_GetHmdColorDesc addr 0x262d64c size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetHmdColorDesc(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace> colorSpace) ;

/// @brief Method ovrp_Media_EncodeMrcFrameWithPoseTime addr 0x26240fc size 0xc4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_EncodeMrcFrameWithPoseTime(::cordl_internals::intptr_t rawBuffer, ::cordl_internals::intptr_t audioDataPtr, int32_t audioDataLen, int32_t audioChannels, double_t timestamp, double_t poseTime, ByRef<int32_t> outSyncId) ;

/// @brief Method ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime addr 0x262427c size 0xcc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime(::cordl_internals::intptr_t backgroundTextureHandle, ::cordl_internals::intptr_t foregroundTextureHandle, ::cordl_internals::intptr_t audioData, int32_t audioDataLen, int32_t audioChannels, double_t timestamp, double_t poseTime, ByRef<int32_t> outSyncId) ;

/// @brief Method ovrp_Media_SetHeadsetControllerPose addr 0x2624cc8 size 0xc4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_SetHeadsetControllerPose(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef headsetPose, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef leftControllerPose, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef rightControllerPose) ;

/// @brief Method ovrp_Media_EnumerateCameraAnchorHandles addr 0x262d6c8 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_EnumerateCameraAnchorHandles(ByRef<int32_t> anchorCount, ByRef<::cordl_internals::intptr_t> CameraAnchorHandle) ;

/// @brief Method ovrp_Media_GetCurrentCameraAnchorHandle addr 0x262d74c size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_GetCurrentCameraAnchorHandle(ByRef<::cordl_internals::intptr_t> anchorHandle) ;

/// @brief Method ovrp_Media_GetCameraAnchorName addr 0x262d7c8 size 0x110 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_GetCameraAnchorName(::cordl_internals::intptr_t anchorHandle, ::ArrayW<char16_t> cameraName) ;

/// @brief Method ovrp_Media_GetCameraAnchorHandle addr 0x262d8d8 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_GetCameraAnchorHandle(::cordl_internals::intptr_t anchorName, ByRef<::cordl_internals::intptr_t> anchorHandle) ;

/// @brief Method ovrp_Media_GetCameraAnchorType addr 0x262d95c size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_GetCameraAnchorType(::cordl_internals::intptr_t anchorHandle, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType> anchorType) ;

/// @brief Method ovrp_Media_CreateCustomCameraAnchor addr 0x262d9e0 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_CreateCustomCameraAnchor(::cordl_internals::intptr_t anchorName, ByRef<::cordl_internals::intptr_t> anchorHandle) ;

/// @brief Method ovrp_Media_DestroyCustomCameraAnchor addr 0x262da64 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_DestroyCustomCameraAnchor(::cordl_internals::intptr_t anchorHandle) ;

/// @brief Method ovrp_Media_GetCustomCameraAnchorPose addr 0x262dae0 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_GetCustomCameraAnchorPose(::cordl_internals::intptr_t anchorHandle, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> pose) ;

/// @brief Method ovrp_Media_SetCustomCameraAnchorPose addr 0x262db64 size 0x90 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_SetCustomCameraAnchorPose(::cordl_internals::intptr_t anchorHandle, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef pose) ;

/// @brief Method ovrp_Media_GetCameraMinMaxDistance addr 0x262dbf4 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_GetCameraMinMaxDistance(::cordl_internals::intptr_t anchorHandle, ByRef<double_t> minDistance, ByRef<double_t> maxDistance) ;

/// @brief Method ovrp_Media_SetCameraMinMaxDistance addr 0x262dc88 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_SetCameraMinMaxDistance(::cordl_internals::intptr_t anchorHandle, double_t minDistance, double_t maxDistance) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_50_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8792))
// CS Name: OVRPlugin::OVRP_1_50_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_50_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_50_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_50_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_50_0(GlobalNamespace__OVRPlugin__OVRP_1_50_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_50_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_50_0(GlobalNamespace__OVRPlugin__OVRP_1_50_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_50_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_50_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_50_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_50_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_50_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_50_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_50_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_51_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8793))
// CS Name: OVRPlugin::OVRP_1_51_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_51_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_51_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_51_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_51_0(GlobalNamespace__OVRPlugin__OVRP_1_51_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_51_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_51_0(GlobalNamespace__OVRPlugin__OVRP_1_51_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_51_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_51_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_51_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_51_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_51_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_51_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_51_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_52_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8794))
// CS Name: OVRPlugin::OVRP_1_52_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_52_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_52_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_52_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_52_0(GlobalNamespace__OVRPlugin__OVRP_1_52_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_52_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_52_0(GlobalNamespace__OVRPlugin__OVRP_1_52_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_52_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_52_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_52_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_52_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_52_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_52_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_52_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_53_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8795))
// CS Name: OVRPlugin::OVRP_1_53_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_53_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_53_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_53_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_53_0(GlobalNamespace__OVRPlugin__OVRP_1_53_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_53_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_53_0(GlobalNamespace__OVRPlugin__OVRP_1_53_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_53_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_53_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_53_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_53_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_53_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_53_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_53_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_54_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8796))
// CS Name: OVRPlugin::OVRP_1_54_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_54_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_54_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_54_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_54_0(GlobalNamespace__OVRPlugin__OVRP_1_54_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_54_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_54_0(GlobalNamespace__OVRPlugin__OVRP_1_54_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_54_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_54_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_54_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_54_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_54_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_54_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_54_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_Media_SetPlatformInitialized addr 0x2622c74 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_SetPlatformInitialized() ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_55_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8797))
// CS Name: OVRPlugin::OVRP_1_55_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_55_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_55_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_55_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_55_0(GlobalNamespace__OVRPlugin__OVRP_1_55_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_55_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_55_0(GlobalNamespace__OVRPlugin__OVRP_1_55_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_55_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_55_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_55_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_55_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_55_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_55_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_55_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetSkeleton2 addr 0x262e034 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSkeleton2(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType skeletonType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal> skeleton) ;

/// @brief Method ovrp_PollEvent addr 0x262e0b8 size 0xe0 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_PollEvent(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer> eventDataBuffer) ;

/// @brief Method ovrp_GetNativeXrApiType addr 0x262e198 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetNativeXrApiType(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi> xrApi) ;

/// @brief Method ovrp_GetNativeOpenXRHandles addr 0x262e214 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetNativeOpenXRHandles(ByRef<uint64_t> xrInstance, ByRef<uint64_t> xrSession) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_55_1
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8798))
// CS Name: OVRPlugin::OVRP_1_55_1
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_55_1 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_55_1() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_55_1", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_55_1(GlobalNamespace__OVRPlugin__OVRP_1_55_1 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_55_1", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_55_1(GlobalNamespace__OVRPlugin__OVRP_1_55_1&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_55_1(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_55_1& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_55_1& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_55_1& operator=(GlobalNamespace__OVRPlugin__OVRP_1_55_1&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_55_1& operator=(GlobalNamespace__OVRPlugin__OVRP_1_55_1 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_PollEvent2 addr 0x262e31c size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_PollEvent2(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventType> eventType, ByRef<::cordl_internals::intptr_t> eventData) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_56_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8799))
// CS Name: OVRPlugin::OVRP_1_56_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_56_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_56_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_56_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_56_0(GlobalNamespace__OVRPlugin__OVRP_1_56_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_56_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_56_0(GlobalNamespace__OVRPlugin__OVRP_1_56_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_56_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_56_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_56_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_56_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_56_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_56_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_56_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_57_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8800))
// CS Name: OVRPlugin::OVRP_1_57_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_57_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_57_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_57_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_57_0(GlobalNamespace__OVRPlugin__OVRP_1_57_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_57_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_57_0(GlobalNamespace__OVRPlugin__OVRP_1_57_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_57_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_57_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_57_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_57_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_57_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_57_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_57_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_Media_GetPlatformCameraMode addr 0x2622da8 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_GetPlatformCameraMode(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode> platformCameraMode) ;

/// @brief Method ovrp_Media_SetPlatformCameraMode addr 0x2622eec size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_SetPlatformCameraMode(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode platformCameraMode) ;

/// @brief Method ovrp_SetEyeFovPremultipliedAlphaMode addr 0x262e4a8 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetEyeFovPremultipliedAlphaMode(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool enabled) ;

/// @brief Method ovrp_GetEyeFovPremultipliedAlphaMode addr 0x262e524 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetEyeFovPremultipliedAlphaMode(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> enabled) ;

/// @brief Method ovrp_SetKeyboardOverlayUV addr 0x262e5a0 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetKeyboardOverlayUV(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f uv) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_58_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8801))
// CS Name: OVRPlugin::OVRP_1_58_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_58_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_58_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_58_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_58_0(GlobalNamespace__OVRPlugin__OVRP_1_58_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_58_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_58_0(GlobalNamespace__OVRPlugin__OVRP_1_58_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_58_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_58_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_58_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_58_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_58_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_58_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_58_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_59_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8802))
// CS Name: OVRPlugin::OVRP_1_59_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_59_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_59_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_59_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_59_0(GlobalNamespace__OVRPlugin__OVRP_1_59_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_59_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_59_0(GlobalNamespace__OVRPlugin__OVRP_1_59_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_59_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_59_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_59_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_59_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_59_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_59_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_59_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_60_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8803))
// CS Name: OVRPlugin::OVRP_1_60_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_60_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_60_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_60_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_60_0(GlobalNamespace__OVRPlugin__OVRP_1_60_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_60_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_60_0(GlobalNamespace__OVRPlugin__OVRP_1_60_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_60_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_60_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_60_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_60_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_60_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_60_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_60_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_61_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8804))
// CS Name: OVRPlugin::OVRP_1_61_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_61_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_61_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_61_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_61_0(GlobalNamespace__OVRPlugin__OVRP_1_61_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_61_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_61_0(GlobalNamespace__OVRPlugin__OVRP_1_61_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_61_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_61_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_61_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_61_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_61_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_61_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_61_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_62_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8805))
// CS Name: OVRPlugin::OVRP_1_62_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_62_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_62_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_62_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_62_0(GlobalNamespace__OVRPlugin__OVRP_1_62_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_62_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_62_0(GlobalNamespace__OVRPlugin__OVRP_1_62_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_62_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_62_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_62_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_62_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_62_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_62_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_62_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_63_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8806))
// CS Name: OVRPlugin::OVRP_1_63_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_63_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_63_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_63_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_63_0(GlobalNamespace__OVRPlugin__OVRP_1_63_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_63_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_63_0(GlobalNamespace__OVRPlugin__OVRP_1_63_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_63_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_63_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_63_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_63_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_63_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_63_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_63_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_InitializeInsightPassthrough addr 0x262e93c size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_InitializeInsightPassthrough() ;

/// @brief Method ovrp_ShutdownInsightPassthrough addr 0x262e9a4 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_ShutdownInsightPassthrough() ;

/// @brief Method ovrp_GetInsightPassthroughInitialized addr 0x262ea0c size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ovrp_GetInsightPassthroughInitialized() ;

/// @brief Method ovrp_SetInsightPassthroughStyle addr 0x262ea74 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetInsightPassthroughStyle(int32_t layerId, GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle style) ;

/// @brief Method ovrp_CreateInsightTriangleMesh addr 0x262eb08 size 0xb4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_CreateInsightTriangleMesh(int32_t layerId, ::cordl_internals::intptr_t vertices, int32_t vertexCount, ::cordl_internals::intptr_t triangles, int32_t triangleCount, ByRef<uint64_t> meshHandle) ;

/// @brief Method ovrp_DestroyInsightTriangleMesh addr 0x262ebbc size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_DestroyInsightTriangleMesh(uint64_t meshHandle) ;

/// @brief Method ovrp_AddInsightPassthroughSurfaceGeometry addr 0x262ec38 size 0xac virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_AddInsightPassthroughSurfaceGeometry(int32_t layerId, uint64_t meshHandle, UnityEngine::Matrix4x4 T_world_model, ByRef<uint64_t> geometryInstanceHandle) ;

/// @brief Method ovrp_DestroyInsightPassthroughGeometryInstance addr 0x262ece4 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_DestroyInsightPassthroughGeometryInstance(uint64_t geometryInstanceHandle) ;

/// @brief Method ovrp_UpdateInsightPassthroughGeometryTransform addr 0x262ed60 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_UpdateInsightPassthroughGeometryTransform(uint64_t geometryInstanceHandle, UnityEngine::Matrix4x4 T_world_model) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_64_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8807))
// CS Name: OVRPlugin::OVRP_1_64_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_64_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_64_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_64_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_64_0(GlobalNamespace__OVRPlugin__OVRP_1_64_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_64_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_64_0(GlobalNamespace__OVRPlugin__OVRP_1_64_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_64_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_64_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_64_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_64_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_64_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_64_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_64_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_LocateSpace addr 0x262ee78 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_LocateSpace(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> location, ByRef<uint64_t> space, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin trackingOrigin) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_65_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8808))
// CS Name: OVRPlugin::OVRP_1_65_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_65_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_65_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_65_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_65_0(GlobalNamespace__OVRPlugin__OVRP_1_65_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_65_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_65_0(GlobalNamespace__OVRPlugin__OVRP_1_65_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_65_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_65_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_65_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_65_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_65_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_65_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_65_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_KtxLoadFromMemory addr 0x2625058 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_KtxLoadFromMemory(ByRef<::cordl_internals::intptr_t> data, uint32_t length, ByRef<::cordl_internals::intptr_t> texture) ;

/// @brief Method ovrp_KtxTextureWidth addr 0x2625228 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_KtxTextureWidth(::cordl_internals::intptr_t texture, ByRef<uint32_t> width) ;

/// @brief Method ovrp_KtxTextureHeight addr 0x26253e8 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_KtxTextureHeight(::cordl_internals::intptr_t texture, ByRef<uint32_t> height) ;

/// @brief Method ovrp_KtxTranscode addr 0x26255a8 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_KtxTranscode(::cordl_internals::intptr_t texture, uint32_t format) ;

/// @brief Method ovrp_KtxGetTextureData addr 0x2625930 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_KtxGetTextureData(::cordl_internals::intptr_t texture, ::cordl_internals::intptr_t data, uint32_t bufferSize) ;

/// @brief Method ovrp_KtxTextureSize addr 0x2625768 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_KtxTextureSize(::cordl_internals::intptr_t texture, ByRef<uint32_t> size) ;

/// @brief Method ovrp_KtxDestroy addr 0x2625af0 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_KtxDestroy(::cordl_internals::intptr_t texture) ;

/// @brief Method ovrp_DestroySpace addr 0x262ef90 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_DestroySpace(ByRef<uint64_t> space) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_66_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8809))
// CS Name: OVRPlugin::OVRP_1_66_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_66_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_66_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_66_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_66_0(GlobalNamespace__OVRPlugin__OVRP_1_66_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_66_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_66_0(GlobalNamespace__OVRPlugin__OVRP_1_66_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_66_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_66_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_66_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_66_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_66_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_66_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_66_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetInsightPassthroughInitializationState addr 0x262f090 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetInsightPassthroughInitializationState() ;

/// @brief Method ovrp_Media_IsCastingToRemoteClient addr 0x2624e60 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_Media_IsCastingToRemoteClient(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> isCasting) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_67_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8810))
// CS Name: OVRPlugin::OVRP_1_67_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_67_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_67_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_67_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_67_0(GlobalNamespace__OVRPlugin__OVRP_1_67_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_67_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_67_0(GlobalNamespace__OVRPlugin__OVRP_1_67_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_67_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_67_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_67_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_67_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_67_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_67_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_67_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_68_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8811))
// CS Name: OVRPlugin::OVRP_1_68_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_68_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_68_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_68_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_68_0(GlobalNamespace__OVRPlugin__OVRP_1_68_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_68_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_68_0(GlobalNamespace__OVRPlugin__OVRP_1_68_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_68_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_68_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_68_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_68_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_68_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_68_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_68_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;

/// @brief Field OVRP_RENDER_MODEL_MAX_PATH_LENGTH offset 0
static constexpr int32_t  OVRP_RENDER_MODEL_MAX_PATH_LENGTH{256};

/// @brief Field OVRP_RENDER_MODEL_MAX_NAME_LENGTH offset 0
static constexpr int32_t  OVRP_RENDER_MODEL_MAX_NAME_LENGTH{64};


// Methods

/// @brief Method ovrp_LoadRenderModel addr 0x262f200 size 0x9c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_LoadRenderModel(uint64_t modelKey, uint32_t bufferInputCapacity, ByRef<uint32_t> bufferCountOutput, ::cordl_internals::intptr_t buffer) ;

/// @brief Method ovrp_GetRenderModelPaths addr 0x262f29c size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetRenderModelPaths(uint32_t index, ::cordl_internals::intptr_t path) ;

/// @brief Method ovrp_GetRenderModelProperties addr 0x262f320 size 0xf8 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetRenderModelProperties(::StringW path, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal> properties) ;

/// @brief Method ovrp_SetInsightPassthroughKeyboardHandsIntensity addr 0x262f418 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetInsightPassthroughKeyboardHandsIntensity(int32_t layerId, GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity intensity) ;

/// @brief Method ovrp_StartKeyboardTracking addr 0x262f4ac size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_StartKeyboardTracking(uint64_t trackedKeyboardId) ;

/// @brief Method ovrp_StopKeyboardTracking addr 0x262f528 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_StopKeyboardTracking() ;

/// @brief Method ovrp_GetSystemKeyboardDescription addr 0x262f590 size 0xf4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSystemKeyboardDescription(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags keyboardQueryFlags, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription> keyboardDescription) ;

/// @brief Method ovrp_GetKeyboardState addr 0x262f684 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetKeyboardState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState> keyboardState) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_69_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8812))
// CS Name: OVRPlugin::OVRP_1_69_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_69_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_69_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_69_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_69_0(GlobalNamespace__OVRPlugin__OVRP_1_69_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_69_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_69_0(GlobalNamespace__OVRPlugin__OVRP_1_69_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_69_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_69_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_69_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_69_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_69_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_69_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_69_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetNodePoseStateImmediate addr 0x262f79c size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetNodePoseStateImmediate(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef> nodePoseState) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_70_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8813))
// CS Name: OVRPlugin::OVRP_1_70_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_70_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_70_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_70_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_70_0(GlobalNamespace__OVRPlugin__OVRP_1_70_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_70_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_70_0(GlobalNamespace__OVRPlugin__OVRP_1_70_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_70_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_70_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_70_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_70_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_70_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_70_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_70_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_SetLogCallback2 addr 0x262f8a4 size 0x80 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetLogCallback2(GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType logCallback) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_71_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8814))
// CS Name: OVRPlugin::OVRP_1_71_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_71_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_71_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_71_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_71_0(GlobalNamespace__OVRPlugin__OVRP_1_71_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_71_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_71_0(GlobalNamespace__OVRPlugin__OVRP_1_71_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_71_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_71_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_71_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_71_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_71_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_71_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_71_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_IsInsightPassthroughSupported addr 0x262f9a8 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_IsInsightPassthroughSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> supported) ;

/// @brief Method ovrp_UnityOpenXR_SetClientVersion addr 0x2625c64 size 0x94 virtual false final false
static void ovrp_UnityOpenXR_SetClientVersion(int32_t majorVersion, int32_t minorVersion, int32_t patchVersion) ;

/// @brief Method ovrp_UnityOpenXR_HookGetInstanceProcAddr addr 0x2625dbc size 0x7c virtual false final false
static ::cordl_internals::intptr_t ovrp_UnityOpenXR_HookGetInstanceProcAddr(::cordl_internals::intptr_t func) ;

/// @brief Method ovrp_UnityOpenXR_OnInstanceCreate addr 0x2625f00 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_UnityOpenXR_OnInstanceCreate(uint64_t xrInstance) ;

/// @brief Method ovrp_UnityOpenXR_OnInstanceDestroy addr 0x262603c size 0x7c virtual false final false
static void ovrp_UnityOpenXR_OnInstanceDestroy(uint64_t xrInstance) ;

/// @brief Method ovrp_UnityOpenXR_OnSessionCreate addr 0x2626178 size 0x7c virtual false final false
static void ovrp_UnityOpenXR_OnSessionCreate(uint64_t xrSession) ;

/// @brief Method ovrp_UnityOpenXR_OnAppSpaceChange addr 0x26262b4 size 0x7c virtual false final false
static void ovrp_UnityOpenXR_OnAppSpaceChange(uint64_t xrSpace) ;

/// @brief Method ovrp_UnityOpenXR_OnSessionStateChange addr 0x2626404 size 0x84 virtual false final false
static void ovrp_UnityOpenXR_OnSessionStateChange(int32_t oldState, int32_t newState) ;

/// @brief Method ovrp_UnityOpenXR_OnSessionBegin addr 0x2626548 size 0x7c virtual false final false
static void ovrp_UnityOpenXR_OnSessionBegin(uint64_t xrSession) ;

/// @brief Method ovrp_UnityOpenXR_OnSessionEnd addr 0x2626684 size 0x7c virtual false final false
static void ovrp_UnityOpenXR_OnSessionEnd(uint64_t xrSession) ;

/// @brief Method ovrp_UnityOpenXR_OnSessionExiting addr 0x26267c0 size 0x7c virtual false final false
static void ovrp_UnityOpenXR_OnSessionExiting(uint64_t xrSession) ;

/// @brief Method ovrp_UnityOpenXR_OnSessionDestroy addr 0x26268fc size 0x7c virtual false final false
static void ovrp_UnityOpenXR_OnSessionDestroy(uint64_t xrSession) ;

/// @brief Method ovrp_SetSuggestedCpuPerformanceLevel addr 0x262fa24 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetSuggestedCpuPerformanceLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel perfLevel) ;

/// @brief Method ovrp_GetSuggestedCpuPerformanceLevel addr 0x262faa0 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSuggestedCpuPerformanceLevel(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel> perfLevel) ;

/// @brief Method ovrp_SetSuggestedGpuPerformanceLevel addr 0x262fb1c size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetSuggestedGpuPerformanceLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel perfLevel) ;

/// @brief Method ovrp_GetSuggestedGpuPerformanceLevel addr 0x262fb98 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSuggestedGpuPerformanceLevel(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel> perfLevel) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_72_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8815))
// CS Name: OVRPlugin::OVRP_1_72_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_72_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_72_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_72_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_72_0(GlobalNamespace__OVRPlugin__OVRP_1_72_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_72_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_72_0(GlobalNamespace__OVRPlugin__OVRP_1_72_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_72_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_72_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_72_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_72_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_72_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_72_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_72_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_CreateSpatialAnchor addr 0x262fc98 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_CreateSpatialAnchor(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo> createInfo, ByRef<uint64_t> requestId) ;

/// @brief Method ovrp_SetSpaceComponentStatus addr 0x262fd1c size 0xac virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetSpaceComponentStatus(ByRef<uint64_t> space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType componentType, GlobalNamespace::GlobalNamespace__OVRPlugin__Bool enable, double_t timeout, ByRef<uint64_t> requestId) ;

/// @brief Method ovrp_GetSpaceComponentStatus addr 0x262fdc8 size 0x98 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSpaceComponentStatus(ByRef<uint64_t> space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType componentType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> enabled, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> changePending) ;

/// @brief Method ovrp_EnumerateSpaceSupportedComponents addr 0x262fe60 size 0xa4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_EnumerateSpaceSupportedComponents(ByRef<uint64_t> space, uint32_t componentTypesCapacityInput, ByRef<uint32_t> componentTypesCountOutput, ByRef<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType>> componentTypes) ;

/// @brief Method ovrp_SaveSpace addr 0x262ff04 size 0x9c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SaveSpace(ByRef<uint64_t> space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation location, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode mode, ByRef<uint64_t> requestId) ;

/// @brief Method ovrp_QuerySpaces addr 0x262ffa0 size 0xdc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_QuerySpaces(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo> queryInfo, ByRef<uint64_t> requestId) ;

/// @brief Method ovrp_RetrieveSpaceQueryResults addr 0x263007c size 0x9c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_RetrieveSpaceQueryResults(ByRef<uint64_t> requestId, uint32_t resultCapacityInput, ByRef<uint32_t> resultCountOutput, ::cordl_internals::intptr_t results) ;

/// @brief Method ovrp_EraseSpace addr 0x2630118 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_EraseSpace(ByRef<uint64_t> space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation location, ByRef<uint64_t> requestId) ;

/// @brief Method ovrp_GetSpaceContainer addr 0x26301ac size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSpaceContainer(ByRef<uint64_t> space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceContainerInternal> containerInternal) ;

/// @brief Method ovrp_GetSpaceBoundingBox2D addr 0x2630230 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSpaceBoundingBox2D(ByRef<uint64_t> space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf> rect) ;

/// @brief Method ovrp_GetSpaceBoundingBox3D addr 0x26302b4 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSpaceBoundingBox3D(ByRef<uint64_t> space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf> bounds) ;

/// @brief Method ovrp_GetSpaceSemanticLabels addr 0x2630338 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSpaceSemanticLabels(ByRef<uint64_t> space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal> labelsInternal) ;

/// @brief Method ovrp_GetSpaceRoomLayout addr 0x26303bc size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSpaceRoomLayout(ByRef<uint64_t> space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal> roomLayoutInternal) ;

/// @brief Method ovrp_GetSpaceBoundary2D addr 0x2630440 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSpaceBoundary2D(ByRef<uint64_t> space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal> boundaryInternal) ;

/// @brief Method ovrp_RequestSceneCapture addr 0x26304c4 size 0xdc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_RequestSceneCapture(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal> request, ByRef<uint64_t> requestId) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_73_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8816))
// CS Name: OVRPlugin::OVRP_1_73_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_73_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_73_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_73_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_73_0(GlobalNamespace__OVRPlugin__OVRP_1_73_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_73_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_73_0(GlobalNamespace__OVRPlugin__OVRP_1_73_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_73_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_73_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_73_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_73_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_73_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_73_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_73_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_74_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8817))
// CS Name: OVRPlugin::OVRP_1_74_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_74_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_74_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_74_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_74_0(GlobalNamespace__OVRPlugin__OVRP_1_74_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_74_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_74_0(GlobalNamespace__OVRPlugin__OVRP_1_74_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_74_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_74_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_74_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_74_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_74_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_74_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_74_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetSpaceUuid addr 0x26306a8 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSpaceUuid(ByRef<uint64_t> space, ByRef<System::Guid> uuid) ;

/// @brief Method ovrp_GetRenderModelProperties2 addr 0x263072c size 0x100 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetRenderModelProperties2(::StringW path, GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags flags, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal> properties) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_75_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8818))
// CS Name: OVRPlugin::OVRP_1_75_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_75_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_75_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_75_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_75_0(GlobalNamespace__OVRPlugin__OVRP_1_75_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_75_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_75_0(GlobalNamespace__OVRPlugin__OVRP_1_75_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_75_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_75_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_75_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_75_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_75_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_75_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_75_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_76_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8819))
// CS Name: OVRPlugin::OVRP_1_76_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_76_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_76_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_76_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_76_0(GlobalNamespace__OVRPlugin__OVRP_1_76_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_76_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_76_0(GlobalNamespace__OVRPlugin__OVRP_1_76_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_76_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_76_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_76_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_76_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_76_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_76_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_76_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetNodePoseStateAtTime addr 0x2630934 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetNodePoseStateAtTime(double_t time, GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef> nodePoseState) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_78_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8820))
// CS Name: OVRPlugin::OVRP_1_78_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_78_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_78_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_78_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_78_0(GlobalNamespace__OVRPlugin__OVRP_1_78_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_78_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_78_0(GlobalNamespace__OVRPlugin__OVRP_1_78_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_78_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_78_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_78_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_78_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_78_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_78_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_78_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_GetPassthroughCapabilityFlags addr 0x2630a4c size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetPassthroughCapabilityFlags(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags> capabilityFlags) ;

/// @brief Method ovrp_GetFoveationEyeTrackedSupported addr 0x2630ac8 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetFoveationEyeTrackedSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> foveationSupported) ;

/// @brief Method ovrp_GetFoveationEyeTracked addr 0x2630b44 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetFoveationEyeTracked(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> isEyeTrackedFoveation) ;

/// @brief Method ovrp_SetFoveationEyeTracked addr 0x2630bc0 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetFoveationEyeTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool isEyeTrackedFoveation) ;

/// @brief Method ovrp_StartFaceTracking addr 0x2630c3c size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_StartFaceTracking() ;

/// @brief Method ovrp_StopFaceTracking addr 0x2630ca4 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_StopFaceTracking() ;

/// @brief Method ovrp_StartBodyTracking addr 0x2630d0c size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_StartBodyTracking() ;

/// @brief Method ovrp_StopBodyTracking addr 0x2630d74 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_StopBodyTracking() ;

/// @brief Method ovrp_StartEyeTracking addr 0x2630ddc size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_StartEyeTracking() ;

/// @brief Method ovrp_StopEyeTracking addr 0x2630e44 size 0x68 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_StopEyeTracking() ;

/// @brief Method ovrp_GetEyeTrackingSupported addr 0x2630eac size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetEyeTrackingSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> eyeTrackingSupported) ;

/// @brief Method ovrp_GetFaceTrackingSupported addr 0x2630f28 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetFaceTrackingSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> faceTrackingSupported) ;

/// @brief Method ovrp_GetBodyTrackingEnabled addr 0x2630fa4 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetBodyTrackingEnabled(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> value) ;

/// @brief Method ovrp_GetBodyTrackingSupported addr 0x2631020 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetBodyTrackingSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> value) ;

/// @brief Method ovrp_GetBodyState addr 0x263109c size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetBodyState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal> bodyState) ;

/// @brief Method ovrp_GetFaceTrackingEnabled addr 0x2631130 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetFaceTrackingEnabled(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> faceTrackingEnabled) ;

/// @brief Method ovrp_GetFaceState addr 0x26311ac size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetFaceState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal> faceState) ;

/// @brief Method ovrp_GetEyeTrackingEnabled addr 0x2631240 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetEyeTrackingEnabled(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> eyeTrackingEnabled) ;

/// @brief Method ovrp_GetEyeGazesState addr 0x26312bc size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetEyeGazesState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal> eyeGazesState) ;

/// @brief Method ovrp_GetControllerState5 addr 0x2631350 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetControllerState5(uint32_t controllerMask, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5> controllerState) ;

/// @brief Method ovrp_SetControllerLocalizedVibration addr 0x26313d4 size 0x9c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetControllerLocalizedVibration(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation hapticsLocationMask, float_t frequency, float_t amplitude) ;

/// @brief Method ovrp_GetLocalDimmingSupported addr 0x2631470 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetLocalDimmingSupported(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> localDimmingSupported) ;

/// @brief Method ovrp_SetLocalDimming addr 0x26314ec size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetLocalDimming(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool localDimmingMode) ;

/// @brief Method ovrp_GetLocalDimming addr 0x2631568 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetLocalDimming(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Bool> localDimmingMode) ;

/// @brief Method ovrp_GetCurrentInteractionProfile addr 0x26315e4 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetCurrentInteractionProfile(GlobalNamespace::GlobalNamespace__OVRPlugin__Hand hand, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile> interactionProfile) ;

/// @brief Method ovrp_SetControllerHapticsAmplitudeEnvelope addr 0x2631668 size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetControllerHapticsAmplitudeEnvelope(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration hapticsVibration) ;

/// @brief Method ovrp_SetControllerHapticsPcm addr 0x26316fc size 0x8c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SetControllerHapticsPcm(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration hapticsVibration) ;

/// @brief Method ovrp_GetControllerSampleRateHz addr 0x2631788 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetControllerSampleRateHz(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controller, ByRef<float_t> sampleRateHz) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_79_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8821))
// CS Name: OVRPlugin::OVRP_1_79_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_79_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_79_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_79_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_79_0(GlobalNamespace__OVRPlugin__OVRP_1_79_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_79_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_79_0(GlobalNamespace__OVRPlugin__OVRP_1_79_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_79_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_79_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_79_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_79_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_79_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_79_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_79_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

/// @brief Method ovrp_ShareSpaces addr 0x2631890 size 0xac virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_ShareSpaces(void* spaces, uint32_t numSpaces, void* userHandles, uint32_t numUsers, ByRef<uint64_t> requestId) ;

/// @brief Method ovrp_SaveSpaceList addr 0x263193c size 0x9c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_SaveSpaceList(void* spaces, uint32_t numSpaces, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation location, ByRef<uint64_t> requestId) ;

/// @brief Method ovrp_GetSpaceUserId addr 0x26319d8 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_GetSpaceUserId(ByRef<uint64_t> spaceUserHandle, ByRef<uint64_t> spaceUserId) ;

/// @brief Method ovrp_CreateSpaceUser addr 0x2631a5c size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_CreateSpaceUser(ByRef<uint64_t> spaceUserId, ByRef<uint64_t> spaceUserHandle) ;

/// @brief Method ovrp_DestroySpaceUser addr 0x2631ae0 size 0x7c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_DestroySpaceUser(ByRef<uint64_t> userHandle) ;

/// @brief Method ovrp_LocateSpace2 addr 0x2631b5c size 0x94 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_LocateSpace2(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationf> location, ByRef<uint64_t> space, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin trackingOrigin) ;

/// @brief Method ovrp_DeclareUser addr 0x2631bf0 size 0x80 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ovrp_DeclareUser(ByRef<uint64_t> userId, ByRef<uint64_t> userHandle) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_81_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8822))
// CS Name: OVRPlugin::OVRP_1_81_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_81_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_81_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_81_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_81_0(GlobalNamespace__OVRPlugin__OVRP_1_81_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_81_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_81_0(GlobalNamespace__OVRPlugin__OVRP_1_81_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_81_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_81_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_81_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_81_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_81_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_81_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_81_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRP_1_82_0
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8823))
// CS Name: OVRPlugin::OVRP_1_82_0
class CORDL_TYPE GlobalNamespace__OVRPlugin__OVRP_1_82_0 : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~GlobalNamespace__OVRPlugin__OVRP_1_82_0() = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_82_0", modifiers: " const&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_82_0(GlobalNamespace__OVRPlugin__OVRP_1_82_0 const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "GlobalNamespace__OVRPlugin__OVRP_1_82_0", modifiers: "&&", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__OVRP_1_82_0(GlobalNamespace__OVRPlugin__OVRP_1_82_0&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__OVRP_1_82_0(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr GlobalNamespace__OVRPlugin__OVRP_1_82_0& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_82_0& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr GlobalNamespace__OVRPlugin__OVRP_1_82_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_82_0&& o) noexcept = default;
  constexpr GlobalNamespace__OVRPlugin__OVRP_1_82_0& operator=(GlobalNamespace__OVRPlugin__OVRP_1_82_0 const& o) noexcept = default;
                


// Fields

static System::Version __declspec(property(get=__get_version, put=__set_version))  version;

static void __set_version(System::Version value) ;

static System::Version __get_version() ;


// Methods

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::OVRPlugin
namespace GlobalNamespace {
// Is value type: false
// Dependencies: {}
// Self: TypeDefinitionIndex(TypeDefinitionIndex(8824))
// CS Name: OVRPlugin
class CORDL_TYPE OVRPlugin : public ::bs_hook::Il2CppWrapperType {
public:
// Declarations
using OVRP_1_82_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_82_0;

using OVRP_1_81_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_81_0;

using OVRP_1_79_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0;

using OVRP_1_78_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0;

using OVRP_1_76_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_76_0;

using OVRP_1_75_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_75_0;

using OVRP_1_74_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0;

using OVRP_1_73_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_73_0;

using OVRP_1_72_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0;

using OVRP_1_71_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0;

using OVRP_1_70_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_70_0;

using OVRP_1_69_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_69_0;

using OVRP_1_68_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0;

using OVRP_1_67_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_67_0;

using OVRP_1_66_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0;

using OVRP_1_65_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0;

using OVRP_1_64_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_64_0;

using OVRP_1_63_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0;

using OVRP_1_62_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_62_0;

using OVRP_1_61_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_61_0;

using OVRP_1_60_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_60_0;

using OVRP_1_59_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_59_0;

using OVRP_1_58_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_58_0;

using OVRP_1_57_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0;

using OVRP_1_56_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_56_0;

using OVRP_1_55_1 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_1;

using OVRP_1_55_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0;

using OVRP_1_54_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_54_0;

using OVRP_1_53_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_53_0;

using OVRP_1_52_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_52_0;

using OVRP_1_51_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_51_0;

using OVRP_1_50_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_50_0;

using OVRP_1_49_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0;

using OVRP_1_48_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_48_0;

using OVRP_1_47_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_47_0;

using OVRP_1_46_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0;

using OVRP_1_45_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0;

using OVRP_1_44_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0;

using OVRP_1_43_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_43_0;

using OVRP_1_42_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_42_0;

using OVRP_1_41_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_41_0;

using OVRP_1_40_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_40_0;

using OVRP_1_39_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_39_0;

using OVRP_1_38_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0;

using OVRP_1_37_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_37_0;

using OVRP_1_36_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_36_0;

using OVRP_1_35_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_35_0;

using OVRP_1_34_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_34_0;

using OVRP_1_32_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_32_0;

using OVRP_1_31_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0;

using OVRP_1_30_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0;

using OVRP_1_29_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0;

using OVRP_1_28_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0;

using OVRP_1_21_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0;

using OVRP_1_19_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_19_0;

using OVRP_1_18_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0;

using OVRP_1_17_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_17_0;

using OVRP_1_16_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0;

using OVRP_1_15_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0;

using OVRP_1_12_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0;

using OVRP_1_11_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0;

using OVRP_1_10_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_10_0;

using OVRP_1_9_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0;

using OVRP_1_8_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0;

using OVRP_1_7_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0;

using OVRP_1_6_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0;

using OVRP_1_5_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_5_0;

using OVRP_1_3_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0;

using OVRP_1_2_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0;

using OVRP_1_1_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0;

using OVRP_1_0_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0;

using OVRP_0_5_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_5_0;

using OVRP_0_1_3 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3;

using OVRP_0_1_2 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2;

using OVRP_0_1_1 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_1;

using OVRP_0_1_0 = GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_0;

using UnityOpenXR = GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR;

using Ktx = GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx;

template<typename T>
using PinnedArray_1 = GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<T>;

using SceneCaptureRequestInternal = GlobalNamespace::GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal;

using PolygonalBoundary2DInternal = GlobalNamespace::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal;

using RoomLayoutInternal = GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal;

using RoomLayout = GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayout;

using SpaceSemanticLabelInternal = GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal;

using SpaceContainerInternal = GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceContainerInternal;

using Media = GlobalNamespace::GlobalNamespace__OVRPlugin__Media;

using SpaceQueryResult = GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult;

using SpaceQueryInfo = GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo;

using SpaceFilterInfoComponents = GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents;

using SpaceFilterInfoIds = GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds;

using SpatialAnchorCreateInfo = GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo;

using SpaceQueryFilterType = GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType;

using SpaceQueryType = GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType;

using SpaceQueryActionType = GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType;

using SpaceStoragePersistenceMode = GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode;

using SpaceStorageLocation = GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation;

using SpaceComponentType = GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType;

using PassthroughCapabilityFlags = GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags;

using InsightPassthroughKeyboardHandsIntensity = GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity;

using InsightPassthroughStyle = GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle;

using InsightPassthroughStyleFlags = GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags;

using InsightPassthroughColorMapType = GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType;

using RenderModelFlags = GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags;

using RenderModelPropertiesInternal = GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal;

using RenderModelProperties = GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties;

using EventDataBuffer = GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer;

using EventType = GlobalNamespace::GlobalNamespace__OVRPlugin__EventType;

using ColorSpace = GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace;

using EyeGazesStateInternal = GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal;

using EyeGazesState = GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesState;

using EyeGazeState = GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState;

using FaceConstants = GlobalNamespace::GlobalNamespace__OVRPlugin__FaceConstants;

using FaceExpression = GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression;

using FaceRegionConfidence = GlobalNamespace::GlobalNamespace__OVRPlugin__FaceRegionConfidence;

using FaceStateInternal = GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal;

using FaceExpressionStatusInternal = GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal;

using FaceState = GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState;

using FaceExpressionStatus = GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus;

using KeyboardDescription = GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription;

using TrackedKeyboardQueryFlags = GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags;

using TrackedKeyboardFlags = GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags;

using TrackedKeyboardPresentationStyles = GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles;

using KeyboardDescriptionConstants = GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants;

using KeyboardState = GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState;

using BodyStateInternal = GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal;

using BodyState = GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState;

using BodyJointLocation = GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation;

using SpaceLocationf = GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationf;

using SpaceLocationFlags = GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags;

using Mesh = GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh;

using MeshType = GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType;

using MeshConstants = GlobalNamespace::GlobalNamespace__OVRPlugin__MeshConstants;

using Skeleton2Internal = GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal;

using Skeleton2 = GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2;

using Skeleton = GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton;

using SkeletonType = GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType;

using SkeletonConstants = GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants;

using Bone = GlobalNamespace::GlobalNamespace__OVRPlugin__Bone;

using BoneCapsule = GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule;

using HandStateInternal = GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal;

using HandState = GlobalNamespace::GlobalNamespace__OVRPlugin__HandState;

using HandFingerPinch = GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch;

using HandFinger = GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger;

using BoneId = GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId;

using HandStatus = GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus;

using Hand = GlobalNamespace::GlobalNamespace__OVRPlugin__Hand;

using TrackingConfidence = GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence;

using LayerSubmit = GlobalNamespace::GlobalNamespace__OVRPlugin__LayerSubmit;

using BlendFactor = GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor;

using LayerDescInternal = GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal;

using LayerDesc = GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc;

using LayerFlags = GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags;

using LayerLayout = GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout;

using CameraExtrinsics = GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics;

using CameraIntrinsics = GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics;

using Fovf = GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf;

using Colorf = GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf;

using BoundaryGeometry = GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry;

using BoundaryTestResult = GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult;

using BoundaryType = GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType;

using Frustumf2 = GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2;

using Frustumf = GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf;

using Boundsf = GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf;

using Rectf = GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf;

using Recti = GlobalNamespace::GlobalNamespace__OVRPlugin__Recti;

using Vector2i = GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i;

using Size3f = GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f;

using Sizef = GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef;

using Sizei = GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei;

using AppPerfStats = GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats;

using AppPerfFrameStats = GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats;

using HapticsConstants = GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsConstants;

using HapticsPcmVibration = GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration;

using HapticsAmplitudeEnvelopeVibration = GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration;

using HapticsDesc = GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc;

using HapticsState = GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState;

using HapticsBuffer = GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer;

using ControllerState = GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState;

using ControllerState2 = GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2;

using ControllerState4 = GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4;

using ControllerState5 = GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5;

using HapticsLocation = GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation;

using PoseStatef = GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef;

using TextureRectMatrixf = GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf;

using Posef = GlobalNamespace::GlobalNamespace__OVRPlugin__Posef;

using Quatf = GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf;

using Vector4s = GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s;

using Vector4f = GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f;

using Vector3f = GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f;

using Vector2f = GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f;

using OverlayFlag = GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag;

using CameraDeviceIntrinsicsParameters = GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters;

using FeatureType = GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType;

using ProcessorPerformanceLevel = GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel;

using PerfMetrics = GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics;

using TiledMultiResLevel = GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel;

using FixedFoveatedRenderingLevel = GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel;

using FoveatedRenderingLevel = GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel;

using CameraDeviceDepthQuality = GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality;

using CameraDeviceDepthSensingMode = GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode;

using CameraDevice = GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice;

using Step = GlobalNamespace::GlobalNamespace__OVRPlugin__Step;

using OverlayShape = GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape;

using SystemHeadset = GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset;

using SystemRegion = GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion;

using PlatformUI = GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI;

using EyeTextureFormat = GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat;

using BatteryStatus = GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus;

using RecenterFlags = GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags;

using TrackingOrigin = GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin;

using Handedness = GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness;

using InteractionProfile = GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile;

using Controller = GlobalNamespace::GlobalNamespace__OVRPlugin__Controller;

using Node = GlobalNamespace::GlobalNamespace__OVRPlugin__Node;

using Tracker = GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker;

using Eye = GlobalNamespace::GlobalNamespace__OVRPlugin__Eye;

using XrApi = GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi;

using CameraAnchorType = GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType;

using CameraStatus = GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus;

using LogCallback2DelegateType = GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType;

using LogLevel = GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel;

using Result = GlobalNamespace::GlobalNamespace__OVRPlugin__Result;

using Bool = GlobalNamespace::GlobalNamespace__OVRPlugin__Bool;

using GUID = GlobalNamespace::GlobalNamespace__OVRPlugin__GUID;

/// @brief The size of the true reference type
static constexpr auto  __CORDL_REFERENCE_TYPE_SIZE{0x10};

virtual ~OVRPlugin() = default;

// Ctor Parameters [CppParam { name: "", ty: "OVRPlugin", modifiers: " const&", def_value: None }]
constexpr OVRPlugin(OVRPlugin const& ) noexcept = default;

// Ctor Parameters [CppParam { name: "", ty: "OVRPlugin", modifiers: "&&", def_value: None }]
constexpr OVRPlugin(OVRPlugin&& ) noexcept = default;

// Ctor Parameters [CppParam { name: "ptr", ty: "void*", modifiers: "", def_value: None }]
constexpr explicit OVRPlugin(void* ptr) noexcept : ::bs_hook::Il2CppWrapperType(ptr) {
}


  constexpr OVRPlugin& operator=(std::nullptr_t) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = nullptr;
    return *this;
  };

  constexpr OVRPlugin& operator=(void* o) noexcept {
    this->::bs_hook::Il2CppWrapperType::instance = o;
    return *this;
  };

  constexpr OVRPlugin& operator=(OVRPlugin&& o) noexcept = default;
  constexpr OVRPlugin& operator=(OVRPlugin const& o) noexcept = default;
                


// Fields

/// @brief Field isSupportedPlatform offset 0
static constexpr bool  isSupportedPlatform{true};

static System::Version __declspec(property(get=__get_wrapperVersion, put=__set_wrapperVersion))  wrapperVersion;

static void __set_wrapperVersion(System::Version value) ;

static System::Version __get_wrapperVersion() ;

static System::Version __declspec(property(get=__get__version, put=__set__version))  _version;

static void __set__version(System::Version value) ;

static System::Version __get__version() ;

static System::Version __declspec(property(get=__get__nativeSDKVersion, put=__set__nativeSDKVersion))  _nativeSDKVersion;

static void __set__nativeSDKVersion(System::Version value) ;

static System::Version __get__nativeSDKVersion() ;

static int32_t __declspec(property(get=__get_MAX_CPU_CORES, put=__set_MAX_CPU_CORES))  MAX_CPU_CORES;

static void __set_MAX_CPU_CORES(int32_t value) ;

static int32_t __get_MAX_CPU_CORES() ;

/// @brief Field OverlayShapeFlagShift offset 0
static constexpr int32_t  OverlayShapeFlagShift{4};

/// @brief Field AppPerfFrameStatsMaxCount offset 0
static constexpr int32_t  AppPerfFrameStatsMaxCount{5};

/// @brief Field EventDataBufferSize offset 0
static constexpr int32_t  EventDataBufferSize{4000};

/// @brief Field RENDER_MODEL_NULL_KEY offset 0
static constexpr int32_t  RENDER_MODEL_NULL_KEY{0};

/// @brief Field SpaceFilterInfoIdsMaxSize offset 0
static constexpr int32_t  SpaceFilterInfoIdsMaxSize{1024};

/// @brief Field SpaceFilterInfoComponentsMaxSize offset 0
static constexpr int32_t  SpaceFilterInfoComponentsMaxSize{16};

/// @brief Field SpatialEntityMaxQueryResultsPerEvent offset 0
static constexpr int32_t  SpatialEntityMaxQueryResultsPerEvent{128};

static System::Nullable_1<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi> __declspec(property(get=__get__nativeXrApi, put=__set__nativeXrApi))  _nativeXrApi;

static void __set__nativeXrApi(System::Nullable_1<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi> value) ;

static System::Nullable_1<GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi> __get__nativeXrApi() ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__GUID __declspec(property(get=__get__nativeAudioOutGuid, put=__set__nativeAudioOutGuid))  _nativeAudioOutGuid;

static void __set__nativeAudioOutGuid(GlobalNamespace::GlobalNamespace__OVRPlugin__GUID value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__GUID __get__nativeAudioOutGuid() ;

static System::Guid __declspec(property(get=__get__cachedAudioOutGuid, put=__set__cachedAudioOutGuid))  _cachedAudioOutGuid;

static void __set__cachedAudioOutGuid(System::Guid value) ;

static System::Guid __get__cachedAudioOutGuid() ;

static ::StringW __declspec(property(get=__get__cachedAudioOutString, put=__set__cachedAudioOutString))  _cachedAudioOutString;

static void __set__cachedAudioOutString(::StringW value) ;

static ::StringW __get__cachedAudioOutString() ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__GUID __declspec(property(get=__get__nativeAudioInGuid, put=__set__nativeAudioInGuid))  _nativeAudioInGuid;

static void __set__nativeAudioInGuid(GlobalNamespace::GlobalNamespace__OVRPlugin__GUID value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__GUID __get__nativeAudioInGuid() ;

static System::Guid __declspec(property(get=__get__cachedAudioInGuid, put=__set__cachedAudioInGuid))  _cachedAudioInGuid;

static void __set__cachedAudioInGuid(System::Guid value) ;

static System::Guid __get__cachedAudioInGuid() ;

static ::StringW __declspec(property(get=__get__cachedAudioInString, put=__set__cachedAudioInString))  _cachedAudioInString;

static void __set__cachedAudioInString(::StringW value) ;

static ::StringW __get__cachedAudioInString() ;

static bool __declspec(property(get=__get_perfStatWarningPrinted, put=__set_perfStatWarningPrinted))  perfStatWarningPrinted;

static void __set_perfStatWarningPrinted(bool value) ;

static bool __get_perfStatWarningPrinted() ;

static bool __declspec(property(get=__get_resetPerfStatWarningPrinted, put=__set_resetPerfStatWarningPrinted))  resetPerfStatWarningPrinted;

static void __set_resetPerfStatWarningPrinted(bool value) ;

static bool __get_resetPerfStatWarningPrinted() ;

static GlobalNamespace::OVRNativeBuffer __declspec(property(get=__get__nativeSystemDisplayFrequenciesAvailable, put=__set__nativeSystemDisplayFrequenciesAvailable))  _nativeSystemDisplayFrequenciesAvailable;

static void __set__nativeSystemDisplayFrequenciesAvailable(GlobalNamespace::OVRNativeBuffer value) ;

static GlobalNamespace::OVRNativeBuffer __get__nativeSystemDisplayFrequenciesAvailable() ;

static ::ArrayW<float_t> __declspec(property(get=__get__cachedSystemDisplayFrequenciesAvailable, put=__set__cachedSystemDisplayFrequenciesAvailable))  _cachedSystemDisplayFrequenciesAvailable;

static void __set__cachedSystemDisplayFrequenciesAvailable(::ArrayW<float_t> value) ;

static ::ArrayW<float_t> __get__cachedSystemDisplayFrequenciesAvailable() ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal __declspec(property(get=__get_cachedHandState, put=__set_cachedHandState))  cachedHandState;

static void __set_cachedHandState(GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal __get_cachedHandState() ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton __declspec(property(get=__get_cachedSkeleton, put=__set_cachedSkeleton))  cachedSkeleton;

static void __set_cachedSkeleton(GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton __get_cachedSkeleton() ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal __declspec(property(get=__get_cachedSkeleton2, put=__set_cachedSkeleton2))  cachedSkeleton2;

static void __set_cachedSkeleton2(GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal __get_cachedSkeleton2() ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal __declspec(property(get=__get_cachedFaceState, put=__set_cachedFaceState))  cachedFaceState;

static void __set_cachedFaceState(GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal __get_cachedFaceState() ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal __declspec(property(get=__get_cachedEyeGazesState, put=__set_cachedEyeGazesState))  cachedEyeGazesState;

static void __set_cachedEyeGazesState(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal value) ;

static GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal __get_cachedEyeGazesState() ;

/// @brief Field pluginName offset 0
static constexpr ::ConstString  pluginName{u"OVRPlugin"};

static System::Version __declspec(property(get=__get__versionZero, put=__set__versionZero))  _versionZero;

static void __set__versionZero(System::Version value) ;

static System::Version __get__versionZero() ;


// Properties

static System::Version __declspec(property(get=get_version))  version;

static System::Version __declspec(property(get=get_nativeSDKVersion))  nativeSDKVersion;

static bool __declspec(property(get=get_initialized))  initialized;

static GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi __declspec(property(get=get_nativeXrApi))  nativeXrApi;

static bool __declspec(property(get=get_chromatic, put=set_chromatic))  chromatic;

static bool __declspec(property(get=get_monoscopic, put=set_monoscopic))  monoscopic;

static bool __declspec(property(get=get_rotation, put=set_rotation))  rotation;

static bool __declspec(property(get=get_position, put=set_position))  position;

static bool __declspec(property(get=get_useIPDInPositionTracking, put=set_useIPDInPositionTracking))  useIPDInPositionTracking;

static bool __declspec(property(get=get_positionSupported))  positionSupported;

static bool __declspec(property(get=get_positionTracked))  positionTracked;

static bool __declspec(property(get=get_powerSaving))  powerSaving;

static bool __declspec(property(get=get_hmdPresent))  hmdPresent;

static bool __declspec(property(get=get_userPresent))  userPresent;

static bool __declspec(property(get=get_headphonesPresent))  headphonesPresent;

static int32_t __declspec(property(get=get_recommendedMSAALevel))  recommendedMSAALevel;

static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion __declspec(property(get=get_systemRegion))  systemRegion;

static ::StringW __declspec(property(get=get_audioOutId))  audioOutId;

static ::StringW __declspec(property(get=get_audioInId))  audioInId;

static bool __declspec(property(get=get_hasVrFocus))  hasVrFocus;

static bool __declspec(property(get=get_hasInputFocus))  hasInputFocus;

static bool __declspec(property(get=get_shouldQuit))  shouldQuit;

static bool __declspec(property(get=get_shouldRecenter))  shouldRecenter;

static ::StringW __declspec(property(get=get_productName))  productName;

static ::StringW __declspec(property(get=get_latency))  latency;

static float_t __declspec(property(get=get_eyeDepth, put=set_eyeDepth))  eyeDepth;

static float_t __declspec(property(get=get_eyeHeight, put=set_eyeHeight))  eyeHeight;

static float_t __declspec(property(get=get_batteryLevel))  batteryLevel;

static float_t __declspec(property(get=get_batteryTemperature))  batteryTemperature;

static GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel __declspec(property(get=get_suggestedCpuPerfLevel, put=set_suggestedCpuPerfLevel))  suggestedCpuPerfLevel;

static GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel __declspec(property(get=get_suggestedGpuPerfLevel, put=set_suggestedGpuPerfLevel))  suggestedGpuPerfLevel;

static int32_t __declspec(property(get=get_cpuLevel, put=set_cpuLevel))  cpuLevel;

static int32_t __declspec(property(get=get_gpuLevel, put=set_gpuLevel))  gpuLevel;

static int32_t __declspec(property(get=get_vsyncCount, put=set_vsyncCount))  vsyncCount;

static float_t __declspec(property(get=get_systemVolume))  systemVolume;

static float_t __declspec(property(get=get_ipd, put=set_ipd))  ipd;

static bool __declspec(property(get=get_occlusionMesh, put=set_occlusionMesh))  occlusionMesh;

static GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus __declspec(property(get=get_batteryStatus))  batteryStatus;

static bool __declspec(property(get=get_foveatedRenderingSupported))  foveatedRenderingSupported;

static bool __declspec(property(get=get_eyeTrackedFoveatedRenderingSupported))  eyeTrackedFoveatedRenderingSupported;

static bool __declspec(property(get=get_eyeTrackedFoveatedRenderingEnabled, put=set_eyeTrackedFoveatedRenderingEnabled))  eyeTrackedFoveatedRenderingEnabled;

static bool __declspec(property(get=get_fixedFoveatedRenderingSupported))  fixedFoveatedRenderingSupported;

static GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel __declspec(property(get=get_foveatedRenderingLevel, put=set_foveatedRenderingLevel))  foveatedRenderingLevel;

static GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel __declspec(property(get=get_fixedFoveatedRenderingLevel, put=set_fixedFoveatedRenderingLevel))  fixedFoveatedRenderingLevel;

static bool __declspec(property(get=get_useDynamicFoveatedRendering, put=set_useDynamicFoveatedRendering))  useDynamicFoveatedRendering;

static bool __declspec(property(get=get_useDynamicFixedFoveatedRendering, put=set_useDynamicFixedFoveatedRendering))  useDynamicFixedFoveatedRendering;

static bool __declspec(property(get=get_tiledMultiResSupported))  tiledMultiResSupported;

static GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel __declspec(property(get=get_tiledMultiResLevel, put=set_tiledMultiResLevel))  tiledMultiResLevel;

static bool __declspec(property(get=get_gpuUtilSupported))  gpuUtilSupported;

static float_t __declspec(property(get=get_gpuUtilLevel))  gpuUtilLevel;

static ::ArrayW<float_t> __declspec(property(get=get_systemDisplayFrequenciesAvailable))  systemDisplayFrequenciesAvailable;

static float_t __declspec(property(get=get_systemDisplayFrequency, put=set_systemDisplayFrequency))  systemDisplayFrequency;

static bool __declspec(property(get=get_eyeFovPremultipliedAlphaModeEnabled, put=set_eyeFovPremultipliedAlphaModeEnabled))  eyeFovPremultipliedAlphaModeEnabled;

static bool __declspec(property(get=get_AsymmetricFovEnabled))  AsymmetricFovEnabled;

static bool __declspec(property(get=get_EyeTextureArrayEnabled))  EyeTextureArrayEnabled;

static bool __declspec(property(get=get_localDimmingSupported))  localDimmingSupported;

static bool __declspec(property(get=get_localDimming, put=set_localDimming))  localDimming;

static bool __declspec(property(get=get_bodyTrackingSupported))  bodyTrackingSupported;

static bool __declspec(property(get=get_bodyTrackingEnabled))  bodyTrackingEnabled;

static bool __declspec(property(get=get_faceTrackingEnabled))  faceTrackingEnabled;

static bool __declspec(property(get=get_faceTrackingSupported))  faceTrackingSupported;

static bool __declspec(property(get=get_eyeTrackingEnabled))  eyeTrackingEnabled;

static bool __declspec(property(get=get_eyeTrackingSupported))  eyeTrackingSupported;


// Methods

/// @brief Method get_version addr 0x260cf88 size 0x560 virtual false final false
static System::Version get_version() ;

/// @brief Method get_nativeSDKVersion addr 0x260d4e8 size 0x2bc virtual false final false
static System::Version get_nativeSDKVersion() ;

/// @brief Method IsSuccess addr 0x260d7a4 size 0xc virtual false final false
static bool IsSuccess(GlobalNamespace::GlobalNamespace__OVRPlugin__Result result) ;

/// @brief Method SetLogCallback2 addr 0x260d7b0 size 0x108 virtual false final false
static void SetLogCallback2(GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType logCallback) ;

/// @brief Method IsPassthroughShape addr 0x2603b98 size 0x30 virtual false final false
static bool IsPassthroughShape(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape shape) ;

/// @brief Method IsPositionValid addr 0x260d8b8 size 0x8 virtual false final false
static bool IsPositionValid(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags value) ;

/// @brief Method IsOrientationValid addr 0x260d8c0 size 0x8 virtual false final false
static bool IsOrientationValid(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags value) ;

/// @brief Method IsPositionTracked addr 0x260d8c8 size 0x8 virtual false final false
static bool IsPositionTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags value) ;

/// @brief Method IsOrientationTracked addr 0x260d8d0 size 0x8 virtual false final false
static bool IsOrientationTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags value) ;

/// @brief Method get_initialized addr 0x25ff8f0 size 0x5c virtual false final false
static bool get_initialized() ;

/// @brief Method get_nativeXrApi addr 0x2603674 size 0x19c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi get_nativeXrApi() ;

/// @brief Method get_chromatic addr 0x260d8d8 size 0xd8 virtual false final false
static bool get_chromatic() ;

/// @brief Method set_chromatic addr 0x260d9b0 size 0xf8 virtual false final false
static void set_chromatic(bool value) ;

/// @brief Method get_monoscopic addr 0x260dab0 size 0x90 virtual false final false
static bool get_monoscopic() ;

/// @brief Method set_monoscopic addr 0x260db40 size 0xa4 virtual false final false
static void set_monoscopic(bool value) ;

/// @brief Method get_rotation addr 0x260dbe4 size 0x90 virtual false final false
static bool get_rotation() ;

/// @brief Method set_rotation addr 0x260dc74 size 0xa4 virtual false final false
static void set_rotation(bool value) ;

/// @brief Method get_position addr 0x260dd18 size 0x90 virtual false final false
static bool get_position() ;

/// @brief Method set_position addr 0x260dda8 size 0xa4 virtual false final false
static void set_position(bool value) ;

/// @brief Method get_useIPDInPositionTracking addr 0x260de4c size 0xd8 virtual false final false
static bool get_useIPDInPositionTracking() ;

/// @brief Method set_useIPDInPositionTracking addr 0x260df24 size 0xf8 virtual false final false
static void set_useIPDInPositionTracking(bool value) ;

/// @brief Method get_positionSupported addr 0x260e01c size 0x90 virtual false final false
static bool get_positionSupported() ;

/// @brief Method get_positionTracked addr 0x260e0ac size 0x94 virtual false final false
static bool get_positionTracked() ;

/// @brief Method get_powerSaving addr 0x260e140 size 0x90 virtual false final false
static bool get_powerSaving() ;

/// @brief Method get_hmdPresent addr 0x260e1d0 size 0x94 virtual false final false
static bool get_hmdPresent() ;

/// @brief Method get_userPresent addr 0x260e264 size 0x90 virtual false final false
static bool get_userPresent() ;

/// @brief Method get_headphonesPresent addr 0x260e2f4 size 0x90 virtual false final false
static bool get_headphonesPresent() ;

/// @brief Method get_recommendedMSAALevel addr 0x260e384 size 0xd4 virtual false final false
static int32_t get_recommendedMSAALevel() ;

/// @brief Method get_systemRegion addr 0x260e458 size 0xd4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion get_systemRegion() ;

/// @brief Method get_audioOutId addr 0x260e52c size 0x314 virtual false final false
static ::StringW get_audioOutId() ;

/// @brief Method get_audioInId addr 0x260e840 size 0x314 virtual false final false
static ::StringW get_audioInId() ;

/// @brief Method get_hasVrFocus addr 0x260eb54 size 0x5c virtual false final false
static bool get_hasVrFocus() ;

/// @brief Method get_hasInputFocus addr 0x260ebb0 size 0xdc virtual false final false
static bool get_hasInputFocus() ;

/// @brief Method get_shouldQuit addr 0x260ec8c size 0x5c virtual false final false
static bool get_shouldQuit() ;

/// @brief Method get_shouldRecenter addr 0x260ece8 size 0x5c virtual false final false
static bool get_shouldRecenter() ;

/// @brief Method get_productName addr 0x260ed44 size 0x50 virtual false final false
static ::StringW get_productName() ;

/// @brief Method get_latency addr 0x260ed94 size 0xa8 virtual false final false
static ::StringW get_latency() ;

/// @brief Method get_eyeDepth addr 0x260ee3c size 0x8c virtual false final false
static float_t get_eyeDepth() ;

/// @brief Method set_eyeDepth addr 0x260eec8 size 0x60 virtual false final false
static void set_eyeDepth(float_t value) ;

/// @brief Method get_eyeHeight addr 0x260ef28 size 0x50 virtual false final false
static float_t get_eyeHeight() ;

/// @brief Method set_eyeHeight addr 0x260ef78 size 0x60 virtual false final false
static void set_eyeHeight(float_t value) ;

/// @brief Method get_batteryLevel addr 0x260efd8 size 0x50 virtual false final false
static float_t get_batteryLevel() ;

/// @brief Method get_batteryTemperature addr 0x260f028 size 0x50 virtual false final false
static float_t get_batteryTemperature() ;

/// @brief Method get_suggestedCpuPerfLevel addr 0x260f078 size 0xd0 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel get_suggestedCpuPerfLevel() ;

/// @brief Method set_suggestedCpuPerfLevel addr 0x260f148 size 0xc0 virtual false final false
static void set_suggestedCpuPerfLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel value) ;

/// @brief Method get_suggestedGpuPerfLevel addr 0x260f208 size 0xd0 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel get_suggestedGpuPerfLevel() ;

/// @brief Method set_suggestedGpuPerfLevel addr 0x260f2d8 size 0xc0 virtual false final false
static void set_suggestedGpuPerfLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel value) ;

/// @brief Method get_cpuLevel addr 0x260f398 size 0x50 virtual false final false
static int32_t get_cpuLevel() ;

/// @brief Method set_cpuLevel addr 0x260f3e8 size 0x58 virtual false final false
static void set_cpuLevel(int32_t value) ;

/// @brief Method get_gpuLevel addr 0x260f440 size 0x50 virtual false final false
static int32_t get_gpuLevel() ;

/// @brief Method set_gpuLevel addr 0x260f490 size 0x58 virtual false final false
static void set_gpuLevel(int32_t value) ;

/// @brief Method get_vsyncCount addr 0x260f4e8 size 0x50 virtual false final false
static int32_t get_vsyncCount() ;

/// @brief Method set_vsyncCount addr 0x260f538 size 0x58 virtual false final false
static void set_vsyncCount(int32_t value) ;

/// @brief Method get_systemVolume addr 0x260f590 size 0x50 virtual false final false
static float_t get_systemVolume() ;

/// @brief Method get_ipd addr 0x260f5e0 size 0x50 virtual false final false
static float_t get_ipd() ;

/// @brief Method set_ipd addr 0x260f630 size 0x60 virtual false final false
static void set_ipd(float_t value) ;

/// @brief Method get_occlusionMesh addr 0x260f690 size 0x90 virtual false final false
static bool get_occlusionMesh() ;

/// @brief Method set_occlusionMesh addr 0x260f720 size 0xa4 virtual false final false
static void set_occlusionMesh(bool value) ;

/// @brief Method get_batteryStatus addr 0x260f7c4 size 0x50 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus get_batteryStatus() ;

/// @brief Method GetEyeFrustum addr 0x260f814 size 0x58 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf GetEyeFrustum(GlobalNamespace::GlobalNamespace__OVRPlugin__Eye eyeId) ;

/// @brief Method GetEyeTextureSize addr 0x260f86c size 0x58 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei GetEyeTextureSize(GlobalNamespace::GlobalNamespace__OVRPlugin__Eye eyeId) ;

/// @brief Method GetTrackerPose addr 0x260f8c4 size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GetTrackerPose(GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker trackerId) ;

/// @brief Method GetTrackerFrustum addr 0x260fb70 size 0x58 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf GetTrackerFrustum(GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker trackerId) ;

/// @brief Method ShowUI addr 0x260fbc8 size 0x64 virtual false final false
static bool ShowUI(GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI ui) ;

/// @brief Method EnqueueSubmitLayer addr 0x26016dc size 0x558 virtual false final false
static bool EnqueueSubmitLayer(bool onTop, bool headLocked, bool noDepthBufferTesting, ::cordl_internals::intptr_t leftTexture, ::cordl_internals::intptr_t rightTexture, int32_t layerId, int32_t frameIndex, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef pose, GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f scale, int32_t layerIndex, GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape shape, bool overrideTextureRectMatrix, GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf textureRectMatrix, bool overridePerLayerColorScaleAndOffset, UnityEngine::Vector4 colorScale, UnityEngine::Vector4 colorOffset, bool expensiveSuperSample, bool bicubic, bool efficientSuperSample, bool efficientSharpen, bool expensiveSharpen, bool hidden, bool secureContent) ;

/// @brief Method CalculateLayerDesc addr 0x26006ec size 0x198 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc CalculateLayerDesc(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape shape, GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout layout, GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei textureSize, int32_t mipLevels, int32_t sampleCount, GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat format, int32_t layerFlags) ;

/// @brief Method EnqueueSetupLayer addr 0x2600884 size 0x208 virtual false final false
static bool EnqueueSetupLayer(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc desc, int32_t compositionDepth, ::cordl_internals::intptr_t layerID) ;

/// @brief Method EnqueueDestroyLayer addr 0x2601c34 size 0xe0 virtual false final false
static bool EnqueueDestroyLayer(::cordl_internals::intptr_t layerID) ;

/// @brief Method GetLayerTexture addr 0x26011d4 size 0x124 virtual false final false
static ::cordl_internals::intptr_t GetLayerTexture(int32_t layerId, int32_t stage, GlobalNamespace::GlobalNamespace__OVRPlugin__Eye eyeId) ;

/// @brief Method GetLayerTextureStageCount addr 0x2600a8c size 0xfc virtual false final false
static int32_t GetLayerTextureStageCount(int32_t layerId) ;

/// @brief Method GetLayerAndroidSurfaceObject addr 0x26010c8 size 0x10c virtual false final false
static ::cordl_internals::intptr_t GetLayerAndroidSurfaceObject(int32_t layerId) ;

/// @brief Method UpdateNodePhysicsPoses addr 0x260fc2c size 0xdc virtual false final false
static bool UpdateNodePhysicsPoses(int32_t frameIndex, double_t predictionSeconds) ;

/// @brief Method GetNodePose addr 0x260f948 size 0x228 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GetNodePose(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId) ;

/// @brief Method GetNodeVelocity addr 0x260fd08 size 0x20c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GetNodeVelocity(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId) ;

/// @brief Method GetNodeAngularVelocity addr 0x260ff14 size 0x150 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GetNodeAngularVelocity(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId) ;

/// @brief Method GetNodeAcceleration addr 0x2610064 size 0x20c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GetNodeAcceleration(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId) ;

/// @brief Method GetNodeAngularAcceleration addr 0x2610270 size 0x150 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GetNodeAngularAcceleration(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId) ;

/// @brief Method GetNodePresent addr 0x26103c0 size 0x64 virtual false final false
static bool GetNodePresent(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method GetNodeOrientationTracked addr 0x2610424 size 0x64 virtual false final false
static bool GetNodeOrientationTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method GetNodeOrientationValid addr 0x2610488 size 0x104 virtual false final false
static bool GetNodeOrientationValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method GetNodePositionTracked addr 0x261058c size 0x64 virtual false final false
static bool GetNodePositionTracked(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method GetNodePositionValid addr 0x26105f0 size 0x104 virtual false final false
static bool GetNodePositionValid(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method GetNodePoseStateRaw addr 0x26106f4 size 0x238 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef GetNodePoseStateRaw(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId) ;

/// @brief Method GetNodePoseStateAtTime addr 0x261092c size 0x138 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef GetNodePoseStateAtTime(double_t time, GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method GetNodePoseStateImmediate addr 0x2610a64 size 0x128 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef GetNodePoseStateImmediate(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId) ;

/// @brief Method GetCurrentTrackingTransformPose addr 0x2610b8c size 0x120 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GetCurrentTrackingTransformPose() ;

/// @brief Method GetTrackingTransformRawPose addr 0x2610cac size 0x120 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GetTrackingTransformRawPose() ;

/// @brief Method GetTrackingTransformRelativePose addr 0x2610dcc size 0x160 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GetTrackingTransformRelativePose(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin trackingOrigin) ;

/// @brief Method GetControllerState addr 0x2610f2c size 0x84 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState GetControllerState(uint32_t controllerMask) ;

/// @brief Method GetControllerState2 addr 0x2610fb0 size 0x144 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2 GetControllerState2(uint32_t controllerMask) ;

/// @brief Method GetControllerState4 addr 0x26110f4 size 0x15c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4 GetControllerState4(uint32_t controllerMask) ;

/// @brief Method GetControllerState5 addr 0x2611250 size 0x164 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5 GetControllerState5(uint32_t controllerMask) ;

/// @brief Method GetCurrentInteractionProfile addr 0x26113b4 size 0xd4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile GetCurrentInteractionProfile(GlobalNamespace::GlobalNamespace__OVRPlugin__Hand hand) ;

/// @brief Method SetControllerVibration addr 0x2611488 size 0x7c virtual false final false
static bool SetControllerVibration(uint32_t controllerMask, float_t frequency, float_t amplitude) ;

/// @brief Method SetControllerLocalizedVibration addr 0x2611504 size 0xf0 virtual false final false
static bool SetControllerLocalizedVibration(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation hapticsLocationMask, float_t frequency, float_t amplitude) ;

/// @brief Method SetControllerHapticsAmplitudeEnvelope addr 0x26115f4 size 0xe0 virtual false final false
static bool SetControllerHapticsAmplitudeEnvelope(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration hapticsVibration) ;

/// @brief Method SetControllerHapticsPcm addr 0x26116d4 size 0xf0 virtual false final false
static bool SetControllerHapticsPcm(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration hapticsVibration) ;

/// @brief Method GetControllerSampleRateHz addr 0x26117c4 size 0xdc virtual false final false
static bool GetControllerSampleRateHz(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller controllerMask, ByRef<float_t> sampleRateHz) ;

/// @brief Method GetControllerHapticsDesc addr 0x26118a0 size 0xec virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc GetControllerHapticsDesc(uint32_t controllerMask) ;

/// @brief Method GetControllerHapticsState addr 0x261198c size 0xc4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState GetControllerHapticsState(uint32_t controllerMask) ;

/// @brief Method SetControllerHaptics addr 0x2611a50 size 0xe0 virtual false final false
static bool SetControllerHaptics(uint32_t controllerMask, GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer hapticsBuffer) ;

/// @brief Method GetEyeRecommendedResolutionScale addr 0x2611b30 size 0xbc virtual false final false
static float_t GetEyeRecommendedResolutionScale() ;

/// @brief Method GetAppCpuStartToGpuEndTime addr 0x2611bec size 0xbc virtual false final false
static float_t GetAppCpuStartToGpuEndTime() ;

/// @brief Method GetBoundaryConfigured addr 0x2611ca8 size 0xc0 virtual false final false
static bool GetBoundaryConfigured() ;

/// @brief Method TestBoundaryNode addr 0x2611d68 size 0xec virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult TestBoundaryNode(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType) ;

/// @brief Method TestBoundaryPoint addr 0x2611e54 size 0x10c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult TestBoundaryPoint(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f point, GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType) ;

/// @brief Method GetBoundaryGeometry addr 0x2611f60 size 0xec virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry GetBoundaryGeometry(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType) ;

/// @brief Method GetBoundaryGeometry2 addr 0x261204c size 0xe4 virtual false final false
static bool GetBoundaryGeometry2(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType, ::cordl_internals::intptr_t points, ByRef<int32_t> pointsCount) ;

/// @brief Method GetAppPerfStats addr 0x2612130 size 0x178 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats GetAppPerfStats() ;

/// @brief Method ResetAppPerfStats addr 0x26122a8 size 0x164 virtual false final false
static bool ResetAppPerfStats() ;

/// @brief Method GetAppFramerate addr 0x261240c size 0xbc virtual false final false
static float_t GetAppFramerate() ;

/// @brief Method SetHandNodePoseStateLatency addr 0x26124c8 size 0xd0 virtual false final false
static bool SetHandNodePoseStateLatency(double_t latencyInSeconds) ;

/// @brief Method GetHandNodePoseStateLatency addr 0x2612598 size 0xd0 virtual false final false
static double_t GetHandNodePoseStateLatency() ;

/// @brief Method GetDesiredEyeTextureFormat addr 0x2612668 size 0xc0 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat GetDesiredEyeTextureFormat() ;

/// @brief Method SetDesiredEyeTextureFormat addr 0x2612728 size 0xc8 virtual false final false
static bool SetDesiredEyeTextureFormat(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat value) ;

/// @brief Method InitializeMixedReality addr 0x25ffa20 size 0xd4 virtual false final false
static bool InitializeMixedReality() ;

/// @brief Method ShutdownMixedReality addr 0x25ffca8 size 0xd4 virtual false final false
static bool ShutdownMixedReality() ;

/// @brief Method IsMixedRealityInitialized addr 0x25ff94c size 0xd4 virtual false final false
static bool IsMixedRealityInitialized() ;

/// @brief Method GetExternalCameraCount addr 0x26127f0 size 0xe4 virtual false final false
static int32_t GetExternalCameraCount() ;

/// @brief Method UpdateExternalCamera addr 0x25ffaf4 size 0xd4 virtual false final false
static bool UpdateExternalCamera() ;

/// @brief Method GetMixedRealityCameraInfo addr 0x26128d4 size 0x134 virtual false final false
static bool GetMixedRealityCameraInfo(int32_t cameraId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics> cameraExtrinsics, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics> cameraIntrinsics) ;

/// @brief Method OverrideExternalCameraFov addr 0x2612a08 size 0xf0 virtual false final false
static bool OverrideExternalCameraFov(int32_t cameraId, bool useOverriddenFov, GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf fov) ;

/// @brief Method GetUseOverriddenExternalCameraFov addr 0x2612af8 size 0xec virtual false final false
static bool GetUseOverriddenExternalCameraFov(int32_t cameraId) ;

/// @brief Method OverrideExternalCameraStaticPose addr 0x2612be4 size 0xe4 virtual false final false
static bool OverrideExternalCameraStaticPose(int32_t cameraId, bool useOverriddenPose, GlobalNamespace::GlobalNamespace__OVRPlugin__Posef poseInStageOrigin) ;

/// @brief Method GetUseOverriddenExternalCameraStaticPose addr 0x2612cc8 size 0xec virtual false final false
static bool GetUseOverriddenExternalCameraStaticPose(int32_t cameraId) ;

/// @brief Method ResetDefaultExternalCamera addr 0x2612db4 size 0xc0 virtual false final false
static bool ResetDefaultExternalCamera() ;

/// @brief Method SetDefaultExternalCamera addr 0x2612e74 size 0xe0 virtual false final false
static bool SetDefaultExternalCamera(::StringW cameraName, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics> cameraIntrinsics, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics> cameraExtrinsics) ;

/// @brief Method SetExternalCameraProperties addr 0x2612f54 size 0xe0 virtual false final false
static bool SetExternalCameraProperties(::StringW cameraName, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics> cameraIntrinsics, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics> cameraExtrinsics) ;

/// @brief Method IsInsightPassthroughSupported addr 0x2613034 size 0x16c virtual false final false
static bool IsInsightPassthroughSupported() ;

/// @brief Method InitializeInsightPassthrough addr 0x26131a0 size 0xc0 virtual false final false
static bool InitializeInsightPassthrough() ;

/// @brief Method ShutdownInsightPassthrough addr 0x2613260 size 0xc0 virtual false final false
static bool ShutdownInsightPassthrough() ;

/// @brief Method IsInsightPassthroughInitialized addr 0x2613320 size 0xc0 virtual false final false
static bool IsInsightPassthroughInitialized() ;

/// @brief Method GetInsightPassthroughInitializationState addr 0x26133e0 size 0xbc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result GetInsightPassthroughInitializationState() ;

/// @brief Method CreateInsightTriangleMesh addr 0x260a078 size 0x1a8 virtual false final false
static bool CreateInsightTriangleMesh(int32_t layerId, ::ArrayW<UnityEngine::Vector3> vertices, ::ArrayW<int32_t> triangles, ByRef<uint64_t> meshHandle) ;

/// @brief Method DestroyInsightTriangleMesh addr 0x26089d4 size 0xc8 virtual false final false
static bool DestroyInsightTriangleMesh(uint64_t meshHandle) ;

/// @brief Method AddInsightPassthroughSurfaceGeometry addr 0x260a220 size 0x124 virtual false final false
static bool AddInsightPassthroughSurfaceGeometry(int32_t layerId, uint64_t meshHandle, UnityEngine::Matrix4x4 T_world_model, ByRef<uint64_t> geometryInstanceHandle) ;

/// @brief Method DestroyInsightPassthroughGeometryInstance addr 0x260890c size 0xc8 virtual false final false
static bool DestroyInsightPassthroughGeometryInstance(uint64_t geometryInstanceHandle) ;

/// @brief Method UpdateInsightPassthroughGeometryTransform addr 0x260aa98 size 0x108 virtual false final false
static bool UpdateInsightPassthroughGeometryTransform(uint64_t geometryInstanceHandle, UnityEngine::Matrix4x4 transform) ;

/// @brief Method SetInsightPassthroughStyle addr 0x260b548 size 0x100 virtual false final false
static bool SetInsightPassthroughStyle(int32_t layerId, GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle style) ;

/// @brief Method SetInsightPassthroughKeyboardHandsIntensity addr 0x261349c size 0xe0 virtual false final false
static bool SetInsightPassthroughKeyboardHandsIntensity(int32_t layerId, GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity intensity) ;

/// @brief Method GetPassthroughCapabilityFlags addr 0x261357c size 0x1b4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags GetPassthroughCapabilityFlags() ;

/// @brief Method GetBoundaryDimensions addr 0x2613730 size 0xc4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f GetBoundaryDimensions(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType boundaryType) ;

/// @brief Method GetBoundaryVisible addr 0x26137f4 size 0xc0 virtual false final false
static bool GetBoundaryVisible() ;

/// @brief Method SetBoundaryVisible addr 0x26138b4 size 0xe4 virtual false final false
static bool SetBoundaryVisible(bool value) ;

/// @brief Method GetSystemHeadsetType addr 0x2613998 size 0xbc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset GetSystemHeadsetType() ;

/// @brief Method GetActiveController addr 0x2613a54 size 0xbc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller GetActiveController() ;

/// @brief Method GetConnectedControllers addr 0x2613b10 size 0xbc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Controller GetConnectedControllers() ;

/// @brief Method ToBool addr 0x260daa8 size 0x8 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Bool ToBool(bool b) ;

/// @brief Method GetTrackingOriginType addr 0x2613bcc size 0x50 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin GetTrackingOriginType() ;

/// @brief Method SetTrackingOriginType addr 0x2613c1c size 0x64 virtual false final false
static bool SetTrackingOriginType(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin originType) ;

/// @brief Method GetTrackingCalibratedOrigin addr 0x2613c80 size 0x74 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef GetTrackingCalibratedOrigin() ;

/// @brief Method SetTrackingCalibratedOrigin addr 0x2613cf4 size 0x5c virtual false final false
static bool SetTrackingCalibratedOrigin() ;

/// @brief Method RecenterTrackingOrigin addr 0x2613d50 size 0x64 virtual false final false
static bool RecenterTrackingOrigin(GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags flags) ;

/// @brief Method get_foveatedRenderingSupported addr 0x2613db4 size 0x74 virtual false final false
static bool get_foveatedRenderingSupported() ;

/// @brief Method get_eyeTrackedFoveatedRenderingSupported addr 0x2613ef8 size 0xcc virtual false final false
static bool get_eyeTrackedFoveatedRenderingSupported() ;

/// @brief Method get_eyeTrackedFoveatedRenderingEnabled addr 0x2613fc4 size 0xec virtual false final false
static bool get_eyeTrackedFoveatedRenderingEnabled() ;

/// @brief Method set_eyeTrackedFoveatedRenderingEnabled addr 0x26140b0 size 0xe8 virtual false final false
static void set_eyeTrackedFoveatedRenderingEnabled(bool value) ;

/// @brief Method get_fixedFoveatedRenderingSupported addr 0x2613e28 size 0xd0 virtual false final false
static bool get_fixedFoveatedRenderingSupported() ;

/// @brief Method get_foveatedRenderingLevel addr 0x2614198 size 0xe4 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel get_foveatedRenderingLevel() ;

/// @brief Method set_foveatedRenderingLevel addr 0x261427c size 0xe4 virtual false final false
static void set_foveatedRenderingLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel value) ;

/// @brief Method get_fixedFoveatedRenderingLevel addr 0x2614360 size 0x4c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel get_fixedFoveatedRenderingLevel() ;

/// @brief Method set_fixedFoveatedRenderingLevel addr 0x26143ac size 0x54 virtual false final false
static void set_fixedFoveatedRenderingLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel value) ;

/// @brief Method get_useDynamicFoveatedRendering addr 0x2614400 size 0xf0 virtual false final false
static bool get_useDynamicFoveatedRendering() ;

/// @brief Method set_useDynamicFoveatedRendering addr 0x26144f0 size 0xe8 virtual false final false
static void set_useDynamicFoveatedRendering(bool value) ;

/// @brief Method get_useDynamicFixedFoveatedRendering addr 0x26145d8 size 0x4c virtual false final false
static bool get_useDynamicFixedFoveatedRendering() ;

/// @brief Method set_useDynamicFixedFoveatedRendering addr 0x2614624 size 0x54 virtual false final false
static void set_useDynamicFixedFoveatedRendering(bool value) ;

/// @brief Method get_tiledMultiResSupported addr 0x2614678 size 0x4c virtual false final false
static bool get_tiledMultiResSupported() ;

/// @brief Method get_tiledMultiResLevel addr 0x26146c4 size 0x4c virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel get_tiledMultiResLevel() ;

/// @brief Method set_tiledMultiResLevel addr 0x2614710 size 0x54 virtual false final false
static void set_tiledMultiResLevel(GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel value) ;

/// @brief Method get_gpuUtilSupported addr 0x2614764 size 0xd0 virtual false final false
static bool get_gpuUtilSupported() ;

/// @brief Method get_gpuUtilLevel addr 0x2614834 size 0xf0 virtual false final false
static float_t get_gpuUtilLevel() ;

/// @brief Method get_systemDisplayFrequenciesAvailable addr 0x2614924 size 0x2a4 virtual false final false
static ::ArrayW<float_t> get_systemDisplayFrequenciesAvailable() ;

/// @brief Method get_systemDisplayFrequency addr 0x2614bc8 size 0x14c virtual false final false
static float_t get_systemDisplayFrequency() ;

/// @brief Method set_systemDisplayFrequency addr 0x2614d14 size 0xcc virtual false final false
static void set_systemDisplayFrequency(float_t value) ;

/// @brief Method get_eyeFovPremultipliedAlphaModeEnabled addr 0x2614de0 size 0xd0 virtual false final false
static bool get_eyeFovPremultipliedAlphaModeEnabled() ;

/// @brief Method set_eyeFovPremultipliedAlphaModeEnabled addr 0x2614eb0 size 0xe0 virtual false final false
static void set_eyeFovPremultipliedAlphaModeEnabled(bool value) ;

/// @brief Method GetNodeFrustum2 addr 0x2614f90 size 0xe0 virtual false final false
static bool GetNodeFrustum2(GlobalNamespace::GlobalNamespace__OVRPlugin__Node nodeId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2> frustum) ;

/// @brief Method get_AsymmetricFovEnabled addr 0x2615070 size 0xd4 virtual false final false
static bool get_AsymmetricFovEnabled() ;

/// @brief Method get_EyeTextureArrayEnabled addr 0x2615144 size 0xc0 virtual false final false
static bool get_EyeTextureArrayEnabled() ;

/// @brief Method get_localDimmingSupported addr 0x2615204 size 0xd4 virtual false final false
static bool get_localDimmingSupported() ;

/// @brief Method get_localDimming addr 0x26152d8 size 0xf4 virtual false final false
static bool get_localDimming() ;

/// @brief Method set_localDimming addr 0x26153cc size 0xe8 virtual false final false
static void set_localDimming(bool value) ;

/// @brief Method GetDominantHand addr 0x26154b4 size 0xcc virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness GetDominantHand() ;

/// @brief Method SendEvent addr 0x2615580 size 0x194 virtual false final false
static bool SendEvent(::StringW name, ::StringW param, ::StringW source) ;

/// @brief Method SetHeadPoseModifier addr 0x2615714 size 0xd8 virtual false final false
static bool SetHeadPoseModifier(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> relativeRotation, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> relativeTranslation) ;

/// @brief Method GetHeadPoseModifier addr 0x26157ec size 0x14c virtual false final false
static bool GetHeadPoseModifier(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf> relativeRotation, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f> relativeTranslation) ;

/// @brief Method IsPerfMetricsSupported addr 0x2615938 size 0xe0 virtual false final false
static bool IsPerfMetricsSupported(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics perfMetrics) ;

/// @brief Method GetPerfMetricsFloat addr 0x2615a18 size 0x104 virtual false final false
static System::Nullable_1<float_t> GetPerfMetricsFloat(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics perfMetrics) ;

/// @brief Method GetPerfMetricsInt addr 0x2615b1c size 0x104 virtual false final false
static System::Nullable_1<int32_t> GetPerfMetricsInt(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics perfMetrics) ;

/// @brief Method GetTimeInSeconds addr 0x2615c20 size 0xcc virtual false final false
static double_t GetTimeInSeconds() ;

/// @brief Method SetColorScaleAndOffset addr 0x2615cec size 0x50 virtual false final false
static bool SetColorScaleAndOffset(UnityEngine::Vector4 colorScale, UnityEngine::Vector4 colorOffset, bool applyToAllLayers) ;

/// @brief Method AddCustomMetadata addr 0x2615d3c size 0xd8 virtual false final false
static bool AddCustomMetadata(::StringW name, ::StringW param) ;

/// @brief Method SetDeveloperMode addr 0x2615e14 size 0xc8 virtual false final false
static bool SetDeveloperMode(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool active) ;

/// @brief Method GetAdaptiveGPUPerformanceScale addr 0x2615edc size 0xd8 virtual false final false
static float_t GetAdaptiveGPUPerformanceScale() ;

/// @brief Method GetHandTrackingEnabled addr 0x2615fb4 size 0xd4 virtual false final false
static bool GetHandTrackingEnabled() ;

/// @brief Method GetHandState addr 0x2616088 size 0x6a4 virtual false final false
static bool GetHandState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, GlobalNamespace::GlobalNamespace__OVRPlugin__Hand hand, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__HandState> handState) ;

/// @brief Method GetSkeleton addr 0x261672c size 0xe0 virtual false final false
static bool GetSkeleton(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType skeletonType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton> skeleton) ;

/// @brief Method GetSkeleton2 addr 0x261680c size 0x2310 virtual false final false
static bool GetSkeleton2(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType skeletonType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2> skeleton) ;

/// @brief Method get_bodyTrackingSupported addr 0x260bfa0 size 0xd0 virtual false final false
static bool get_bodyTrackingSupported() ;

/// @brief Method get_bodyTrackingEnabled addr 0x2618b1c size 0xd0 virtual false final false
static bool get_bodyTrackingEnabled() ;

/// @brief Method GetBodyState addr 0x2618bec size 0x221c virtual false final false
static bool GetBodyState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState> bodyState) ;

/// @brief Method GetMesh addr 0x261ae08 size 0x1cc virtual false final false
static bool GetMesh(GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType meshType, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh> mesh) ;

/// @brief Method StartKeyboardTracking addr 0x261afd4 size 0xc8 virtual false final false
static bool StartKeyboardTracking(uint64_t trackedKeyboardId) ;

/// @brief Method StopKeyboardTracking addr 0x261b09c size 0xc0 virtual false final false
static bool StopKeyboardTracking() ;

/// @brief Method GetKeyboardState addr 0x261b15c size 0xf0 virtual false final false
static bool GetKeyboardState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState> keyboardState) ;

/// @brief Method GetSystemKeyboardDescription addr 0x261b24c size 0xe4 virtual false final false
static bool GetSystemKeyboardDescription(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags keyboardQueryFlags, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription> keyboardDescription) ;

/// @brief Method get_faceTrackingEnabled addr 0x261b330 size 0xd0 virtual false final false
static bool get_faceTrackingEnabled() ;

/// @brief Method get_faceTrackingSupported addr 0x260bed0 size 0xd0 virtual false final false
static bool get_faceTrackingSupported() ;

/// @brief Method GetFaceState addr 0x261b400 size 0x634 virtual false final false
static bool GetFaceState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState> faceState) ;

/// @brief Method get_eyeTrackingEnabled addr 0x261ba34 size 0xd0 virtual false final false
static bool get_eyeTrackingEnabled() ;

/// @brief Method get_eyeTrackingSupported addr 0x260c070 size 0xd0 virtual false final false
static bool get_eyeTrackingSupported() ;

/// @brief Method GetEyeGazesState addr 0x261bb04 size 0x274 virtual false final false
static bool GetEyeGazesState(GlobalNamespace::GlobalNamespace__OVRPlugin__Step stepId, int32_t frameIndex, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesState> eyeGazesState) ;

/// @brief Method StartEyeTracking addr 0x261bd78 size 0xc0 virtual false final false
static bool StartEyeTracking() ;

/// @brief Method StopEyeTracking addr 0x261be38 size 0xc0 virtual false final false
static bool StopEyeTracking() ;

/// @brief Method StartFaceTracking addr 0x261bef8 size 0xc0 virtual false final false
static bool StartFaceTracking() ;

/// @brief Method StopFaceTracking addr 0x261bfb8 size 0xc0 virtual false final false
static bool StopFaceTracking() ;

/// @brief Method StartBodyTracking addr 0x261c078 size 0xc0 virtual false final false
static bool StartBodyTracking() ;

/// @brief Method StopBodyTracking addr 0x261c138 size 0xc0 virtual false final false
static bool StopBodyTracking() ;

/// @brief Method GetLocalTrackingSpaceRecenterCount addr 0x261c1f8 size 0xd0 virtual false final false
static int32_t GetLocalTrackingSpaceRecenterCount() ;

/// @brief Method GetSystemHmd3DofModeEnabled addr 0x261c2c8 size 0xd4 virtual false final false
static bool GetSystemHmd3DofModeEnabled() ;

/// @brief Method SetClientColorDesc addr 0x261c39c size 0x114 virtual false final false
static bool SetClientColorDesc(GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace colorSpace) ;

/// @brief Method GetHmdColorDesc addr 0x261c4b0 size 0x130 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace GetHmdColorDesc() ;

/// @brief Method PollEvent addr 0x261c5e0 size 0x218 virtual false final false
static bool PollEvent(ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer> eventDataBuffer) ;

/// @brief Method GetNativeOpenXRInstance addr 0x261c7f8 size 0xdc virtual false final false
static uint64_t GetNativeOpenXRInstance() ;

/// @brief Method GetNativeOpenXRSession addr 0x261c8d4 size 0xdc virtual false final false
static uint64_t GetNativeOpenXRSession() ;

/// @brief Method SetKeyboardOverlayUV addr 0x261c9b0 size 0xd8 virtual false final false
static bool SetKeyboardOverlayUV(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f uv) ;

/// @brief Method CreateSpatialAnchor addr 0x261ca88 size 0xdc virtual false final false
static bool CreateSpatialAnchor(GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo createInfo, ByRef<uint64_t> requestId) ;

/// @brief Method SetSpaceComponentStatus addr 0x261cb64 size 0x120 virtual false final false
static bool SetSpaceComponentStatus(uint64_t space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType componentType, bool enable, double_t timeout, ByRef<uint64_t> requestId) ;

/// @brief Method GetSpaceComponentStatus addr 0x261cc84 size 0x11c virtual false final false
static bool GetSpaceComponentStatus(uint64_t space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType componentType, ByRef<bool> enabled, ByRef<bool> changePending) ;

/// @brief Method EnumerateSpaceSupportedComponents addr 0x261cda0 size 0xf0 virtual false final false
static bool EnumerateSpaceSupportedComponents(uint64_t space, ByRef<uint32_t> numSupportedComponents, ::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType> supportedComponents) ;

/// @brief Method SaveSpace addr 0x261ce90 size 0xf4 virtual false final false
static bool SaveSpace(uint64_t space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation location, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode mode, ByRef<uint64_t> requestId) ;

/// @brief Method EraseSpace addr 0x261cf84 size 0xe4 virtual false final false
static bool EraseSpace(uint64_t space, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation location, ByRef<uint64_t> requestId) ;

/// @brief Method GetSpaceUuid addr 0x261d068 size 0xdc virtual false final false
static bool GetSpaceUuid(uint64_t space, ByRef<System::Guid> uuid) ;

/// @brief Method QuerySpaces addr 0x261d144 size 0x21c virtual false final false
static bool QuerySpaces(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo queryInfo, ByRef<uint64_t> requestId) ;

/// @brief Method RetrieveSpaceQueryResults addr 0x261d360 size 0x1b4 virtual false final false
static bool RetrieveSpaceQueryResults(uint64_t requestId, ByRef<Unity::Collections::NativeArray_1<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult>> results, Unity::Collections::Allocator allocator) ;

/// @brief Method RetrieveSpaceQueryResults addr 0x261d514 size 0x38c virtual false final false
static bool RetrieveSpaceQueryResults(uint64_t requestId, ByRef<::ArrayW<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult>> results) ;

/// @brief Method SaveSpaceList addr 0x261d8a0 size 0x124 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result SaveSpaceList(Unity::Collections::NativeArray_1<uint64_t> spaces, GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation location, ByRef<uint64_t> requestId) ;

/// @brief Method GetSpaceUserId addr 0x261d9c4 size 0xdc virtual false final false
static bool GetSpaceUserId(uint64_t spaceUserHandle, ByRef<uint64_t> spaceUserId) ;

/// @brief Method CreateSpaceUser addr 0x261daa0 size 0xdc virtual false final false
static bool CreateSpaceUser(uint64_t spaceUserId, ByRef<uint64_t> spaceUserHandle) ;

/// @brief Method DestroySpaceUser addr 0x261db7c size 0xc8 virtual false final false
static bool DestroySpaceUser(uint64_t spaceUserHandle) ;

/// @brief Method ShareSpaces addr 0x261dc44 size 0x140 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Result ShareSpaces(Unity::Collections::NativeArray_1<uint64_t> spaces, Unity::Collections::NativeArray_1<uint64_t> userHandles, ByRef<uint64_t> requestId) ;

/// @brief Method TryLocateSpace addr 0x261dd84 size 0x1e0 virtual false final false
static bool TryLocateSpace(uint64_t space, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin baseOrigin, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> pose) ;

/// @brief Method LocateSpace addr 0x261df64 size 0xd0 virtual false final false
static GlobalNamespace::GlobalNamespace__OVRPlugin__Posef LocateSpace(uint64_t space, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin baseOrigin) ;

/// @brief Method TryLocateSpace addr 0x261e034 size 0x168 virtual false final false
static bool TryLocateSpace(uint64_t space, GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin baseOrigin, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Posef> pose, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags> locationFlags) ;

/// @brief Method DestroySpace addr 0x261e19c size 0xc8 virtual false final false
static bool DestroySpace(uint64_t space) ;

/// @brief Method GetSpaceContainer addr 0x261e264 size 0x274 virtual false final false
static bool GetSpaceContainer(uint64_t space, ByRef<::ArrayW<System::Guid>> containerUuids) ;

/// @brief Method GetSpaceBoundingBox2D addr 0x261e4d8 size 0xdc virtual false final false
static bool GetSpaceBoundingBox2D(uint64_t space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf> rect) ;

/// @brief Method GetSpaceBoundingBox3D addr 0x261e5b4 size 0xe0 virtual false final false
static bool GetSpaceBoundingBox3D(uint64_t space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf> bounds) ;

/// @brief Method GetSpaceSemanticLabels addr 0x261e694 size 0x190 virtual false final false
static bool GetSpaceSemanticLabels(uint64_t space, ByRef<::StringW> labels) ;

/// @brief Method GetSpaceRoomLayout addr 0x261e824 size 0x250 virtual false final false
static bool GetSpaceRoomLayout(uint64_t space, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayout> roomLayout) ;

/// @brief Method GetSpaceBoundary2DCount addr 0x261ea74 size 0xec virtual false final false
static bool GetSpaceBoundary2DCount(uint64_t space, ByRef<int32_t> count) ;

/// @brief Method GetSpaceBoundary2D addr 0x261eb60 size 0x114 virtual false final false
static bool GetSpaceBoundary2D(uint64_t space, Unity::Collections::NativeArray_1<UnityEngine::Vector2> boundary) ;

/// @brief Method GetSpaceBoundary2D addr 0x261ec74 size 0x1a0 virtual false final false
static Unity::Collections::NativeArray_1<UnityEngine::Vector2> GetSpaceBoundary2D(uint64_t space, Unity::Collections::Allocator allocator) ;

/// @brief Method GetSpaceBoundary2D addr 0x261ee14 size 0x318 virtual false final false
static bool GetSpaceBoundary2D(uint64_t space, ByRef<::ArrayW<UnityEngine::Vector2>> boundary) ;

/// @brief Method RequestSceneCapture addr 0x261f12c size 0x120 virtual false final false
static bool RequestSceneCapture(::StringW requestString, ByRef<uint64_t> requestId) ;

/// @brief Method GetRenderModelPaths addr 0x261f24c size 0x22c virtual false final false
static ::ArrayW<::StringW> GetRenderModelPaths() ;

/// @brief Method GetRenderModelProperties addr 0x261f478 size 0x1a4 virtual false final false
static bool GetRenderModelProperties(::StringW modelPath, ByRef<GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties> modelProperties) ;

/// @brief Method LoadRenderModel addr 0x261f61c size 0x200 virtual false final false
static ::ArrayW<uint8_t> LoadRenderModel(uint64_t modelKey) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = false;
};
// Non member Declarations
} // namespace end def GlobalNamespace
// Type: ::PinnedArray`1
namespace GlobalNamespace {
// cpp template
template<>
// Is value type: true
// Dependencies: {TypeDefinitionIndex(TypeDefinitionIndex(2638)), TypeDefinitionIndex(TypeDefinitionIndex(8745))}
// Self: GenericInstantiation(GenericInstantiation { tdi: TypeDefinitionIndex(8745), inst: 2498 })
// CS Name: OVRPlugin::PinnedArray`1
struct CORDL_TYPE GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid> : public ::bs_hook::ValueTypeWrapper {
public:
// Declarations
/// @brief Convert operator to System::IDisposable
constexpr operator  System::IDisposable() const;

// Ctor Parameters [CppParam { name: "_handle", ty: "System::Runtime::InteropServices::GCHandle", modifiers: "", def_value: None }]
constexpr GlobalNamespace__OVRPlugin__PinnedArray_1(System::Runtime::InteropServices::GCHandle _handle) noexcept;


                    constexpr GlobalNamespace__OVRPlugin__PinnedArray_1(GlobalNamespace__OVRPlugin__PinnedArray_1 const&) = default;
                    constexpr GlobalNamespace__OVRPlugin__PinnedArray_1(GlobalNamespace__OVRPlugin__PinnedArray_1&&) = default;
                    constexpr GlobalNamespace__OVRPlugin__PinnedArray_1& operator=(GlobalNamespace__OVRPlugin__PinnedArray_1 const& o) {
                        __instance = o.__instance;
                        return *this;
                    };
                    constexpr GlobalNamespace__OVRPlugin__PinnedArray_1& operator=(GlobalNamespace__OVRPlugin__PinnedArray_1&& o) noexcept {
                        __instance = std::move(o.__instance);
                        return *this;
                    };
                

/// @brief The size of the true value type
static constexpr auto  __CORDL_VALUE_TYPE_SIZE{0x8};

/// @brief Holds the value type data
 std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>  __instance;

// Ctor Parameters [CppParam { name: "instance", ty: "std::array<std::byte, __CORDL_VALUE_TYPE_SIZE>", modifiers: "", def_value: None }]
constexpr explicit GlobalNamespace__OVRPlugin__PinnedArray_1(std::array<std::byte, __CORDL_VALUE_TYPE_SIZE> instance) noexcept : ::bs_hook::ValueTypeWrapper(),__instance(std::move(instance)) {
}

/// @brief conversion method for value type
constexpr void* convert() const noexcept {
return const_cast<void*>(static_cast<const void*>(__instance.data()));
}


// Fields

 System::Runtime::InteropServices::GCHandle __declspec(property(get=__get__handle, put=__set__handle))  _handle;

constexpr void __set__handle(System::Runtime::InteropServices::GCHandle value) ;

constexpr System::Runtime::InteropServices::GCHandle __get__handle() const;


// Methods

/// @brief Method .ctor addr 0x0 size 0xffffffffffffffff virtual false final false
 void _ctor(::ArrayW<System::Guid> array) ;

/// @brief Method Dispose addr 0x0 size 0xffffffffffffffff virtual true final true
 void Dispose() ;

/// @brief Method op_Implicit addr 0x0 size 0xffffffffffffffff virtual false final false
static ::cordl_internals::intptr_t op_Implicit___cordl_internals__intptr_t(GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1<System::Guid> pinnedArray) ;

static constexpr bool __CORDL_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace end def GlobalNamespace
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__BatteryStatus, "", "OVRPlugin/BatteryStatus");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__BlendFactor, "", "OVRPlugin/BlendFactor");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneId, "", "OVRPlugin/BoneId");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Bool, "", "OVRPlugin/Bool");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryType, "", "OVRPlugin/BoundaryType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraAnchorType, "", "OVRPlugin/CameraAnchorType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDevice, "", "OVRPlugin/CameraDevice");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthQuality, "", "OVRPlugin/CameraDeviceDepthQuality");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceDepthSensingMode, "", "OVRPlugin/CameraDeviceDepthSensingMode");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraStatus, "", "OVRPlugin/CameraStatus");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__ColorSpace, "", "OVRPlugin/ColorSpace");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Controller, "", "OVRPlugin/Controller");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__EventType, "", "OVRPlugin/EventType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Eye, "", "OVRPlugin/Eye");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeTextureFormat, "", "OVRPlugin/EyeTextureFormat");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__FaceConstants, "", "OVRPlugin/FaceConstants");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpression, "", "OVRPlugin/FaceExpression");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__FaceRegionConfidence, "", "OVRPlugin/FaceRegionConfidence");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__FeatureType, "", "OVRPlugin/FeatureType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__FixedFoveatedRenderingLevel, "", "OVRPlugin/FixedFoveatedRenderingLevel");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__FoveatedRenderingLevel, "", "OVRPlugin/FoveatedRenderingLevel");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Hand, "", "OVRPlugin/Hand");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__HandFinger, "", "OVRPlugin/HandFinger");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__HandFingerPinch, "", "OVRPlugin/HandFingerPinch");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__HandStatus, "", "OVRPlugin/HandStatus");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Handedness, "", "OVRPlugin/Handedness");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsConstants, "", "OVRPlugin/HapticsConstants");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsLocation, "", "OVRPlugin/HapticsLocation");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughColorMapType, "", "OVRPlugin/InsightPassthroughColorMapType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyleFlags, "", "OVRPlugin/InsightPassthroughStyleFlags");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__InteractionProfile, "", "OVRPlugin/InteractionProfile");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescriptionConstants, "", "OVRPlugin/KeyboardDescriptionConstants");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerFlags, "", "OVRPlugin/LayerFlags");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerLayout, "", "OVRPlugin/LayerLayout");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__LogLevel, "", "OVRPlugin/LogLevel");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__InputVideoBufferType, "", "OVRPlugin/Media/InputVideoBufferType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__MrcActivationMode, "", "OVRPlugin/Media/MrcActivationMode");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Media__PlatformCameraMode, "", "OVRPlugin/Media/PlatformCameraMode");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__MeshConstants, "", "OVRPlugin/MeshConstants");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__MeshType, "", "OVRPlugin/MeshType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Node, "", "OVRPlugin/Node");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayFlag, "", "OVRPlugin/OverlayFlag");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OverlayShape, "", "OVRPlugin/OverlayShape");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__PassthroughCapabilityFlags, "", "OVRPlugin/PassthroughCapabilityFlags");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__PerfMetrics, "", "OVRPlugin/PerfMetrics");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__PlatformUI, "", "OVRPlugin/PlatformUI");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__ProcessorPerformanceLevel, "", "OVRPlugin/ProcessorPerformanceLevel");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__RecenterFlags, "", "OVRPlugin/RecenterFlags");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelFlags, "", "OVRPlugin/RenderModelFlags");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Result, "", "OVRPlugin/Result");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonConstants, "", "OVRPlugin/SkeletonConstants");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SkeletonType, "", "OVRPlugin/SkeletonType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceComponentType, "", "OVRPlugin/SpaceComponentType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationFlags, "", "OVRPlugin/SpaceLocationFlags");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryActionType, "", "OVRPlugin/SpaceQueryActionType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryFilterType, "", "OVRPlugin/SpaceQueryFilterType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryType, "", "OVRPlugin/SpaceQueryType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStorageLocation, "", "OVRPlugin/SpaceStorageLocation");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceStoragePersistenceMode, "", "OVRPlugin/SpaceStoragePersistenceMode");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Step, "", "OVRPlugin/Step");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SystemHeadset, "", "OVRPlugin/SystemHeadset");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SystemRegion, "", "OVRPlugin/SystemRegion");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__TiledMultiResLevel, "", "OVRPlugin/TiledMultiResLevel");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardFlags, "", "OVRPlugin/TrackedKeyboardFlags");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardPresentationStyles, "", "OVRPlugin/TrackedKeyboardPresentationStyles");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackedKeyboardQueryFlags, "", "OVRPlugin/TrackedKeyboardQueryFlags");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Tracker, "", "OVRPlugin/Tracker");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingConfidence, "", "OVRPlugin/TrackingConfidence");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__TrackingOrigin, "", "OVRPlugin/TrackingOrigin");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__XrApi, "", "OVRPlugin/XrApi");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__GUID);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__GUID, "", "OVRPlugin/GUID");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Ktx, "", "OVRPlugin/Ktx");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__LogCallback2DelegateType, "", "OVRPlugin/LogCallback2DelegateType");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__Media);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Media, "", "OVRPlugin/Media");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Mesh, "", "OVRPlugin/Mesh");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_0, "", "OVRPlugin/OVRP_0_1_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_1);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_1, "", "OVRPlugin/OVRP_0_1_1");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_2, "", "OVRPlugin/OVRP_0_1_2");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_1_3, "", "OVRPlugin/OVRP_0_1_3");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_5_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_0_5_0, "", "OVRPlugin/OVRP_0_5_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_0_0, "", "OVRPlugin/OVRP_1_0_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_10_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_10_0, "", "OVRPlugin/OVRP_1_10_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_11_0, "", "OVRPlugin/OVRP_1_11_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_12_0, "", "OVRPlugin/OVRP_1_12_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_15_0, "", "OVRPlugin/OVRP_1_15_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_16_0, "", "OVRPlugin/OVRP_1_16_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_17_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_17_0, "", "OVRPlugin/OVRP_1_17_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_18_0, "", "OVRPlugin/OVRP_1_18_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_19_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_19_0, "", "OVRPlugin/OVRP_1_19_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_1_0, "", "OVRPlugin/OVRP_1_1_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_21_0, "", "OVRPlugin/OVRP_1_21_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_28_0, "", "OVRPlugin/OVRP_1_28_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_29_0, "", "OVRPlugin/OVRP_1_29_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_2_0, "", "OVRPlugin/OVRP_1_2_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_30_0, "", "OVRPlugin/OVRP_1_30_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_31_0, "", "OVRPlugin/OVRP_1_31_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_32_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_32_0, "", "OVRPlugin/OVRP_1_32_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_34_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_34_0, "", "OVRPlugin/OVRP_1_34_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_35_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_35_0, "", "OVRPlugin/OVRP_1_35_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_36_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_36_0, "", "OVRPlugin/OVRP_1_36_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_37_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_37_0, "", "OVRPlugin/OVRP_1_37_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_38_0, "", "OVRPlugin/OVRP_1_38_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_39_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_39_0, "", "OVRPlugin/OVRP_1_39_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_3_0, "", "OVRPlugin/OVRP_1_3_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_40_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_40_0, "", "OVRPlugin/OVRP_1_40_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_41_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_41_0, "", "OVRPlugin/OVRP_1_41_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_42_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_42_0, "", "OVRPlugin/OVRP_1_42_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_43_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_43_0, "", "OVRPlugin/OVRP_1_43_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_44_0, "", "OVRPlugin/OVRP_1_44_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_45_0, "", "OVRPlugin/OVRP_1_45_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_46_0, "", "OVRPlugin/OVRP_1_46_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_47_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_47_0, "", "OVRPlugin/OVRP_1_47_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_48_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_48_0, "", "OVRPlugin/OVRP_1_48_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_49_0, "", "OVRPlugin/OVRP_1_49_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_50_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_50_0, "", "OVRPlugin/OVRP_1_50_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_51_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_51_0, "", "OVRPlugin/OVRP_1_51_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_52_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_52_0, "", "OVRPlugin/OVRP_1_52_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_53_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_53_0, "", "OVRPlugin/OVRP_1_53_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_54_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_54_0, "", "OVRPlugin/OVRP_1_54_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_0, "", "OVRPlugin/OVRP_1_55_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_1);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_55_1, "", "OVRPlugin/OVRP_1_55_1");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_56_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_56_0, "", "OVRPlugin/OVRP_1_56_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_57_0, "", "OVRPlugin/OVRP_1_57_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_58_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_58_0, "", "OVRPlugin/OVRP_1_58_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_59_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_59_0, "", "OVRPlugin/OVRP_1_59_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_5_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_5_0, "", "OVRPlugin/OVRP_1_5_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_60_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_60_0, "", "OVRPlugin/OVRP_1_60_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_61_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_61_0, "", "OVRPlugin/OVRP_1_61_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_62_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_62_0, "", "OVRPlugin/OVRP_1_62_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_63_0, "", "OVRPlugin/OVRP_1_63_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_64_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_64_0, "", "OVRPlugin/OVRP_1_64_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_65_0, "", "OVRPlugin/OVRP_1_65_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_66_0, "", "OVRPlugin/OVRP_1_66_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_67_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_67_0, "", "OVRPlugin/OVRP_1_67_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_68_0, "", "OVRPlugin/OVRP_1_68_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_69_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_69_0, "", "OVRPlugin/OVRP_1_69_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_6_0, "", "OVRPlugin/OVRP_1_6_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_70_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_70_0, "", "OVRPlugin/OVRP_1_70_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_71_0, "", "OVRPlugin/OVRP_1_71_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_72_0, "", "OVRPlugin/OVRP_1_72_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_73_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_73_0, "", "OVRPlugin/OVRP_1_73_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_74_0, "", "OVRPlugin/OVRP_1_74_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_75_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_75_0, "", "OVRPlugin/OVRP_1_75_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_76_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_76_0, "", "OVRPlugin/OVRP_1_76_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_78_0, "", "OVRPlugin/OVRP_1_78_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_79_0, "", "OVRPlugin/OVRP_1_79_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_7_0, "", "OVRPlugin/OVRP_1_7_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_81_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_81_0, "", "OVRPlugin/OVRP_1_81_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_82_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_82_0, "", "OVRPlugin/OVRP_1_82_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_8_0, "", "OVRPlugin/OVRP_1_8_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__OVRP_1_9_0, "", "OVRPlugin/OVRP_1_9_0");
NEED_NO_BOX(GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__UnityOpenXR, "", "OVRPlugin/UnityOpenXR");
NEED_NO_BOX(GlobalNamespace::OVRPlugin);
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin, "", "OVRPlugin");
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(GlobalNamespace::GlobalNamespace__OVRPlugin__PinnedArray_1, "", "OVRPlugin/PinnedArray`1");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfFrameStats, "", "OVRPlugin/AppPerfFrameStats");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__AppPerfStats, "", "OVRPlugin/AppPerfStats");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyJointLocation, "", "OVRPlugin/BodyJointLocation");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyState, "", "OVRPlugin/BodyState");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__BodyStateInternal, "", "OVRPlugin/BodyStateInternal");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Bone, "", "OVRPlugin/Bone");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__BoneCapsule, "", "OVRPlugin/BoneCapsule");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryGeometry, "", "OVRPlugin/BoundaryGeometry");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__BoundaryTestResult, "", "OVRPlugin/BoundaryTestResult");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Boundsf, "", "OVRPlugin/Boundsf");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraDeviceIntrinsicsParameters, "", "OVRPlugin/CameraDeviceIntrinsicsParameters");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraExtrinsics, "", "OVRPlugin/CameraExtrinsics");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__CameraIntrinsics, "", "OVRPlugin/CameraIntrinsics");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Colorf, "", "OVRPlugin/Colorf");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState, "", "OVRPlugin/ControllerState");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState2, "", "OVRPlugin/ControllerState2");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState4, "", "OVRPlugin/ControllerState4");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__ControllerState5, "", "OVRPlugin/ControllerState5");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__EventDataBuffer, "", "OVRPlugin/EventDataBuffer");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazeState, "", "OVRPlugin/EyeGazeState");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesState, "", "OVRPlugin/EyeGazesState");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__EyeGazesStateInternal, "", "OVRPlugin/EyeGazesStateInternal");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatus, "", "OVRPlugin/FaceExpressionStatus");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__FaceExpressionStatusInternal, "", "OVRPlugin/FaceExpressionStatusInternal");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__FaceState, "", "OVRPlugin/FaceState");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__FaceStateInternal, "", "OVRPlugin/FaceStateInternal");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Fovf, "", "OVRPlugin/Fovf");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf, "", "OVRPlugin/Frustumf");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Frustumf2, "", "OVRPlugin/Frustumf2");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__HandState, "", "OVRPlugin/HandState");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__HandStateInternal, "", "OVRPlugin/HandStateInternal");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsAmplitudeEnvelopeVibration, "", "OVRPlugin/HapticsAmplitudeEnvelopeVibration");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsBuffer, "", "OVRPlugin/HapticsBuffer");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsDesc, "", "OVRPlugin/HapticsDesc");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsPcmVibration, "", "OVRPlugin/HapticsPcmVibration");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__HapticsState, "", "OVRPlugin/HapticsState");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughKeyboardHandsIntensity, "", "OVRPlugin/InsightPassthroughKeyboardHandsIntensity");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__InsightPassthroughStyle, "", "OVRPlugin/InsightPassthroughStyle");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardDescription, "", "OVRPlugin/KeyboardDescription");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__KeyboardState, "", "OVRPlugin/KeyboardState");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDesc, "", "OVRPlugin/LayerDesc");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerDescInternal, "", "OVRPlugin/LayerDescInternal");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__LayerSubmit, "", "OVRPlugin/LayerSubmit");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__PolygonalBoundary2DInternal, "", "OVRPlugin/PolygonalBoundary2DInternal");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__PoseStatef, "", "OVRPlugin/PoseStatef");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Posef, "", "OVRPlugin/Posef");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Quatf, "", "OVRPlugin/Quatf");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Rectf, "", "OVRPlugin/Rectf");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Recti, "", "OVRPlugin/Recti");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelProperties, "", "OVRPlugin/RenderModelProperties");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__RenderModelPropertiesInternal, "", "OVRPlugin/RenderModelPropertiesInternal");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayout, "", "OVRPlugin/RoomLayout");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__RoomLayoutInternal, "", "OVRPlugin/RoomLayoutInternal");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SceneCaptureRequestInternal, "", "OVRPlugin/SceneCaptureRequestInternal");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Size3f, "", "OVRPlugin/Size3f");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizef, "", "OVRPlugin/Sizef");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Sizei, "", "OVRPlugin/Sizei");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton, "", "OVRPlugin/Skeleton");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2, "", "OVRPlugin/Skeleton2");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Skeleton2Internal, "", "OVRPlugin/Skeleton2Internal");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceContainerInternal, "", "OVRPlugin/SpaceContainerInternal");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoComponents, "", "OVRPlugin/SpaceFilterInfoComponents");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceFilterInfoIds, "", "OVRPlugin/SpaceFilterInfoIds");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceLocationf, "", "OVRPlugin/SpaceLocationf");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryInfo, "", "OVRPlugin/SpaceQueryInfo");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceQueryResult, "", "OVRPlugin/SpaceQueryResult");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpaceSemanticLabelInternal, "", "OVRPlugin/SpaceSemanticLabelInternal");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__SpatialAnchorCreateInfo, "", "OVRPlugin/SpatialAnchorCreateInfo");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__TextureRectMatrixf, "", "OVRPlugin/TextureRectMatrixf");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2f, "", "OVRPlugin/Vector2f");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector2i, "", "OVRPlugin/Vector2i");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector3f, "", "OVRPlugin/Vector3f");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4f, "", "OVRPlugin/Vector4f");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GlobalNamespace__OVRPlugin__Vector4s, "", "OVRPlugin/Vector4s");
