name: Check for Game updates

on:

#   schedule:
#     # every day at 5:45 PM UTC (should be decently after beatgames usually releases their game)
#     - cron: '45 17 * * *'
  workflow_dispatch:
#   push:
#     branches:
#       - 'master'
#       - 'feat/auto-generation'
#     paths:
#       - '.github/actions/download-app/*'
#       - '.github/actions/get-latest-version/*'
#       - '.github/actions/cordl-run/*'
#       - '.github/workflows/check-for-updates.yml'
#       - 'scripts/deno/*'

env:
  ANDROID_PACKAGE: "com.beatgames.beatsaber"
  BRANCH_PREFIX: "bs"
  CORDL_GIT: "https://github.com/Fernthedev/cordl"
  CORDL_BRANCH: "dev/generic_methods_redo"
  MAIN_BRANCH: "master"

jobs:
  update-check:
    runs-on: ubuntu-latest
    outputs:
      update-required: ${{ steps.version-check.outputs.result != 'true' }}
      version: ${{ steps.latest-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Get latest version number
        id: latest-version
        uses: ./.github/actions/get-latest-version
        with:
          package: ${{ env.ANDROID_PACKAGE }}

      - name: Exit if package not found
        if: ${{ !steps.latest-version.outputs.found }}
        uses: actions/github-script@v6
        with:
          script: core.setFailed('package was not found!')

      - name: Check if tag exists for latest version
        if: ${{ steps.latest-version.outputs.found }}
        id: version-check
        env:
          GIT_TAG: bs-${{ steps.latest-version.outputs.version }}
        run: deno run --allow-env --allow-run --allow-write ./scripts/deno/checktag.ts

      - name: Print results
        run: |
          echo "Latest version: ${{ steps.latest-version.outputs.version }}"
          echo "Package found: ${{ steps.latest-version.outputs.found }}"
          echo "Tag found: ${{ steps.version-check.outputs.result }}"
          echo "Update Required: ${{ steps.version-check.outputs.result != 'true' }}"

  generate-headers:
    runs-on: ubuntu-latest
    needs: update-check
    outputs:
      output-branch: ${{ steps.branch.outputs.output-branch }}
      release-branch: ${{ steps.branch.outputs.release-branch }}
    if: ${{ needs.update-check.outputs.update-required == 'true' }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup qpm
        uses: Fernthedev/qpm-action@main
        with:
          workflow_token: ${{ secrets.GITHUB_TOKEN }}
          restore: true
          cache: true
          publish: false

      - name: Output branch names
        id: branch
        run: |
          echo "output-branch=headers/${{ env.BRANCH_PREFIX }}-${{ needs.update-check.outputs.version }}" >> ${GITHUB_OUTPUT}
          echo "release-branch=update/${{ env.BRANCH_PREFIX }}-${{ needs.update-check.outputs.version }}" >> ${GITHUB_OUTPUT}

      - name: Download app
        id: download
        uses: ./.github/actions/download-app
        with:
          package:  ${{ env.ANDROID_PACKAGE }}
          version: ${{ needs.update-check.outputs.version }}
          oculus-token: ${{ secrets.OCULUS_TOKEN }}

      - name: Run cordl
        id: cordl-run
        uses: ./.github/actions/cordl-run
        with:
          cordl-git: ${{ env.CORDL_GIT }}
          cordl-branch: ${{ env.CORDL_BRANCH }}
          libil2cpp-path: ${{ steps.download.outputs.libil2cpp-path }}
          metadata-path: ${{ steps.download.outputs.metadata-path }}
          format: false

      - name: Move files
        run: |
          rm -rf ${GITHUB_WORKSPACE}/include
          mv ${{ steps.cordl-run.outputs.include-path }} ${GITHUB_WORKSPACE}/include

      - name: Configure commit
        run: |
          git config user.name "Github Actions"
          git config user.email "<>"
          git checkout -b ${{ steps.branch.outputs.release-branch }}
          git push --set-upstream origin ${{ steps.branch.outputs.release-branch }}

      - name: Bump package minor version
        run: deno run --allow-run --allow-read ./scripts/deno/bump.ts

      # updated qpm info also needs to go to the main branch to work correctly, but we set the branch to be the output one
      - name: Update QPM info
        run: |
          qpm package edit-extra --branchName ${{ steps.branch.outputs.output-branch }}
          qpm restore
          git add qpm.json qpm.shared.json
          git commit -m "Update Package version and info" --allow-empty
          git push

      - name: Read new qpm version
        uses: actions/github-script@v6
        id: qpm-info
        with:
          script:
            const fs = require('fs');
            await fs.readFile("qpm.json", function read(err, data) {
              const qpm = JSON.parse(data);
              core.setOutput('version', qpm.info.version);
            });

      # FIXME: temporarily comment out making the PR to avoid tons of duplicates
      # - name: Create PR back into main branch
      #   env:
      #     BASE: ${{ env.MAIN_BRANCH }}
      #     TO_MERGE: ${{ steps.branch.outputs.release-branch }}
      #     GITHUB_TOKEN: ${{ github.token }}
      #   run: |
      #     gh pr create -B ${BASE} -H ${TO_MERGE} --title 'Update for ${{ env.BRANCH_PREFIX }}-${{ needs.update-check.outputs.version }}' --body 'Bump qpm to version ${{ steps.qpm-info.outputs.version }}, Created by Github actions'

      # header files go to a seperate branch unrelated to the one we are pr-ing on
      - name: Commit and push new header files to seperate branch
        env:
          VERSION: ${{ needs.update-check.outputs.version }}
          GIT_TAG: ${{ env.BRANCH_PREFIX }}-${{ needs.update-check.outputs.version }}
          TARGET_BRANCH: ${{ steps.branch.outputs.output-branch }}
        run: |
          git checkout -b $TARGET_BRANCH
          git add ./include
          git commit -q -m "Update headers -> $VERSION" --allow-empty
          git push --set-upstream origin $TARGET_BRANCH
          git tag $GIT_TAG
          git push origin $GIT_TAG

  # We test pch compilation to ensure the headers are valid
  compile-pch:
    runs-on: ubuntu-latest
    needs: [ update-check, generate-headers ]
    if: ${{ needs.update-check.outputs.update-required == 'true' }}
    steps:
      - name: Checkout updated branch
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.generate-headers.outputs.output-branch }}

      - name: Setup deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Setup ndk
        id: setup-ndk
        uses: ./.github/actions/canary-ndk

      - name: Setup qpm
        uses: Fernthedev/qpm-action@main
        with:
          workflow_token: ${{ secrets.GITHUB_TOKEN }}
          restore: true
          cache: true
          publish: false

      - name: Write ndkpath.txt
        run: echo -n "${{ steps.setup-ndk.outputs.ndk-path }}" > ndkpath.txt

      - name: Compile pch files
        run: deno run --allow-read --allow-write --allow-run ./scripts/deno/compile_pch.ts

  # headers should be nicely formatted
  format-headers:
    runs-on: ubuntu-latest
    needs: [ update-check, generate-headers, compile-pch ]
    if: ${{ needs.update-check.outputs.update-required == 'true' }}
    steps:
      - name: Checkout updated branch
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.generate-headers.outputs.output-branch }}

      - name: Setup deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Install clang format
        run: sudo apt-get -y install clang-format

      - name: Format headers
        env:
          FORMAT_PATH: ./include
        run: deno run --allow-write --allow-read --allow-run --allow-env ./scripts/deno/format.ts

      - name: Configure commit
        run: |
          git config user.name "Github Actions"
          git config user.email "<>"

      - name: Commit formatted files
        run: |
          git add ./include
          git commit -q -m "Format files"
          git push -u origin ${{ needs.generate-headers.outputs.output-branch }}

      - name: Retag game version commit
        env:
          GIT_TAG: ${{ env.BRANCH_PREFIX }}-${{ needs.update-check.outputs.version }}
        run: |
          git tag $GIT_TAG
          git push origin $GIT_TAG --force
